const
  coFile_Col_typeLine = 1; // Тип строки        X        1        Символьный        H - Шапка, I - строка
  coLineType_Head     = 'H'; //         H - Шапка
  coLineType_Spec     = 'I'; //         I - строка спецификации
 // Номера колонок в первой строке файла
  coFileH_Col_DO_Num      = 4; //номер колонки с номером ДО
  coFileH_Col_Relevant    = 5; //номер колонки с релевантностью
  coFileH_Col_PalletCnt   = 6; //Количество паллет        C**        5        Числовой                Количество паллет в отгрузке, обязательно для определенных клиентов
// номера колонок в спецификации
  coFileSP_Col_DO_Num     = 2; //Номер заказа        X        20        Символьный
  coFileSP_Col_SAP_CODE   = 3; //Код товара        Х        40        Символьный
  coFileSP_Col_CNT        = 4; //Количество        X        20        Числовой                В базовых ЕИ
  coFileSP_Col_ED         = 5; //Базовая единица измерения        X        5        Символьный                ISO коды
  coFileSP_Col_DateExpire = 6; //Годен до                10        date                Дата окончания срока годности отгруженных товаров
  coFileSP_Col_DateCreate = 7; //Дата производства        C        10        Date (в том же формате, как в Меркурии)                Дата производства отгруженных товаров. Обязательно для товаров Меркурия.
  coFileSP_Col_UUID       = 8; //UUID ЭВСД        С*        100        Символьный                Уникальный номер ЭВСД, обязательно для меркурия
  coFileSP_Col_PalletSSCC = 9; //SSCC-паллеты        С**        18        Числовой                 SSCC-код паллеты, на котором расположен товар.  Обязательно для определенных клиентов.



end;
Interface Mercury_import 'Загрузка файлов от Меркурия';
  show at (,, 91, 23);

//#include VarsTypes.vip
table Struct tmpMercury_Head = ATL_MERCURY_HEAD
;
table Struct tmpMercury_SP = ATL_MERCURY_Spec
;
create view
var
 _file : string;
  Folder_input
 ,Folder_To
 ,_MaskFileName
 , _logFile
 ,_curLineType : string;

as select katmc.nrec
, ATL_MERCURY_LOG1.State
// , ATL_MERCURY_LOG1.LogDate
from
   KatMC
 , SpSopr
 , katsopr
 , tmpMercury_Head
 , tmpMercury_SP
 , ATL_MERCURY_HEAD
 , ATL_MERCURY_Spec
 , ATL_MERCURY_Spec ATL_MERCURY_Spec_1
 , ATL_MERCURY_LOG_new ATL_MERCURY_LOG1
;
file fSrc;

PROCEdURE ClearAll;
{
 delete all tmpMercury_Head;
 delete all tmpMercury_SP;
} // PROCEdURE ClearAll;

procedure MyLog(_log : string);
{
  logstrtofile(_logFile,_log);
}
Function GetMCBySapCode( _code: string) : comp; Cacheable;
{
  var _result : comp = 0h;
  if _code <> ''
  _try
   { sql
     select top 1 katmc.nrec
      from katmc
      where katmc.barkod2 = :(_Code)
      into (_result);
   }
   _except else {var _empty : boolean = false;} //чтобы компилятор ничего не говорил
   result := _result;
}


function getKatSoprByBaseDocNumber(_basedocNoDoc : string): comp;
{
  var _result : comp = 0h;
  if _basedocNoDoc <> ''
  _try
   { sql
     select top 1 ks.nrec
      from basedoc bd
       join StepDoc StDO on StDo.cBaseDoc = BD.Nrec
       join KatSopr KS on KS.cStepDoc = StDO.nrec
      Where bd.nodoc = :(_basedocNoDoc)
      and BD.viddoc = 201
      into (_result);
   }
   _except else {var _empty : boolean = false;} //чтобы компилятор ничего не говорил
   result := _result;
}
function getValueByNumberCol(_line: string; _col : word): string;
{
  Result := ExtractDelimitedWord(_line,_col,';');
}
procedure InsertTmpHead(_line,_filename: string);
{
   mylog(' _filename = ' + _filename);
   clearbuffer(tntmpMercury_Head);
  tmpMercury_Head.DO_Num    := getValueByNumberCol(_line,coFileH_Col_DO_Num);
  tmpMercury_Head.Relevant  := getValueByNumberCol(_line,coFileH_Col_Relevant);
  tmpMercury_Head.PalletCnt := getValueByNumberCol(_line,coFileH_Col_PalletCnt);
  tmpMercury_Head.filename  := _filename;
  tmpMercury_Head.isOK      := true;
  tmpMercury_Head.cSopr     := getKatSoprByBaseDocNumber(getValueByNumberCol(_line,coFileH_Col_DO_Num));
  tmpMercury_Head.wStatus   :=  1; // отгружен
 insert current tmpMercury_Head;
 if tmpMercury_Head.cSopr = 0h and tmpMercury_Head.DO_Num <> '' then
  {
      set tmpMercury_Head.isOK := false;
      set tmpMercury_Head.ErrDescr := tmpMercury_Head.ErrDescr + '|'+ ' ERROR!! не нашли накладную к ДО "' +tmpMercury_Head.DO_Num+ '"' ;
     update current tmpMercury_Head;
    mylog(' ERROR!! ' + tmpMercury_Head.DO_Num + '+не нашли накладную к ДО')  ;
  }
}
procedure InsertTmpSpec(_line : string);
{
  if not isvalidAll(tntmpMercury_Head) {
    mylog(' ERROR!! нет шапки в файле, обработка невозможна') ;
    exit;
  }
  clearbuffer(tntmpMercury_SP);
  if tmpMercury_Head.DO_Num  <> getValueByNumberCol(_line,coFileSP_Col_DO_Num){

    set tmpMercury_SP.ErrDescr := '|'+ 'Номер ДО отличается от шапки';
    mylog(' ERROR!! В шапке файла указан ДО "'+ tmpMercury_Head.DO_Num +'", а в спецификации "' + getValueByNumberCol(_line,coFileSP_Col_DO_Num) + '"')  ;
    update current tmpMercury_Head set tmpMercury_Head.isOK := false;
    exit;
  }
   tmpMercury_SP.cHead      := tmpMercury_Head.nrec ;
   tmpMercury_SP.SAP_CODE   := getValueByNumberCol(_line, coFileSP_Col_SAP_CODE );
   tmpMercury_SP.cMC        := GetMCBySapCode(getValueByNumberCol(_line, coFileSP_Col_SAP_CODE ));
   tmpMercury_SP.CNT        := double(replace(getValueByNumberCol(_line, coFileSP_Col_CNT),',','.'));
   tmpMercury_SP.ED         := getValueByNumberCol(_line, coFileSP_Col_ED       );
   tmpMercury_SP.DateExpire := getValueByNumberCol(_line, coFileSP_Col_DateExpire);
   tmpMercury_SP.DateCreate := getValueByNumberCol(_line, coFileSP_Col_DateCreate);
   tmpMercury_SP.UUID       := getValueByNumberCol(_line, coFileSP_Col_UUID      );
   tmpMercury_SP.PalletSSCC := getValueByNumberCol(_line, coFileSP_Col_PalletSSCC);
  insert current tmpMercury_SP;
   if tmpMercury_SP.SAP_CODE = '' { mylog(' ERROR!! пустой SAP_CODE');
      set tmpMercury_Head.isOK := false;
      set tmpMercury_SP.ErrDescr := tmpMercury_SP.ErrDescr + '|'+ ' ERROR!! пустой SAP_CODE' ;
      }
   if tmpMercury_SP.CNT = 0       {

       mylog(' ERROR!! нулевое количество ');
       set tmpMercury_Head.isOK := false;
       set tmpMercury_SP.ErrDescr := tmpMercury_SP.ErrDescr + '|'+ ' ERROR!! нулевое количество';
      }
   if tmpMercury_SP.cMC = 0h and tmpMercury_SP.SAP_CODE  <> ''  {
       mylog(' ERROR!! не найдена МЦ по SAP_CODE = "'+tmpMercury_SP.SAP_CODE+'" ');
       set tmpMercury_Head.isOK := false;
       set tmpMercury_SP.ErrDescr := tmpMercury_SP.ErrDescr + '|'+ ' ERROR!! не найдена МЦ по SAP_CODE = "'+tmpMercury_SP.SAP_CODE+'" ';
     }
    update current tmpMercury_Head;
    update current tmpMercury_SP;
}
procedure InsertTmpTables(_line, _filename : string);
{
   case getValueByNumberCol(_line, coFile_Col_typeLine) of
    coLineType_Head: {InsertTmpHead(_line,_filename)}
    coLineType_Spec: {InsertTmpSpec(_line)}
   end;
}
procedure CheckFileFillValues(_FilePath, _filename : string);
{
  var _fileLine : string;
 if existFile(_FilePath+_filename) { //try discover file
        _try {
          fSrc.openFile(_FilePath + _filename, stOpenRead);
          mylog('***start _filename = ' + _filename);
          while not fSrc.eof() do {
            fSrc.readLn(_fileLine);
            _fileLine := replace( replace(_fileLine,';;','; ;'),';;','; ;'); //крутит крушу у функции extractdelimitedword иначе 0_0
            InsertTmpTables(_fileLine, _filename);
           }
          mylog('***end _filename = ' + _filename);
        }
        _finally {
          fSrc.close;
        }
    }
}
Function getkolFromMercuryToSpSopr(_cSpSopr : comp) : double;
{
  var _result : double = 0;
  _loop ATL_MERCURY_Spec_1 where ((_cSpSopr  == ATL_MERCURY_Spec_1.cSpSopr))
   {
     _result := _result + ATL_MERCURY_Spec_1.cnt;
   }
  result := _result;
}
procedure RasprPalletesBySpSopr;
{
 // MyLog('Файлы загружены, начинаем распределение паллет по спецификация');
  _loop tmpMercury_Head where tmpMercury_Head.cSopr <> 0h
  if getfirst fastfirstrow katsopr where  (( tmpMercury_Head.cSopr == katsopr.nrec)) = tsOK
  {
    if getfirst ATL_MERCURY_HEAD where ((tmpMercury_Head.cSopr == ATL_MERCURY_HEAD.cSopr)) = tsOK then {
        MyLog(' Файл '+tmpMercury_Head.filename+' пропускается: уже закачан ранее');
        CopyMoveFile(Folder_input+ ATL_MERCURY_head.Filename,Folder_To + datetostr(cur_date,'\YYYY\MM\DD-MM-YYYY\')+ATL_MERCURY_head.Filename, true, ecmfClientFrom  + ecmfClientTo );
        Continue;
     }
     MyLog('Обрабатываем Файл '+tmpMercury_Head.filename);
     ATL_MERCURY_HEAD.buffer := type$ATL_MERCURY_HEAD(tmpMercury_Head.buffer);
     ATL_MERCURY_HEAD.nrec := 0h;
     ATL_MERCURY_HEAD.cMercuryLog := ATL_MERCURY_LOG1.nrec;
     Insert Current ATL_MERCURY_HEAD;
      _loop tmpMercury_sp where ((tmpMercury_Head.nrec == tmpMercury_sp.cHead))
       {
         if getfirst SpSopr where ((tmpMercury_Head.cSopr == spsopr.cSopr
                                    and tmpMercury_sp.cmc == spsopr.cmcusl)) <> tsOK {
             ATL_MERCURY_Spec.buffer   := type$ATL_MERCURY_Spec(tmpMercury_sp.buffer);
             ATL_MERCURY_Spec.nrec     := 0h;
             ATL_MERCURY_Spec.cHead    := ATL_MERCURY_HEAD.nrec;
             ATL_MERCURY_Spec.ERRDESCR := ATL_MERCURY_Spec.ERRDESCR + '| нет в позиции накладной';
            Insert Current ATL_MERCURY_Spec;
         }
         _loop SpSopr where ((tmpMercury_Head.cSopr == spsopr.cSopr
                                    and tmpMercury_sp.cmc == spsopr.cmcusl))
           {
             var _kolFromMercuryToSpSopr : double = getkolFromMercuryToSpSopr(SpSopr.nrec);
             var _kolNeedAdd : double = SPSOPR.KOLFACT - _kolFromMercuryToSpSopr;
             if _kolNeedAdd > 0
             {
              if _kolNeedAdd < tmpMercury_sp.cnt
                {
                 ATL_MERCURY_Spec.buffer  := type$ATL_MERCURY_Spec(tmpMercury_sp.buffer);
                 ATL_MERCURY_Spec.nrec    := 0h;
                 ATL_MERCURY_Spec.cHead   := ATL_MERCURY_HEAD.nrec;
                 ATL_MERCURY_Spec.cSpSopr := SpSopr.nrec;
                 ATL_MERCURY_Spec.cnt     := _kolNeedAdd ;  // получается, что разбиваем на несколько позиций в накладной
                 Insert Current ATL_MERCURY_Spec;
                 tmpMercury_sp.cnt := tmpMercury_sp.cnt - _kolNeedAdd;
                }
                else
                {
                 ATL_MERCURY_Spec.buffer  :=  type$ATL_MERCURY_Spec(tmpMercury_sp.buffer);   // все что есть к позиции прикручиваем
                 ATL_MERCURY_Spec.nrec    := 0h;
                 ATL_MERCURY_Spec.cHead   := ATL_MERCURY_HEAD.nrec;
                 ATL_MERCURY_Spec.cSpSopr := SpSopr.nrec;
                 Insert Current ATL_MERCURY_Spec;
                 tmpMercury_sp.cnt := 0;
                }
                update current tmpMercury_sp;
             }
             if tmpMercury_sp.cnt <= 0 then continue; // если до 0 дошли, то больше не надо по спецификации шастать
           }
       } // _loop tmpMercury_sp where ((tmpMercury_Head.nrec == tmpMercury_sp.cHead))
       CopyMoveFile(Folder_input+ ATL_MERCURY_head.Filename,Folder_To + datetostr(cur_date,'\YYYY\MM\DD-MM-YYYY\')+ATL_MERCURY_head.Filename, true, ecmfClientFrom  + ecmfClientTo );

       if extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_EDI_AUTO) = '1'
       {
           if extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_NeedInvoic) = '1'
           or extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_EDIInvoicLen) = '1'
           {
            if _ExpImpScript_Droga.GetfirstieHeadOnInvoice
            {
             _ExpImpScript_Droga.ClearAlltDoc;
             _ExpImpScript_Droga.InserttDoc(katsopr.cschfact,31) ;
             if _ExpImpScript_Droga.doc2xml(31,_logFile)
             {
               set ATL_MERCURY_HEAD.ExportedInvoic := true;
               Update current ATL_MERCURY_HEAD;
               MyLog('        -Сформировали INVOICE');
             }
             else
              {
               MyLog('        -ERROR не Сформировали INVOICE');
              }
            }
           }
          if extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_NeedDESMER) = '1'
          or extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_NeedDesadv) = '1'
          or extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_NeedDesscc) = '1'
          {
             if _ExpImpScript_Droga.GetfirstieHeadOnDesadv
              {
               _ExpImpScript_Droga.ClearAlltDoc;
               _ExpImpScript_Droga.InserttDoc(ATL_MERCURY_HEAD.cSopr,201) ;
               if _ExpImpScript_Droga.doc2xml(201, _logFile)
                {
                   if extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_NeedDESMER) = '1' then {set ATL_MERCURY_HEAD.ExportedDESMER := true ; } //boolean "был сформирован DESMER"
                   if extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_NeedDesadv) = '1' then {set ATL_MERCURY_HEAD.ExportedDesadv := true ; } //boolean "был сформирован Desadv"}
                   if extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_NeedDesscc) = '1' then {set ATL_MERCURY_HEAD.ExportedDESSCC := true ; } //boolean "Был сформирован DESSCC"}
                   Update current ATL_MERCURY_HEAD;
                   MyLog('        -Сформировали DESADV');
                }
                else
                {
                   MyLog('        -ERROR не Сформировали DESADV');
                }
              }
          }
       }

     if  extAttr.sGetAttr(coKatOrg, katsopr.corg , coAttr_EDOUTDAUTO) = '1' // сделать отправу диадок автоматом
     and boGetTune('USERTUNE.DIADOC.AUTOSEND') // и стоит настройк по автоматической отсылке
      {
/*
унести бы  в alter interface IDIADOCSEND;

        var _cSigners : comp = coGetTune('Diadoc.DiaAutoSigner');
        SaveMyDSK(_cSigners, 'DiadocSendDocs_cSigners'); //принудительно в DSK впишем подписантов из настройки
        MyLog('DIADOC. MercuryProject. Настройка подписанты по умолчанию = '+_cSigners + ' (' + sGetTune('Diadoc.DiaAutoSigner')+ ')' );
*/
      //  MyLog('Запускаем автоматическую отправку DIADOC');
        SaveMyDsk(_logFile,coATLANTIC_DIADOCAUTO_LOGNAME) ;
        var lMarkerDiaDoc : TPtr = InitMarker('DiadocDocument', 8, 100, 10);
        ClearMarker(lMarkerDiaDoc);
        InsertMarker(lMarkerDiaDoc, KatSopr.nRec);
        MyLog('Запускаем автоматическую отправку DIADOC');
        if oDiadocFuncs.SendDocs(coKatSopr, lMarkerDiaDoc) {}
        MyLog('DIADOC/ DoneMarker(lMarkerDiaDoc');
        DoneMarker(lMarkerDiaDoc, '');
      }

    MyLog('Обработка файла завершена');
    MyLog('***');
  } // _loop tmpMercury_Head where tmpMercury_Head.cSopr <> 0h
}
HandleEvent
  cmInit:
  {
    var _globalErr : boolean;
   _globalErr := false;
   Folder_input := Folder_To := _MaskFileName := '';
    _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'Import_Mercury_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
   deletefile(_logFile);
      clearbuffer(tnATL_MERCURY_LOG1);
        ATL_MERCURY_LOG1.LogDate  := _curDateTime; //"Дата-время запуска задания"
        ATL_MERCURY_LOG1.State    := 0 ;// "0draft,1readyToSend,2send,3NotNeedToSen"
        ATL_MERCURY_LOG1.Email    := sGetTune('USERTUNE.MercuryPRJ.E-MAILS'); //String "E-Mails"
        ATL_MERCURY_LOG1.cEmail   := sGetTune('USERTUNE.MercuryPRJ.copyE-MAILS'); //String "Copy Emails"
      Insert current ATL_MERCURY_LOG1;

   Folder_input   := sgettune('USERTUNE.MercuryPRJ.pathfrom');
   Folder_To      := sgettune('USERTUNE.MercuryPRJ.pathto');
   _MaskFileName  := sgettune('USERTUNE.MercuryPRJ.MaskFileInclude');


   if Folder_input = ''
   {
     _globalErr := true;
     MyLog('ERROR!! не указана настройка "директории с файлами"');
   }
   else
    {
          MyLog('Folder_input         ='+Folder_input);
    }
   if Folder_To = ''
   {
     _globalErr := true;
     MyLog('ERROR!! не указана настройка "директории с отработанными файлами"');
   }
   else
    {
          MyLog('Folder_To            ='+Folder_To   );
    }
  if _MaskFileName = ''
   {
     _globalErr := true;
     MyLog('ERROR!! не указана настройка "Маска файлов для поиска"');
   }
   else
   {
          MyLog('MaskFileName         ='+_MaskFileName);
   }

  if sgettune('USERTUNE.MercuryPRJ.MaskFileExclude') <> ''
    {
     _MaskFileName := _MaskFileName + '|' + sgettune('USERTUNE.MercuryPRJ.MaskFileExclude');
    }
          MyLog('EXCLUDE MaskFileName ='+sgettune('USERTUNE.MercuryPRJ.MaskFileExclude'));
          MyLog('***');
    if _globalErr
     then {
           ImportFileToMemo(ATL_MERCURY_LOG1.Log, _logFile, false);
           ATL_MERCURY_LOG1.State    := 1; // "0draft,1readyToSend,2send,3NotNeedToSen"
           Update current ATL_MERCURY_LOG1;
           stop; abort; exit;
          }

    ClearAll;
    Folder_input := AddSlashToPath(Folder_input);
    Folder_To := AddSlashToPath(Folder_To);
    startnewvisual(vtRotateVisual,vftimer+vfbreak+vfconfirm,'Поиск файлов...',0);
    var File_input : string = '';
    var _foundFileCount : longint = 0;
    if FindFirstFile(Folder_input+'*.*', File_input)
    {
     do{
//        Message('0_0 ' + File_input);
        File_input:=upcase(File_input);
        if(MatchesMask(File_input,_MaskFileName))
         if not IsDirectory(Folder_input+File_input)
         {
          // MyLog('Файл ' + Folder_input+File_input);
           CheckFileFillValues(Folder_input, File_input);
           _foundFileCount++;
//          Message(recordsIntable(tntInsertBaseDoc) + '  ' + tInsertBaseDoc.cFile);
         }
       } while FindNextFile(File_input);
    }
    if _foundFileCount = 0 then
     {
       MyLog('Файлов не найдено');
     }
    RasprPalletesBySpSopr;

     ImportFileToMemo(ATL_MERCURY_LOG1.Log, _logFile, false);
    update current ATL_MERCURY_LOG1;
      ATL_MERCURY_LOG1.State := if(Getfirst fastfirstrow ATL_MERCURY_HEAD where ((ATL_MERCURY_LOG1.nrec == ATL_MERCURY_HEAD.cMercuryLog)) = tsOK,1,3); // // "0draft,1readyToSend,2send,3NotNeedToSen"
    update current ATL_MERCURY_LOG1;

    StopVisual('', 0);
  } // cmOK


End;//HandleEvent
End.//Interface
