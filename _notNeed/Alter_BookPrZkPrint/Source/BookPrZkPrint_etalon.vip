//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 5.0 - 7.12 - логистика
// Печать книги покупок/продаж
//
//********************************************************************************

#include xlReport.Vih
#include pickdescr.vih
#include SchPrint.vih
#include Sell2Buy.vih
#include SchPrint.inc
#include KatOrg.vih
#include MTRFuncs.vih      // Функции целевого учета
#include FeeSigners.Vih
#include SchSrcIspr.vih    // Объект для работы со СФ-исправлениями
#include ExpRepSF_XML.vih
#include ForPrint.vih      // Общие функции для печати (СФ, книг, журнала)
#include SchInfoPlat.vih
#include History.vih
#include FuncsSF.vih

#doc
Печать книги покупок/продаж (с 5-й версии Атлантиса)
#end
Interface BookPrZkPrint

#include sfconst.inc   // Основные константы и функции СФ
#include sopconst.inc  // для идентификации налогового акта
#include vSFInv_Bel.vpp

Type
  TUNP = string[9];

Const
  cwDescrOwn      : Word = 0;
  cwDescrSF       : Word = 1;
  cwDescrDO       : Word = 2;

  prMain       : Word = 33334;
  prPred       : Word = 33335;
  prCorrected  : Word = 33336;
  // Для tmpListVal.Sum's
  cnstDelta_Begin_Sums : Word = 20;
  cnstDelta_Total_Sums : Word =  0;
  strNullDate          : String[8] = '00000000';

  cwBook_Dop : Word = 2; // Признак дополнительной книги
end;

table struct tmpCodeOp_ForBK
(
  Value : String  "Код операции"
)
with index
(
  tmpCodeOp_ForBK01 = Value
);

//------------------------------------------------------------------------------------------------------------
// Функции экспорта в xml
// опережающее описание функции
function Document     (_Node: Comp; _NodeName: String                                              ) : Comp; forward;
function SvPokupProdav(_Node: Comp; _NodeName: String                                              ) : Comp; forward;
function SvUL         (_Node: Comp; _NodeName: String; _NaimOrg: String; _INNUL: TINNUL; _KPP: TKPP; _Org : Comp) : Comp; forward;
function SvIP         (_Node: Comp; _NodeName: String;                   _INNFL: TINNFL            ) : Comp; forward;
function SvKnPokProd  (_Node: Comp; _NodeName: String                                              ) : Comp; forward;
function SvPokProd    (_Node: Comp                                                                 ) : Comp; forward;
function SvDocYplNal  (_Node: Comp; _NodeName: String                                              ) : Comp; forward;
function SvPosredn    (_Node: Comp; _NodeName: String                                              ) : Comp; forward;
function SvedUL       (_Node: Comp; _NodeName: String; _NaimOrg: String; _INNUL: TINNUL; _KPP: TKPP; _Org : Comp) : Comp; forward;
function SvedIP       (_Node: Comp; _NodeName: String;                   _INNFL: TINNFL            ) : Comp; forward;
function Podpisant    (_Node: Comp; _NodeName: String                                              ) : Comp; forward;
function Vsego        (_Node: Comp; _NodeName: String; _wDelta: Word                               ) : Comp; forward;
//------------------------------------------------------------------------------------------------------------

#include bkpr2zk.inc  // Константы книг продаж/покупок
#include bookprzk.gd  // Временные таблицы для печати книг продаж/покупок

#include MTRFuncs.var    // oMTRFun - переменная для работы с объектом целевого учета
#include FeeSigners.var
#include ForPrint.var    // Объект для работы с общими функциями печати
#include History.var
#include FuncsSF.var

Create view //vBookPrZkPrint

var
  // global Variables
  g_Direct
, g_RegDoc
, g_descrOwner
, g_SortedBk
, g_NumParam
                     : Word;

  g_DateFrom
, g_DateTo
, g_DateFrom_Copy
, g_DateTo_Copy
, g_DateFromDop
, g_DateToDop
                     : Date;

  g_cVal
, g_cObject
                     : Comp;

  g_isNDEEqual
, g_isFiltVal
, g_isPrinted
, g_isExcelAllSrc
, g_isFormatExcel
, g_isPrintItog_NA

, g_isFiltOrg
, g_isFiltTypeBK
, g_isFiltOtvPodr
, g_isFiltMediator
, g_isFiltCodeOp

, g_isGroupVal
, g_isGroupType
, g_isGroupOtvPodr
, g_isGroupKatOrg
, g_isGroupObject
, g_isGroupGrDescr

, g_isSortKatOrg

, g_isPrintObject
, g_isPrintNazn
, g_isPrintZero
, g_isPrintDash
, g_isPrintThous
                     : Boolean;

  g_DescrValue
, g_DesGrValue
, g_FeeSigners
                     : String;

  g_KodOpBel
                     : Byte;

  // tunes
  TuneMyOrg_Main, TuneMyOrg_CurrBK     : Comp;
  wTune_UchPolicy, wTune_MajorPayerBel : Word;
  sTune_Attr_GTDPlat, sTune_NameRubl, sTune_NameRublah, sTune_SimvRub,
  sTune_Boss, sTune_MainBuh, sTune_InsNomer, sTune_InsPosition : String;
  doTune_Stav1, doTune_Stav2, doTune_StavExp : Double;
  dTune_DateNewMetodUch: Date;
  boTune_PrintDOpr_ForStornoVozvrAvans : Boolean;

  // objects
  dataProvider       : ISchPrintProvider;
  iBkSell2Buy        : BookSell2Buy;
  iKO                : KatOrg;

  // markers
  mrkGetSomeKatOrg
, mrkGetSomeKatPodr
, mrkGetSomeUsersDoc
, mrkUserFilter
, mrkDescrFilter
, mrkGetSomeMediator
, mrkCodeOp
, mrkTemp            : TPtr;

  defIndexNo         : LongInt;

  bIsDopBook       : Boolean; // Признак дополнительной книги
  bIsOnlyCorrectBK : Boolean; // Расчет только корректирующих записей и связанных с ними корректируемых записей (доп.книга)
  bIsBetweenPeriod : Boolean; // Признак расчета сумм в промежуточном периоде (между основной и дополнительной книгой)
  bBkZk_ForRussia  : Boolean; // Общий признак книг покупок для России
  bMainBkZk_WithCorrecting : Boolean; // Печать основной книги покупок с корректирующими записями
  bIsNewBook       : Boolean; // Признак книг с 01.01.2012
  bIsReport2015Bel : Boolean; // Признак книг RB 2015
  strTipUsersName, strPodrName, strObjectName, strDesGr, strKatOrgName : String;

  iDescr         : iPickDescr;

  wCodeCountry  : Word;

  sClassCountry
, sAttrGTD      : String;

  pGTDCountry
, pGTDNomer     : String;

  sClassGruzo   : String;
  wCodeGruzo    : Word;

  wPrnKPP,
  wPrnKPPWithoutGruzo : Word;

  bPrnGruzoFromMarPunkt : Boolean;
  sAttrKPPGruzo         : String;
  cRecMemo              : Comp;
  wTypeMemo             : Word;
  sSigner, sSignerDover, sSignerPr : String;

  iSrcIspr      : SchSrcIspr;

// Переменные, используемые во всех отчетах
  gen_OrgName
, gen_UNN
, gen_KPP
, gen_NumSF
, gen_NumIsprSF
, gen_NumKSF
, gen_NumKIsprSF
, gen_CountryGTD
, gen_NumGTD      : String;
  gen_DateFact
, gen_DatePost
, gen_DateIsprSF
, gen_DateKSF
, gen_DateKIsprSF
, gen_DateOpl
, gen_DOplRes     : Date;

  gen_IsNDS20
, gen_IsCorrV
, gen_IsGTD
, gen_NoSF
, gen_IsOtgr      : Boolean;

  gen_NRecSF
, gen_NRecIsprSF
, gen_NRecKSF
, gen_NRecKIsprSF
, gen_NRecKatOrg
, gen_NRecKatOrg_BK : Comp;

// Переменные для формирования отчета в XML
  sXMLOutDir
, sXMLFileName
, sXMLTitle      : String;
  refDoc
, refBookPurchasesReportPayers_v1_t001 : Comp;
  oExpRepSF      : iExpRepSF_XML;
  wTypeRepXML    : Word;

  // Переменные для формирования Excel отчетов
  sXLTFileName
, sXLSFileName
, Id
, DatNomSF
, DatNomKS
, NomDO
, strnum1
, strnum2
, strNum2_Copy
, strNumRKO1
, strNumRKO2
, XLHeader
, XLHeader1
, filt
, SrcCountry
, strAkt      : String;
  dAkt        : Date;

  pXL         : XLSRepBuilder;  // Объект формирования Excel-отчетов

  pxlrepsetup : xlrepsetup;

  IsBelZakon2007 : Boolean;

  toc        // Формат печати - текст, Excel, XML
, VidReport  //Вид отчета
// 0  - Книга продаж/покупок  РБ
// 1  - Книга продаж/покупок  с номерами ДО РБ
// 2  - Книга покупок (с 01.04.2004) РБ
// 3  - Книга покупок (с 05.02.2007) РБ
// 4  - Книга покупок (с 05.02.2007) РБ (в тыс. руб.)
// 5  - Книга покупок (с 01.10.2007) РБ
// 6  - Книга покупок (с 01.10.2007) РБ (в тыс. руб.)
// 7  - Книга продаж/покупок со ставкой 18% (c 01.01.2010) РБ
// 8  - Книга покупок с расчетными ставками (с 01.01.2010) РБ
// 9  - Книга покупок (с 01.01.2011) РБ
// 10 - Книга покупок (с 01.01.2011) РБ (в тыс.руб.)
// 11 - Книга покупок (с 01.01.2015) РБ
// 12 - Книга покупок (с 01.01.2015) со ставкой 25%
// 13 - Книга покупок (с 01.07.2016)

// 18 - Книга продаж/покупок сводная РБ
//
// 29 - Книга продаж/покупок    РФ
// 30 - Книга продаж/покупок с номерами ДО  РФ
// 31 - Книга продаж/покупок (с 01.01.2004)  РФ
// 32 - Книга продаж/покупок  (с 01.08.2005) РФ
// 33 - Книга покупок (с 11.05.2006) РФ
// 34 - Книга продаж/покупок (с 01.01.2012) РФДанных
// 35 - Книга продаж/покупок (с 14.08.2014) РФ
// 36 - Книга продаж/покупок (с 01.10.2017) РФ
// 45 - Книга продаж/покупок (с 01.10.2019) РФ

// 37 - Книга продаж/покупок сводная
// 38 - Книга продаж/покупок сводная(с 01.01.2004) РФ
// 39 - Книга продаж/покупок сводная (с 01.08.2005) РФ
// 40 - Книга покупок сводная (с 11.05.2006) РФ
// 41 - Книга продаж/покупок сводная (с 01.01.2012) РФ
// 42 - Книга продаж/покупок сводная (с 14.08.2014) РФ
// 44 - Книга продаж/покупок сводная (с 01.10.2017) РФ

// 51 - Доп. лист книги продаж/покупок РФ
// 52 - Доп. лист книги продаж/покупок РФ (c 01.01.2012)
// 53 - Доп. лист книги продаж/покупок РФ (c 14.08.2014)
// 54 - Доп. лист книги продаж/покупок РФ (c 01.10.2017)
// 55 - Доп. лист книги продаж/покупок РФ (c 01.01.2019)

, KolFiltr
, wKoefThous    : Word;

  DatFact
, DatPost     : Date;

  NoData
, zeroPrint
, isNDS20XL   : Boolean;

  ISRusNds20
, ISRusNds10
, ItogNds24
, ItogNds25
, ItogOsnNds
, ItogOsnNds_18
, ItogDopNDS
, ItogNds10   : Double;

  g_cParty    : Comp;

  ind
, npp         : longint;
  mrkKatParty : TPtr;

  dDopL       : Date;

  cBookPrZk_Original, cSchFact_Original  : Comp;
  _BK_GTD    : Comp;
  _SF_ForBar : Comp;  // Для вывода штрих-кодов
  _SF_Dop, _KO_Mediator, _KO_Mediator_Head : Comp;
  bZak2014, bIsNPP_ForSell, bIsPrintNumPP_FromOne,
  bIsPrint_Corrected    : Boolean;   // Печатаю корректирующую или обычную записи

  cNPrintNoteBook : LongInt;

  iInfoPl : SchInfoPlat;

  cStepDoc_BaseFin,
  _ElectrSF           : Comp;
  chSeparator_GTD     : Char;

as select
  // дескриптор записи
  if (g_descrOwner = cwDescrDO,
    if (isValid(tnBaseDoc), BaseDoc.Descr, ''),
    if (g_descrOwner = cwDescrSF,
      if (isValid(tnSchFact1), SchFact1.Descr,
        if (isValid(tnSchFact2), SchFact2.Descr, '')),
      BookPrZk.Descr))
         (FieldName = f_descrBook),

  // группа дескрипторов записи
  if (g_descrOwner = cwDescrDO,
    if (isValid(tnBaseDoc), BaseDoc.DesGr, ''),
    if (g_descrOwner = cwDescrSF,
      if (isValid(tnSchFact1), SchFact1.DesGr,
        if (isValid(tnSchFact2), SchFact2.DesGr, '')),
      BookPrZk.DesGr))
         (FieldName = f_desgrBook),

  (BookPrZk.TipUser = cwTypeBK_Sell_CorrV_Minus) or (BookPrZk.TipUser = cwTypeBK_Buy_CorrV_Minus) or
  (BookPrZk.TipUser = cwTypeBK_Sell_CorrV_Minus_NDS_NA) or
  (BookPrZk.TipUser = cwTypeBK_Buy_NalogSub) or (BookPrZk.TipUser = cwTypeBK_Buy_OtgrRegistr_Mediator)
         (FieldName = IsDifferentOrg_Some),

  ((VidReport > 37) or (VidReport = 34) or (VidReport = 35) or (VidReport = 36) or (VidReport = 45) or (VidReport = 33) or (VidReport = 32) or (VidReport = 31) or (VidReport = 7))
         (FieldName = IsLastExcelForms),

  if (IsValid(tnKatOrg), KatOrg.NRec, 0)  // могут быть записи регистрации без контрагента
         (FieldName = Valid_KatOrg_NRec),

  // Печать оплаты = по вн.атрибуту "Номер и дата оплаты НДС",по плат.кодам, для кода 23 - из графы 3
  ((g_Direct = cwDirect_Buy) and (tmpBook.sKodOp = '23') and (wGetTune('Nalog.Rus.PrintSF.PrintOplata') = 3))
         (FieldName = bIsPrintOpl_23),

  (not Is_CorrV_BK(BookPrZk.TipUser)) and
  ((g_Direct = cwDirect_Buy) or
   ((g_Direct = cwDirect_Sell) and
    (Trim(sGetAttr(coKatOrg, TuneMyOrg_CurrBK, csAttr_SpecEcZone)) <> '')))
         (FieldName = NeedGTD_From2017),

  if (dDopL != ZeroDate, dDopL, Cur_Date)
         (FieldName = dDopList_InReport),

  if (gen_DateFact <> ZeroDate, gen_DateFact, Cur_Date)
         (FieldName = gen_DateFact_ForHistory),

  if (TuneCountry <> ccRus, False,
    if (IsValid(tnSchFact1),   ((SchFact1.dFact < cdNDS20) or ((SchFact1.Flags and clUD_OldStav) > 0)),
      if (IsValid(tnSchFact2), ((SchFact2.dFact < cdNDS20) or ((SchFact2.Flags and clUD_OldStav) > 0)),
       (BookPrZk.dReg < cdNDS20))))
         (FieldName = IsOldStav),

  if (IsOldStav, cwStavkaOld, doGetTune('Nalog.Stav1'))
         (FieldName = doTune_Stav1_calc),

  *

from
  BookPrZk
, BookPrZk BkNum
, SchFact SchFact1
, SchFact SchFact2
, KatOrg
, KatOrg FiltKatOrg
, KatSopr GTD
, KatSopr NalAkt
, KatSopr GTD_Svodn
, KatSopr GTD_Nakl
, SpSopr SpSopr_Svodn
, BaseDoc
, UsersDoc
, UsersDoc FiltUsersDoc
, KlVal
, SpSchf
, KatStroy KatStroy2
, FpCO
, FpCO FiltFpCO
, BookPrZk BookPrZkCorrected
, SchFact SchFact2_Corrected
, tmpListVal
, tmpBook
, tmpBook tmpBook_Corrected
, tmpBook tmpBook_Spec
, BookPrZk BookPrZk_CorrNew
, SchFact SchFact2_CorrNew
, KatState
, KatState KatStateGTD
, KatOrg   KatOrg_TNVED
, KatState KatState_TNVED
, KatMC    KatMC_TNVED
// Excel - для авансовых отчетов и РКО
, SoprHoz
, PlPor PlPor_AO
, PlPor PlPor_RKO
, PlPor PlPor_SFNalAkt
, DocPodot DocPodot_RKO
, RashDoc
// Excel - для вывода страны происхождения товара и номера ГТД
, SpSopr
, KatParty
, KatSopr KatSopr_OtgrSF
, SpSopr SpSopr_OtgrSF
, SpSchf SpSchF_OtgrSF
, LastNumD
, SpSchF SpSchF_Obj (SpSchF01)
//для вывода даты оплаты
, SchFact SchFact_Opl
, KatSopr KatSopr_Opl
, SpSopr SpSopr_Opl
, SpSopHoz SpSopHoz_Opl
, BaseFin BaseFin_Opl
, BaseFin BaseFin_OtgrGTD
, tmpGTDN
, tmpGTDC
, tmpTNVED
, TTNDoc
, MarPunkt
, SoprHoz SoprHoz_NA
, AllMemo
, tmpListSF
, KatSopr KatSoprCorrV
, KatSopr KatSoprCorrV_Src
, SchFact SchFactCorrV_Src
, SchFact SchFact_Ispr
, BookPrZk BookPrZk_Original
, SchFact SchFact_Original
, SchFact SchFact_Bar
, SoprHoz SoprHoz_Bar
, SpSopr SpSoprCorrV_Sv (SpSopr02)
, SpSopr SpSoprCorrV_Src_Sv
, KatSopr KatSoprCorrV_Src_Sv
, SchFact SchFactCorrV_Src_Sv
, BookPrZk BookPrZk_GTD
, BookPrZk BookPrZk_ForNext
, SchFact SchFact_ForNext
, BookPrZk BookPrZk_Sosedi
, BookPrZk BookPrZk_Sosedi_ForNext
, KatOrg KatOrg_Med
, KatOrg KatOrg_Med_Head
, KlVal KlVal_BK
, tmpInfoPlat
, tmpGTD_ForPrint
, tmpListKodOp
, tmpCodeOp_ForBK
, tmpListCodeOp
, tmpListPodr
, KatNazna
, KatOrg FiltMediator
, StatusEDO
, SchFact SchFactEl
, KatOrg KatOrgEl
, KatSopr KatSoprVozvr_Src
, SchFact SchFactVozvr_Src
, AttrNam AttrNam_GTD
, AttrVal AttrVal_GTD
, SpStep

where
((
    BookPrZk.cSchFact  == SchFact1.NRec         // отгрузочный
and BookPrZk.cSchFactS == SchFact2.NRec         // платежный
and BookPrZk.TipUser   == UsersDoc.TipUsers
and BookPrZk.cBaseDoc  == BaseDoc.NRec
and BookPrZk.cOrg      == KatOrg.NRec
and KatOrg.cState      == KatState.NRec
and BookPrZk.cSopr     == GTD.NRec
and GTD.cKatSopr       == SpSopr.cSopr    // единичный налоговый акт
and GTD.cADoc          == GTD_Svodn.cADoc // сводный налоговый акт
and cgCustomAkt        == GTD_Svodn.wADoc
and GTD_Svodn.NRec     == SpSopr_Svodn.cSopr
and _BK_GTD            == BookPrZk_GTD.NRec   // корректирующие записи по регистрации ГТД

and NalAkt.cKatSopr    == GTD_Nakl.NRec

// для вывода информации по платежам
and Word(0)                == BaseFin_OtgrGTD.TiDkBase // признак по ДО
and cStepDoc_BaseFin       == BaseFin_OtgrGTD.cStepDoc
and BaseFin_OtgrGTD.cPlPor == PlPor_SFNalAkt.NRec

and BookPrZk.cOtvPodr  == FpCO.NRec
and BookPrZk.cObject   == KatStroy2.NRec
and BookPrZkCorrected.cSchFactS == SchFact2_Corrected.NRec

and BookPrZk.cSchFactR          == BookPrZk_CorrNew.NRec
and BookPrZk_CorrNew.cSchFactS  == SchFact2_CorrNew.NRec

and BookPrZk.NRec               == BookPrZk_ForNext.cSchFactR
and BookPrZk_ForNext.cSchFact   == SchFact_ForNext.NRec
and SchFact1.NRec               == BookPrZk_Sosedi.cSchFact
and BookPrZk_Sosedi.NRec        == BookPrZk_Sosedi_ForNext.cSchFactR

and SchFact1.NRec         == SpSchF_OtgrSF.cSchFact
and SchFact1.NRec         == KatSopr_OtgrSF.cSchFact
and g_cParty              == KatParty.NRec
and SpSchF_OtgrSF.NRec    == SpSopr_OtgrSF.cSpSchf
and KatSopr_OtgrSF.cNazna == KatNazna.NRec

and coKatSopr             == TTNDoc.wTable
and KatSopr_OtgrSF.Nrec   == TTNDoc.cDoc

// Excel - для вывода страны происхождения товара и номера ГТД
and SchFact2.cSoprHoz     == SoprHoz.NRec
and SoprHoz.cSoprDoc      == PlPor_RKO.NRec
and (SoprHoz.TipDoc = PlPor_RKO.TiDk)
and cgDoc_0009            == DocPodot_RKO.TipDoc
and PlPor_RKO.NRec        == DocPodot_RKO.cVtDoc
and DocPodot_RKO.cPrDoc   == PlPor_AO.NRec
and cgDoc_0009            == RashDoc.TipDoc
and PlPor_AO.NRec         == RashDoc.cSoprDoc

// для вывода даты оплаты
and BookPrZk.cSchFact     == SchFact_Opl.NRec
and SchFact_Opl.NRec      == KatSopr_Opl.cSchFact
and KatSopr_Opl.NRec      == SpSopr_Opl.cSopr
and SpSopr_Opl.NRec       == SpSopHoz_Opl.cSpSopr
and SpSopHoz_Opl.cSoprHoz == BaseFin_Opl.cSoprHoz

// для вывода страны и номера ГТД из мемо-полей
and coBookPrZk == AllMemo.wTable
and cRecMemo   == AllMemo.cRec
and wTypeMemo  == AllMemo.Tip

and cBookPrZk_Original    == BookPrZk_Original.NRec
and cSchFact_Original     == SchFact_Original.NRec

// Корректировочные СФ, отдельный набор таблиц
and SchFact_Original.NRec     == KatSoprCorrV.cSchFact
and KatSoprCorrV.cADoc        == KatSoprCorrV_Src.NRec
and KatSoprCorrV_Src.cSchFact == SchFactCorrV_Src.NRec

// Для KatSoprCorrV.cADoc = 0, сводных корректировочных сопрдоков
and KatSoprCorrV.NRec            == SpSoprCorrV_Sv.cSopr
and SpSoprCorrV_Sv.cADocSp       == SpSoprCorrV_Src_Sv.NRec
and SpSoprCorrV_Src_Sv.cSopr     == KatSoprCorrV_Src_Sv.NRec
and KatSoprCorrV_Src_Sv.cSchFact == SchFactCorrV_Src_Sv.NRec
// Для штрих-кодов
and _SF_ForBar                == SchFact_Bar.NRec
and SchFact_Bar.cSoprHoz      == SoprHoz_Bar.NRec

// Дополнительные поля, связанные с РФ-законодательством 2014г.
and _KO_Mediator      == KatOrg_Med.NRec
and _KO_Mediator_Head == KatOrg_Med_Head.NRec
and BookPrZk.cVal == KlVal_BK.NRec

// Электронные СФ, Беларусь
and _ElectrSF           == SchFactEl.NRec
and SchFactEl.cRecs[10] == KatOrgEl.NRec

and BookPrZk_Original.cSopr   == KatSoprVozvr_Src.NRec
and KatSoprVozvr_Src.cSchFact == SchFactVozvr_Src.nRec

and coSchFact                 == AttrNam_GTD.wTable
and sAttrGTD                  == AttrNam_GTD.Name
and coSchFact                 == AttrVal_GTD.wTable
and Schfact1.NRec             == AttrVal_GTD.cRec
and AttrNam_GTD.NRec          == AttrVal_GTD.cAttrNam
))

// основная подцепка по книге
Bounds byMainBookPrZk =
    g_Direct     == BookPrZk.Direct
and g_RegDoc     == BookPrZk.RegDoc

// по дескриптору - top level bound
Bounds byDescrBookPrZk =
    g_DescrValue == BookPrZk.Descr
and g_Direct     == BookPrZk.Direct
and g_RegDoc     == BookPrZk.RegDoc

// по группе дескрипторов - top level bound
Bounds byDesGrBookPrZk =
    g_DesGrValue == BookPrZk.DesGr
and g_Direct     == BookPrZk.Direct
and g_RegDoc     == BookPrZk.RegDoc

// по валюте
Bounds byValBookPrZk =
    g_cVal       == BookPrZk.cVal (NoIndex)

// по диапазону дат
Bounds byDateBookPrZk =
    g_DateFrom  <<= BookPrZk.dReg (NoIndex)
and g_DateTo    >>= BookPrZk.dReg (NoIndex)

// ограничение по объекту строительства
Condition byObject =
    g_cObject   = BookPrZk.cObject

// ограничение по дескриптору
Condition byDescrBookPrZk =
    f_descrBook = g_DescrValue

// ограничение по группе дескрипторов
Condition byDesGrBookPrZk =
    f_desgrBook = g_DesGrValue
;

const
  cnstNotFind = 'не определен';

  cwTypeRep_Buy     : Word = 2;
  cwTypeRep_Sell    : Word = 3;
  cwTypeRep_BuyDop  : Word = 5;
  cwTypeRep_SellDop : Word = 6;

  iGr  : Byte = 10;
  iSum : Byte = 21;
end;

var
  arrSum : array[1..iSum] of Double;
  asGTD : array [1..100] of String;  // "Номер ГТД"
  arrGr : array[1..iGr] of Double;
  arrCO : array[1..iGr] of Double;

File FileMemo;
File FileXML;

// форма отчета
form frmBkPrZkF('BkPrZkF.out', 'BkPrZkF') with NoVisual;
form frmProt   ('BkPrZkE.out', 'errr') with NoVisual; // Для протокола

#include L_SF_Commons.vpp       // Общие функции и процедуры для всей компоненты L_SF
#include Common_SF_BK_Print.vpp // Общие функции для книг покупок/продаж, СФ и печати

/**
 * конструктор по умолчанию - не использовать!
 */
Constructor Init;
{
  Result := False;
}

/**
 * основной конструктор
 * @param wDirect направление (1-сбыт/2-снабжение)
 * @param provider интерфейс-поставщик данных для отчета
 */
Constructor InitDirect(wDirect : Word; provider : ISchPrintProvider);
{
  if (provider = NullRef)
  {
    Result := False;
    Exit;
  }

  dataProvider := provider;

  // global Variables
  g_isPrinted  := False;
  g_Direct     := wDirect;
  g_cVal       := 0;
  g_cObject    := 0;
  g_DescrValue := '';
  g_DesGrValue := '';

  TuneCountry           := wGetTune('Country');
  TuneMyOrg_Main        := coGetTune('MyOrg');  // Текущая собственная организация
  TuneMyOrg_CurrBK      := TuneMyOrg_Main;      // Собственная организация филиала записи

  sClassGruzo           := sGetTune('Nalog.Rus.PrintSF.Class_Gruzo');
  wCodeGruzo            := GetClassCode(coKatOrg, sClassGruzo);
  sTune_Attr_GTDPlat    := sGetTune('Nalog.Bel.Attr_GTDPlat');

  sTune_NameRubl        := sGetTune('NDE.NameRubl');
  sTune_NameRublah      := sGetTune('NDE.NameRublah');
  sTune_SimvRub         := sGetTune('NDE.SimvRub');
  wTune_UchPolicy       := wGetTune('Nalog.UchPolicy');
  dTune_DateNewMetodUch := dGetTune('Nalog.Bel.DateNewMetodUch');

  doTune_Stav1          := doGetTune('Nalog.Stav1');
  doTune_Stav2          := doGetTune('Nalog.Stav2');
  doTune_StavExp        := doGetTune('Nalog.ExportNDS');

  sTune_Boss            := sGetTune('Boss');
  sTune_MainBuh         := sGetTune('MainBuh');
  sTune_InsNomer        := sGetTune('InsNomer');
  sTune_InsPosition     := sGetTune('InsPosition');

  wTune_MajorPayerBel   := wGetTune('MajorPayerBel');

  wPrnKPP               := wGetTune('Nalog.Rus.PrintSF.PrnKPP');
  wPrnKPPWithoutGruzo   := wGetTune('Nalog.Rus.PrintSF.PrnKPPWithoutGruzo');

  bPrnGruzoFromMarPunkt := boGetTune('Nalog.Rus.PrintSF.PrnGruzoFromMarPunkt');
  sAttrKPPGruzo         := sGetTune('Nalog.Rus.PrintSF.Attr_KPPGruzo');

  boTune_PrintDOpr_ForStornoVozvrAvans := boGetTune('Nalog.Rus.PrintDOpr_ForAvInMomOtgr');

  mrkTemp   := InitMarker('', 8, 10, 10);

  Result := True;
}

Destructor done;
{
  DoneMarker(mrkTemp,   '');
}

/**
 * инициализация глобальных параметров печати книги
 */
procedure InitGlobalParams;
{
  // global Parameters
  g_isNDEEqual       := dataProvider.Parameter(#PARAM_NDE_EQUAL);
  g_isPrintItog_NA   := dataProvider.Parameter(#PARAM_PRINTITOG_NA);
  g_isFiltVal        := dataProvider.Parameter(#FILTER_VAL);
  g_isExcelAllSrc    := (dataProvider.Parameter(#PRINT_EXCELALLSRC) and (toc = cw_Excel));
  g_isFormatExcel    := (dataProvider.Parameter(#PRINT_FORMATEXCEL) and (toc = cw_Excel));
  g_isPrintDash      := (dataProvider.Parameter(#PARAM_PRINT_DASH));
  g_descrOwner       := dataProvider.getWordFieldValue(#FIELD_DESCROWNER);
  g_RegDoc           := dataProvider.getWordFieldValue(#FIELD_REGDOC);
  g_DateFrom         := dataProvider.getDateFieldValue(#FIELD_DATEFROM);
  g_DateTo           := dataProvider.getDateFieldValue(#FIELD_DATETO);
  g_DateFromDop      := dataProvider.getDateFieldValue(#FIELD_DATEFROMDOP);
  g_DateToDop        := dataProvider.getDateFieldValue(#FIELD_DATETODOP);
  g_FeeSigners       := dataProvider.getStringFieldValue(#FIELD_FEESIGNER);
  mrkGetSomeKatOrg   := dataProvider.getRefFieldValue(#MARKER_KATORG);
  mrkGetSomeKatPodr  := dataProvider.getRefFieldValue(#MARKER_KATPODR);
  mrkGetSomeUsersDoc := dataProvider.getRefFieldValue(#MARKER_USERSDOC);
  mrkUserFilter      := dataProvider.getRefFieldValue(#MARKER_USERFILTER);

  g_isFiltOrg        := dataProvider.Parameter(#FILTER_ORG);
  g_isFiltTypeBK     := dataProvider.Parameter(#FILTER_TYPE);
  g_isFiltOtvPodr    := dataProvider.Parameter(#FILTER_CENTER);
  g_isFiltMediator   := dataProvider.Parameter(#FILTER_MEDIATOR);
  g_isFiltCodeOp     := dataProvider.Parameter(#FILTER_CODEOP);

  g_isPrintObject    := dataProvider.Parameter(#PRINT_OBJECT);
  g_isPrintNazn      := dataProvider.Parameter(#PARAM_PRINT_NAZN);
  g_isPrintZero      := dataProvider.Parameter(#PARAM_PRINT_ZERO);
  g_isPrintThous     := dataProvider.Parameter(#PARAM_PRINT_THOUS);

  g_isGroupVal       := dataProvider.Parameter(#GROUP_VAL);
  g_isGroupType      := dataProvider.Parameter(#GROUP_TYPE);
  g_isGroupOtvPodr   := dataProvider.Parameter(#GROUP_CENTER);
  g_isGroupKatOrg    := dataProvider.Parameter(#GROUP_KATORG);
  g_isGroupObject    := dataProvider.Parameter(#GROUP_OBJECT);
  g_isGroupGrDescr   := dataProvider.Parameter(#GROUP_GRDESCR);

  g_isSortKatOrg     := dataProvider.Parameter(#PARAM_SORT_ORG);
  g_NumParam         := dataProvider.getWordFieldValue(#FIELD_NUM_PARAM);
  g_SortedBK         := dataProvider.getWordFieldValue(#FIELD_SORTEDBK);


  if (TuneCountry <> ccBel)
  {
    mrkDescrFilter     := dataProvider.getRefFieldValue(#MARKER_DESCRFILTER);
    mrkGetSomeMediator := dataProvider.getRefFieldValue(#MARKER_MEDIATOR);

    // Маркер для кодов операций и перенос их во временную таблицу, т.к. список кодов хранится во временной
    mrkCodeOp := dataProvider.getRefFieldValue(#MARKER_CODEOP);

    var i    : LongInt;
    var _Rec : Comp;
    mtClear(tntmpCodeOp_ForBK, mfNormal);

    for (i := 0; i < GetMarkerCount(mrkCodeOp); i++)
    {
      if (GetMarker(mrkCodeOp, i, _Rec))
        if (GetFirst tmpListCodeOp where ((_Rec == tmpListCodeOp.NRec)) = tsOK)
          Insert tmpCodeOp_ForBK Set tmpCodeOp_ForBK.Value := tmpListCodeOp.Value;
    }
  }

  sXMLOutDir := dataProvider.getStringFieldValue(#FIELD_OUTDIRXML);
}

// sValue разбивает на номер и дату. Если не получается, то возвращает sValue в _Num
procedure ParseAttr_NumDate(aValue : String; var resNum : String; var resDate : Date);
var
  aKol : Byte;
  Str  : String;
{
  resNum  := aValue;
  resDate := ZeroDate;

  // Выделяю дату, 10 или 8 символов, разделитель '/' или '.'
  aKol := 10;
  Str := SubStr(aValue, Length(aValue) - aKol + 1, aKol);

  if (StrToDate(Str, 'DD.MM.YYYY') <> ZeroDate)
  {
    resDate := StrToDate(Str, 'DD.MM.YYYY');
    resNum  := Trim(SubStr(aValue, 1, Length(aValue) - aKol));
  }
  else if (StrToDate(Str, 'DD/MM/YYYY') <> ZeroDate)
  {
    resDate := StrToDate(Str, 'DD/MM/YYYY');
    resNum  := Trim(SubStr(aValue, 1, Length(aValue) - aKol));
  }
  else
  {
    aKol := 8;
    Str := SubStr(aValue, Length(aValue) - aKol + 1, aKol);

    if (StrToDate(Str, 'DD.MM.YY') <> ZeroDate)
    {
      resDate := StrToDate(Str, 'DD.MM.YY');
      resNum  := Trim(SubStr(aValue, 1, Length(aValue) - aKol));
    }
    else if (StrToDate(Str, 'DD/MM/YY') <> ZeroDate)
    {
      resDate := StrToDate(Str, 'DD/MM/YY');
      resNum  := Trim(SubStr(aValue, 1, Length(aValue) - aKol));
    }
  }
}

function IsGetPosSFCorrV_Src : Boolean;
var
  cSFRec: Comp;
{
  Result := IsValid(tnSchFactCorrV_Src);

  if (not Result)
    if (SchFact_Original.ls[4] = 1)
      if (ExtAttr_ValueExists(coSchFact, SchFact_Original.NRec, csAttrImportSrcSF))
      {
        cSFRec := coGetAttr(coSchFact, SchFact_Original.NRec, csAttrImportSrcSF);
        Result := (GetFirst SchFactCorrV_Src where (( cSFRec == SchFactCorrV_Src.NRec )) = tsOk);
      }
}

// Номера и даты СФ, исправления и корректировки
procedure SetDateNumSF;
var
  bIsIspr, bIsCorrV, bIsNotReg : Boolean;
  _KS_GTD, aBK_Src : Comp;
  iWhile           : Integer;
{
  gen_NumSF       := '';
  gen_DateFact    := ZeroDate;
  gen_DatePost    := ZeroDate;
  gen_NRecSF      := 0;

  gen_NumIsprSF   := '';
  gen_DateIsprSF  := ZeroDate;
  gen_NRecIsprSF  := 0;

  gen_NumKSF      := '';
  gen_DateKSF     := ZeroDate;
  gen_NRecKSF     := 0;

  gen_NumKIsprSF  := '';
  gen_DateKIsprSF := ZeroDate;
  gen_NRecKIsprSF := 0;

  gen_IsCorrV     := False;
  gen_IsGTD       := False;
  gen_NoSF        := False;
  gen_IsOtgr      := False;

  // Запись регистрации ГТД или корректирующая регистрацию ГТД
  _KS_GTD := 0;

  if (BookPrZk.Subtip = cwTotal_TypeBK_RegGTD)
  {
    gen_IsGTD := True;
    _KS_GTD := BookPrZk.cSopr;
  }
  else
    if (BookPrZk.Subtip = cwTotal_TypeBK_Correcting)
    {
      Set _BK_GTD := BookPrZk.cSchFactR;
      aBK_Src     := BookPrZk.NRec;
      iWhile      := 0; // Счетчик для while. Редкая, но возможная ситуация, когда корректирующие составляют замкнутую цепочку.

      while (IsValid(tnBookPrZk_GTD))
      {
        if (BookPrZk_GTD.Subtip = cwTotal_TypeBK_RegGTD)
        {
          gen_IsGTD := True;
          _KS_GTD   := BookPrZk_GTD.cSopr;
          Break;
        }

        // Дополнительные проверки, чтобы не было зацикливания.
        if ((++iWhile > 50) or (BookPrZk_GTD.NRec = aBK_Src) or (_BK_GTD = 0))
          Break;

        Set _BK_GTD := BookPrZk_GTD.cSchFactR;
      }
    }

  if (gen_IsGTD)
  {
    gen_NumSF  := BookPrZk.Num;
    gen_NRecSF := oForPrint.Get_NRecSFForBK(BookPrZk.NRec);

    if (GetFirst GTD where((_KS_GTD == GTD.NRec)) = tsOK)
      gen_DateFact := gen_DatePost := GTD.dSopr;
  }
  else
  {
    if (IsBK_NoSF(BookPrZk.SubTip, BookPrZk.TipUser))
    {
      // Запись регистрации без СФ
      gen_NoSF     := True;
      gen_NumSF    := BookPrZk.Num;
      gen_DateFact := BookPrZk.dReg;
      gen_DatePost := BookPrZk.dReg;
      gen_NRecSF   := oForPrint.Get_NRecSFForBK(BookPrZk.NRec);
    }
    else
    {
      if (BookPrZk.Subtip = cwTotal_TypeBK_Correcting)
      {
        // Корректирующие записи (могут корректировать как отгрузку, так и платеж)
        if (IsValid(tnSchFact1))
          if (SchFact1.Num = Trim(BookPrZk.Num))
            gen_IsOtgr := True;
      }
      else
        if ((BookPrZk.Subtip and cwTotal_TypeBK_RegAvans) = 0 and
            not (BookPrZk.SubTip = cwTotal_TypeBK_StornoVozvratMC and BookPrZk.Direct = cwDirect_Buy))
          gen_IsOtgr := True;

      if (bIsNewBook)
      {
        bIsNotReg := (BookPrZk.subTip = cwTotal_TypeBK_NotReg);

        // по СФ исправлению и корректировочному СФ могут быть корректирующие записи, определяем исправление и корректировку по типу СФ
        bIsIspr  := if (gen_IsOtgr, Is_IsprSF(SchFact1.TipUser, SchFact1.Flags), if (BookPrZk.cSchFactS <> 0, Is_IsprSF(SchFact2.TipUser, SchFact2.Flags), False));
        bIsCorrV := if (gen_IsOtgr, Is_CorrV_SF(SchFact1.TipUser), if (BookPrZk.cSchFactS <> 0, Is_CorrV_SF(SchFact2.TipUser), False));
        gen_IsCorrV := bIsCorrV;

        cBookPrZk_Original := BookPrZk.NRec;
        cSchFact_Original  := if (gen_IsOtgr or bIsNotReg, BookPrZk.cSchFact, BookPrZk.cSchFactS);

        if (bIsIspr)
        {
          if (BookPrZk.cRecs[2] = 0) // ищем СФ
          {
            cBookPrZk_Original := 0;
            cSchFact_Original  := iSrcIspr.GetSFSrc(if (gen_IsOtgr, BookPrZk.cSchFact, BookPrZk.cSchFactS));
          }
          else               // ищем запись
          {
            cBookPrZk_Original := iSrcIspr.GetBKSrc(BookPrZk.NRec);

            if (GetFirst BookPrZk_Original = tsOk)
              cSchFact_Original := if (gen_IsOtgr, BookPrZk_Original.cSchFact, BookPrZk_Original.cSchFactS);
          }
        }

        ReReadRecord(#BookPrZk_Original);
        ReReadRecord(#SchFact_Original);

        // Корректировочный СФ
        if (bIsCorrV)
        {
          if (IsGetPosSFCorrV_Src)
          {
            // Исходный СФ - исправление
            if (Is_IsprSF(SchFactCorrV_Src.TipUser, SchFactCorrV_Src.Flags))
            {
              var cSF_Ispr : Comp;
              cSF_Ispr := iSrcIspr.GetSFSrc(SchFactCorrV_Src.NRec);//GetOriginalSF(SchFactCorrV_Src.NRec);
              if (GetFirst SchFact_Ispr where ((cSF_Ispr == SchFact_Ispr.Nrec)) = tsOk)
              {
                gen_NumSF    := SchFact_Ispr.Num;
                gen_DateFact := SchFact_Ispr.dFact;
                gen_DatePost := SchFact_Ispr.dPost;
                gen_NRecSF   := SchFact_Ispr.NRec;
              }

              gen_DateIsprSF := SchFactCorrV_Src.dFact;
              gen_NumIsprSF  := iSrcIspr.GetNumIspr(SchFactCorrV_Src.Num);
              gen_NRecIsprSF := SchFactCorrV_Src.NRec;
            }
            else
            {
              // Исходный СФ стандартный
              gen_NumSF    := SchFactCorrV_Src.Num;
              gen_DateFact := SchFactCorrV_Src.dFact;
              gen_DatePost := SchFactCorrV_Src.dPost;
              gen_NRecSF   := SchFactCorrV_Src.NRec;

              // У исходного СФ есть исправление с датой, меньше даты корректировочного СФ
              gen_NRecIsprSF := iSrcIspr.GetSFIsprSrc_ForCorrV(SchFact_Original.NRec, gen_NumIsprSF, gen_DateIsprSF);
            }
          }
          else
          {
            var IsGTD_BK : Boolean;
            IsGTD_BK := False;

            // Корректировка налогового акта, СФ нет
            if (IsValid(tnKatSoprCorrV_Src))
              if ((KatSoprCorrV_Src.VidSopr = cwVidSopr_NalAkt) and (Pos(csSymbol_NalAkt, KatSoprCorrV_Src.NSopr) = 1) and (KatSoprCorrV_Src.wADoc = cgCustomAkt))
                if (GetFirst BookPrZk_GTD where ((KatSoprCorrV_Src.NRec == BookPrZk_GTD.cSopr)) = tsOk)
                {
                  gen_NumSF    := BookPrZk_GTD.Num;
                  gen_DateFact := KatSoprCorrV_Src.dSopr;
                  gen_DatePost := KatSoprCorrV_Src.dSopr;
                  gen_NRecSF   := 0;
                  IsGTD_BK := True;
                }

            if (not IsGTD_BK) and
               ((KatSoprCorrV.wADoc = adSoprDocKD) and (KatSoprCorrV.cADoc = 0)) // Сводный корректировочный сопрдок
            {
              // Вывожу информацию по первой позиции спецификации. Если нужен список - в Excel.
              if (GetFirst SpSoprCorrV_Sv = tsOk) {}

              gen_NumSF    := SchFactCorrV_Src_Sv.Num;
              gen_DateFact := SchFactCorrV_Src_Sv.dFact;
              gen_DatePost := SchFactCorrV_Src_Sv.dPost;
              gen_NRecSF   := SchFactCorrV_Src_Sv.NRec;
            }
          }

          gen_NumKSF  := if (cBookPrZk_Original = Comp(0), SchFact_Original.Num, BookPrZk_Original.Num);
          gen_DateKSF := SchFact_Original.dFact;
          gen_NRecKSF := SchFact_Original.NRec;

          if (bIsIspr)
          {
            gen_NumKIsprSF  := iSrcIspr.GetNumIspr(BookPrZk.Num);
            gen_DateKIsprSF := SchFact1.dFact;
            gen_NRecKIsprSF := SchFact1.NRec;
          }
        }
        else
        {
          if (((SchFact_Original.TipUser = cwTypeSF_Buy_Return) or (SchFact_Original.TipUser = cwTypeSF_Buy_ReturnExemptionNDS)) and
              (wGetTune('Nalog.Rus.RegVozvrBySomeKS') = 1))
          {
            if (GetFirst KatSoprVozvr_Src = tsOk)
              if (GetFirst SchFactVozvr_Src = tsOk)
              {
                gen_NumSF    := SchFactVozvr_Src.Num;
                gen_DateFact := SchFactVozvr_Src.dFact;
                gen_DatePost := SchFactVozvr_Src.dPost;
                gen_NRecSF   := SchFactVozvr_Src.NRec;
              }

            gen_NumKSF  := if (cBookPrZk_Original = Comp(0), SchFact_Original.Num, BookPrZk_Original.Num);
            gen_DateKSF := SchFact_Original.dFact;
            gen_NRecKSF := SchFact_Original.NRec;
          }
          else
          {
            gen_NumSF    := if (cBookPrZk_Original = Comp(0), SchFact_Original.Num, BookPrZk_Original.Num);
            gen_DateFact := SchFact_Original.dFact;
            gen_DatePost := SchFact_Original.dPost;
            gen_NRecSF   := SchFact_Original.NRec;
          }

          if (bIsIspr)
          {
            gen_NumIsprSF := iSrcIspr.GetNumIspr(BookPrZk.Num);

            if (gen_IsOtgr)
            {
              gen_DateIsprSF := SchFact1.dFact;
              gen_NRecIsprSF := SchFact1.NRec;
            }
            else
            {
              if (BookPrZk.cSchFactS <> 0)
              {
                gen_DateIsprSF := SchFact2.dFact;
                gen_NRecIsprSF := SchFact2.NRec;
              }
            }
          }
        }
      } // if (bIsNewBook)
      else
      {
        gen_NumSF  := BookPrZk.Num;
        gen_NRecSF := oForPrint.Get_NRecSFForBK(BookPrZk.NRec);

        if (gen_IsOtgr)
        {
          gen_DateFact := SchFact1.dFact;
          gen_DatePost := SchFact1.dPost;
        }
        else
          if (BookPrZk.cSchFactS <> 0)
          {
            gen_DateFact := SchFact2.dFact;
            gen_DatePost := SchFact2.dPost;
          }
      }

      // Дата и номер отгрузочного СФ снабжения из атрибута
      if ((gen_IsOtgr) and (g_Direct = cwDirect_Buy))
      {
        if (IsValid(tnSchFact1))
        {
          var sValue : String;
          sValue := Trim(sGetAttr(coSchFact, SchFact1.NRec, csAttrCustomsNum));

          if (sValue <> '')
          {
            var _Num  : String;
            var _Date : Date;
            ParseAttr_NumDate(sValue, _Num, _Date);

            gen_NumSF    := _Num;
            gen_DateFact := _Date;
            gen_DatePost := ZeroDate;
          }
        }
      }  // if ((gen_IsOtgr) and (g_Direct = cwDirect_Buy))
    }  // else if (IsBK_NoSF(BookPrZk.SubTip, BookPrZk.TipUser))
  }  // else if (gen_IsGTD)
}

// Головная организация
function GetHeadOrg(aCurrOrg : Comp) : Comp;
var
  cHeadRec : Comp;
{
  Result := 0;

  if (ExtAttr_ValueExists(coKatOrg, aCurrOrg, csAttrHeadOrg))
    cHeadRec := coGetAttr(coKatOrg, aCurrOrg, csAttrHeadOrg);
  else
    Exit;

  if (#_getFast_nRec(KatOrg, cHeadRec))
    Result := KatOrg.NRec;
}

function GruzoFromAttr : String;
var
  bNotSell  : Boolean;
  cKatOrgSF, cPunkt : Comp;
{
  Result := '';

  cKatOrgSF := 0;
  bNotSell  := False;

  if (IsValid(tnSchFact1))
  {
    bNotSell := SchFact1.Direct <> cwDirect_Sell;
    cKatOrgSF := SchFact1.cOrg;
  }
  else
    if (IsValid(tnSchFact2))
    {
      bNotSell := SchFact2.Direct <> cwDirect_Sell;
      cKatOrgSF := SchFact2.cOrg;
    }

  //проверка для записей регистрации авансов в момент отгрузки
  if (cKatOrgSF <> BookPrZk.cOrg)
    Exit;

  if ((BookPrZk.SubTip = cwTotal_TypeBK_RegAvans or
       BookPrZk.SubTip = cwTotal_TypeBK_AvansInMomentOtgr or
       BookPrZk.SubTip = cwTotal_TypeBK_RegVozvratAvans) or
      ((BookPrZk.Flags and cwCorrAvans) <> 0)) // Корректирующие записи по авансам
    Exit;

  if (not bPrnGruzoFromMarPunkt)
    Exit;

  if (GetFirst KatSopr_OtgrSF <> tsOk)
    Exit;

  if (GetFirst TTNDoc <> tsOk)
    Exit;

  cPunkt := if (bNotSell, TTNDoc.cPunktP, TTNDoc.cPunktR);

  if (GetFirst MarPunkt where ((cPunkt == MarPunkt.NRec)) <> tsOk)
    Exit;

  Result := Trim(sGetAttr(coMarPunkt, MarPunkt.NRec, sAttrKPPGruzo));
}

procedure GetDop_GruzoKPP(var _kpp : String);
var
  cGruzo   : Comp;
  sGruzVal : String;
{
  // Большим любителям правил, вроде меня - не обнулять _kpp!
  // Функция собирает доп. информацию о КПП. Но если он уже установлен и доп. ничего не нашлось, то в таком виде и вернуть для печати.

  if ((wPrnKpp = 1) or (IsDifferentOrg_Some))
  {
    if (#_getFast(KatOrg))
      _kpp := oHistory.sGetField(coKatOrg, Valid_KatOrg_NRec, 'KODPLATNDS', gen_DateFact_ForHistory);

    Exit;
  }

  // Обработка if (wPrnKpp = 2) не нужна, т.к. она работает если грузо <> 0 и КПП в SchFact.ss[1 or 2] задан явно.

  cGruzo := Comp(0);

  if (IsValid(tnSchFact1))
    cGruzo := if (SchFact1.Direct = cwDirect_Sell, SchFact1.cGruzTo, SchFact1.cGruzFrom);
  else
    if (IsValid(tnSchFact2))
      cGruzo := if (SchFact2.Direct = cwDirect_Sell, SchFact2.cGruzTo, SchFact2.cGruzFrom);


  // КПП при печати СФ = в зависимости от атрибута Головная организация
  if ((wPrnKpp = 2) and (cGruzo <> 0))
    if (#_getFast(KatOrg))
    {
      _kpp := GetKPP_ByHeadOrg(cGruzo, Valid_KatOrg_NRec, if (IsValid(tnBookPrZk), BookPrZk.dReg, Cur_Date));
      Exit;
    }

  sGruzVal := Trim(GetSegName(wCodeGruzo, cGruzo));

  // Грузо-контрагента не нашли
  if ((cGruzo = 0) or (sGruzVal <> '') or
      (BookPrZk.SubTip = cwTotal_TypeBK_RegAvans or
       BookPrZk.SubTip = cwTotal_TypeBK_AvansInMomentOtgr or
       BookPrZk.SubTip = cwTotal_TypeBK_RegVozvratAvans or
       BookPrZk.SubTip = cwTotal_TypeBK_Correcting) or
       Is_IsprBK_Otgr(BookPrZk.TipUser) or
      ((BookPrZk.Flags and cwCorrAvans) <> 0)) // Корректирующие записи по авансам
  {
    if (wPrnKPPWithoutGruzo = 1)
      if (#_getFast(KatOrg))
        _kpp := oHistory.sGetField(coKatOrg, Valid_KatOrg_NRec, 'KODPLATNDS', gen_DateFact_ForHistory);

    Exit;
  }

  if (#_getFast_nRec(KatOrg, cGruzo))
    _kpp := oHistory.sGetField(coKatOrg, Valid_KatOrg_NRec, 'KODPLATNDS', gen_DateFact_ForHistory);
}

// and BookPrZk.cOrg      == KatOrg.NRec
function SetPosKatOrg(_IsMyOrg: Boolean; _TuneMyOrg: Comp) : Boolean;
{
  if (not _IsMyOrg)
    Result := #_getFast(KatOrg);
  else
    Result := #_getFast_nRec(KatOrg, _TuneMyOrg);
}

// Дополнительные проверки организации записи регистрации, поиск с учетом всех дополнительных атрибутов-организаций
procedure FindOrg_ByBK(aOrg_BK : Comp; aDir : Word; aSF : Comp; var aOrg_Res : Comp; var aName_Res : String);
var
  _Post, _HeadOrg : Comp;
{
  _Post     := GetPostAttr(aDir, aSF);
  _HeadOrg  := GetHeadOrg(if (_Post = 0, aOrg_BK, _Post));
  aOrg_Res  := if (_HeadOrg <> 0, _HeadOrg, if (_Post <> 0, _Post, aOrg_BK));
  aName_Res := oHistory.sGetField(coKatOrg, aOrg_Res, 'REP.KATORGNAME', gen_DateFact_ForHistory);
}

// Записать в поток данные об организации
// isMyOrg признак собственной организации
procedure SetKatOrgInfo(IsMyOrg : Boolean);
var
  aOrg, aHeadOrg, aOrg_NotHead, _TuneMyOrg, aPost, aOrg_BK : Comp;
  sKPP, sINN, sName, sKPPFromAttr : String;
  bIsOrgSF                        : Boolean;
{
  gen_OrgName    := '';
  gen_UNN        := '';
  gen_KPP        := '';

  // Могут быть разные. Задаются дополнительно в атрибутах.
  gen_NRecKatOrg    := 0;
  gen_NRecKatOrg_BK := 0;

  sINN    := '';
  sKPP    := '';
  aPost   := 0;
  aOrg_BK := 0;

  // IsMyOrg = True - заголовок, иначе - запись регистрации
  _TuneMyOrg := if (IsMyOrg, TuneMyOrg_Main, TuneMyOrg_CurrBK); // для многофилиального режима

  // Собственная организация из хистори берется по дате периода или составления доп.листа
  if (IsMyOrg)
    gen_DateFact := if (g_RegDoc = cwBook_Dop, dDopList_InReport, g_DateTo_Copy);

  if (not SetPosKatOrg(IsMyOrg, _TuneMyOrg))
    Exit;

  if (not IsMyOrg)
    if (IsValid(tnSchFact1) and (BookPrZk.TipUser <> cwTypeBK_Sell_ReNDS_Hand))
      aPost := GetPostAttr(SchFact1.Direct, SchFact1.NRec);

  aOrg_NotHead := if (aPost <> 0, aPost, Valid_KatOrg_NRec);
  aHeadOrg     := GetHeadOrg(if (aPost <> 0, aPost, Valid_KatOrg_NRec));
  aOrg         := if (aHeadOrg <> 0, aHeadOrg, if (aPost <> 0, aPost, Valid_KatOrg_NRec));
  sName        := oHistory.sGetField(coKatOrg, aOrg, 'REP.KATORGNAME', gen_DateFact_ForHistory);

  // Печать объекта с наименованием контрагента
  if (g_isPrintObject and (not IsMyOrg) and (IsValid(tntmpBook)))
    if ((Trim(tmpBook.sStroyName) <> '') and (Trim(tmpBook.sStroyName) <> cnstNotFind))
      sName += ' (Объект строительства: ' + tmpBook.sStroyName + ')';

  // get KPP
  sKPPFromAttr := GruzoFromAttr;

  if (sKPPFromAttr <> '')
    sKPP := sKPPFromAttr;
  else
  {
    if (not IsMyOrg)
    {
      bIsOrgSF := True;

      if (BookPrZk.Subtip = cwTotal_TypeBK_Correcting or Is_IsprBK_Otgr(BookPrZk.TipUser))
      {
        var aOrgSF : Comp = 0;

        if (IsValid(tnSchFact1))
          aOrgSF := SchFact1.cOrg;
        else
          if (IsValid(tnSchFact2))
            aOrgSF := SchFact2.cOrg;

        if (BookPrZk.cOrg <> aOrgSF)
          bIsOrgSF := False;
      }

      // Корректировочные записи из СФ противоположного направления
      if (IsDifferentOrg_Some)
        bIsOrgSF := False;

      if (bIsOrgSF) // Совпадает организация СФ и записи книги
      {
        var bIsOtrg : Boolean = if (BookPrZk.Subtip = cwTotal_TypeBK_Correcting,
                                    ((BookPrZk.cSchFact <> 0) and (BookPrZk.cSchFactS = 0)),  // Корректирующие записи могут быть и авансовыми и отгрузочными
                                    ((BookPrZk.Subtip and cwTotal_TypeBK_RegAvans) = 0));

        if (bIsOtrg)
        {
          sKPP := if (BookPrZk.cOrg <> _TuneMyOrg,
                    Trim(SchFact1.ss[2]), oHistory.sGetField(coKatOrg, BookPrZk.cOrg, 'KODPLATNDS', gen_DateFact_ForHistory));
          sINN := if ((BookPrZk.cOrg <> _TuneMyOrg) and (TuneCountry <> ccBel),
                    Trim(SchFact1.ss[4]), oHistory.sGetField(coKatOrg, BookPrZk.cOrg, 'UNN'       , gen_DateFact_ForHistory));
          aOrg_BK := BookPrZk.cOrg;

          if (BookPrZk.cOrg <> _TuneMyOrg)
            FindOrg_ByBK(aOrg_BK, SchFact1.Direct, SchFact1.NRec, aOrg, sName);
          else
            FindOrg_ByBK(aOrg_BK, 0, 0, aOrg, sName);
        }
        else
          if (BookPrZk.cSchFactS <> 0)
          {
            if (BookPrZk.cOrg = _TuneMyOrg)
            {
              sKPP := trim(SchFact2.ss[1]);
              sINN := trim(SchFact2.ss[3]);

              aOrg_BK := BookPrZk.cOrg;
              FindOrg_ByBK(aOrg_BK, 0, 0, aOrg, sName);
            }
            else
              if (BookPrZk.cOrg = SchFact2.cOrg)
              {
                sKPP := trim(SchFact2.ss[2]);
                if (TuneCountry <> ccBel)
                  sINN := trim(SchFact2.ss[4]);

                aOrg_BK := BookPrZk.cOrg;
                FindOrg_ByBK(aOrg_BK, SchFact2.Direct, SchFact2.NRec, aOrg, sName);
              }
          }
      }
    }
  }

  if (sINN = '')
  {
    sINN := oHistory.sGetField(coKatOrg, Valid_KatOrg_NRec, 'UNN', gen_DateFact_ForHistory);
    aOrg    := Valid_KatOrg_NRec;
    aOrg_BK := Valid_KatOrg_NRec;
  }

  if (sKPP = '')
  {
    aOrg_BK := if (IsMyOrg, Valid_KatOrg_NRec, aOrg_NotHead); // В заголовке книги - КПП головной, для записей - без учета головной организации
    sKPP := oHistory.sGetField(coKatOrg, aOrg_BK, 'KODPLATNDS', gen_DateFact_ForHistory);

    if ((not IsMyOrg) and (not IsBK_NoSF(BookPrZk.SubTip, BookPrZk.TipUser)) and
        (BookPrZk.TipUser <> cwTypeBK_Buy_OtgrRegistr_Mediator) and (not gen_IsGTD))
      GetDop_GruzoKPP(sKPP);
  }

  // Беларусь, если филиал без УНП, то ищем в головной организации
  if (sINN = '') and (TuneCountry = ccBel)
  {
    sINN := oHistory.sGetField(coKatOrg, KatOrg.cPlat, 'UNN', gen_DateFact_ForHistory);
  }

  gen_OrgName := sName;
  gen_UNN     := sINN;
  gen_KPP     := sKPP;

  gen_NRecKatOrg    := aOrg;
  gen_NRecKatOrg_BK := aOrg_BK;

  SetPosKatOrg(IsMyOrg, _TuneMyOrg);
}

/**
 * записать в поток данные о валюте формирования книги
 * @param cVal ссылка на запись каталога валют (0-НДЕ)
 */
procedure WriteKlValInfo(cVal : Comp);
Var
  suffix : String;
{
  if (#_getFast_nRec(KlVal, cVal))
  {
    suffix := if (not g_isNDEEqual, '', '(НДЕ-эквивалент)');

    frmBkPrZkF.Write(KlVal.Dollar   + suffix);
    frmBkPrZkF.Write(KlVal.Dollarah + suffix);
    frmBkPrZkF.Write(KlVal.SimvolV);
  }
  else
  {
    frmBkPrZkF.Write(sTune_NameRubl);
    frmBkPrZkF.Write(sTune_NameRublah);
    frmBkPrZkF.Write(oValFunc.GetValSymbol(0));
  }
}

/**
 * установить доступные группы отчетов
 */
function SetReportGroups : Boolean;
Var
  strDirect, strCountry, strGroups, strYear : String;
  isCommon, isBase                          : Boolean;
{
  Result    := True;
  strYear   := '';
  strGroups := '';
  strDirect := if (g_Direct = cwDirect_Sell, 'Продажи', 'Закупки');

  strCountry:= bcase (TuneCountry = ccRus  : ''
                     , TuneCountry = ccBel : 'Беларусь'
                     ; /*else*/ '');

  if ((TuneCountry = ccRus) and ((VidReport = 53) or (VidReport = 35)))
    strYear := ' '+'2014' ;

  if ((TuneCountry = ccRus) and ((VidReport = 54) or (VidReport = 36)))
    strYear := ' '+'2017' ;

  if ((TuneCountry = ccRus) and (VidReport = 55 or VidReport = 45))
    strYear := ' 2019' ;

  if ((g_RegDoc = cwBook_Dop) and (TuneCountry = ccRus))
  {
    if (g_Direct = cwDirect_Sell)
      strGroups := 'Дополнительный лист книги продаж' + strYear;
    else
      strGroups := 'Дополнительный лист книги покупок' + strYear;
  }
  else
  {
    isCommon := not g_isFiltVal;
    isBase   := g_isFiltVal;

    if (isBase)
    {
      strGroups := strDirect + if (strCountry = '', '', ' (' + strCountry + ')');
      if (TuneCountry = ccBel)
        strGroups := strGroups + ' (старые формы)'#1+ strGroups;
    }

    if (isCommon)
    {
      if ((TuneCountry = ccRus) and ((VidReport = 35) or (VidReport = 36) or (VidReport = 45)))
        strGroups := strDirect + if (strCountry = '', '', ' (' + strCountry + ')') + strYear
      else
        strGroups := strDirect + ' (сводная' +
                   if (strCountry = '', '', ', ' + strCountry) + ')';
    }
  }


  frmBkPrZkF.SetGroup(strGroups);

  // Показывать законодательные формы других стран
  if not boGetTune('Rep.OnlyMyCountry')
    frmBkPrZkF.AddSubGroup('Country', '', 0);

  if (frmBkPrZkF.Error)
  {
    frmBkPrZkF.AbortForm;
    Result := False;
  }
}

/**
 * функция для переходной книги (01.01.2004) с 2мя ставками
 * определить по какой ставке была рассчитана сумма
 * @param noNDS сумма без НДС
 * @param nds сумма НДС
 * @param dotgr дата отгрузки/поставки
 */
function IsNDS20(NoNDS, NDS : Double; dOtgr : Date) : Boolean;
var
  NDS20, NDS18, Diff : Double;
  bRes               : Boolean;
{
  bRes := False;

  if (TuneCountry <> ccBel and TuneCountry <> ccRus)
    Exit;

  if (TuneCountry = ccBel)
    bRes := (dOtgr < Date(1, 1, 2010));
  else
    bRes := True;

  if (not bRes)
    Exit;

  NDS20 := 0.20 * NoNDS;
  NDS18 := 0.18 * NoNDS;
  Diff  := (Abs(NDS20 - NDS) - Abs(NDS18 - NDS));

  if (Abs(Diff) >= cnstKop)
   bRes := if (TuneCountry = ccBel, bRes and (Diff > 0), Diff < 0); // для РБ, если > 0, ставка 18%

  Result := bRes;
}

/**
 * снять все Conditions с таблицы перед печатью
 */
procedure resetBookBounds;
{
  ResetBounds(tnBookPrZk);

  PopConditionForLeave(tcbyObject       , tnBookPrZk);
  PopConditionForLeave(tcbyDescrBookPrZk, tnBookPrZk);
  PopConditionForLeave(tcbyDesGrBookPrZk, tnBookPrZk);
}

/**
 * установить ограничения (фильтры печати) на таблицу BookPrZk
 */
procedure SetBounds4Print;
Var
 wDescrFilter : Word;
 isDescr      : Boolean;
{
  resetBookBounds;

  wDescrFilter := dataProvider.getWordFieldValue(#FIELD_DESCRTYPE);
  isDescr := wDescrFilter = 1;

  if (wDescrFilter > 0)
  {
    g_DescrValue := dataProvider.getStringFieldValue(#FIELD_DESCR);
    g_DesGrValue := dataProvider.getStringFieldValue(#FIELD_DESGR);

    case (g_descrOwner) of

      cwDescrOwn :
      {
        PushBounds(if (isDescr, tbbyDescrBookPrZk, tbbyDesGrBookPrZk));
      }

      cwDescrSF, cwDescrDO :
      {
        PushBounds(tbbyMainBookPrZk);
        PushConditionForLeave(if (isDescr, tcbyDescrBookPrZk, tcbyDesGrBookPrZk), tnBookPrZk);
      }

    end;
  }
  else
   PushBounds(tbbyMainBookPrZk);

  // Фильтр по объекту строительства в интерфейсе книги. Отчет идет по отфильтрованным записям.
  if (dataProvider.Parameter(#FILTER_OBJECT))
  {
    g_cObject := dataProvider.getCompFieldValue(#FIELD_OBJECT);
    PushConditionForLeave(tcbyObject, tnBookPrZk);
  }
}

// Посредник СФ записи регистрации
function Find_KO_Mediator : Comp;
var
  aSF : Comp;
{
  Result := 0;

  if ((BookPrZk.TipUser = cwTypeBK_Sell_ReNDS_Hand) or (BookPrZk.TipUser = cwTypeBK_Buy_RegGTD))
    Exit;

  aSF := oForPrint.Get_NRecSFForBK(BookPrZk.NRec);

  Result := coGetAttr(coSchFact, aSF, csAttrMediator);
}

function IsFilterBK : Boolean;
{
  Result := False;

  // Исправительные записи с нулевыми суммами не выводятся.
  // Корректирующие проверяю при печати, т.к. они должны учитываться но не выводиться.
  if ((Abs(BookPrZk.Summa) <= cnstNullDouble) and (Is_IsprBK(BookPrZk.TipUser)))
    Exit;

  // фильтры печати по контрагентам, типам записей и центрам ответственности
  if (g_isFiltOrg)
    if (not SearchMarker(MrkGetSomeKatOrg, BookPrZk.cOrg, defIndexNo))
      Exit;

  if (g_isFiltTypeBK)
    if (not SearchMarker(MrkGetSomeUsersDoc, Comp(BookPrZk.TipUser), defIndexNo))
      Exit;

  if (g_isFiltOtvPodr)
    if (not SearchMarker(MrkGetSomeKatPodr, BookPrZk.cOtvPodr, defIndexNo))
      Exit;

  if (mrkUserFilter <> 0)
    if (not SearchMarker(mrkUserFilter, BookPrZk.NRec, defIndexNo))
      Exit;

  Result := True;
}

function IsFilterBK_Dop(AttrKO_Mediator : Comp) : Boolean;
{
  Result := False;

  if (g_isFiltMediator)
    if (not SearchMarker(mrkGetSomeMediator, AttrKO_Mediator, defIndexNo))
      Exit;

  Result := True;
}

// Проверка, использовать ли суммы в валюте BookPrZk[1..20] или НДЕ-эквиваленте BookPrZk[21..40]
// суммы в валюте BookPrZk[1..20] - старые формы и НЕ НДЕ-эквивалент
//                                  новые формы и не валютная запись. Новые формы - печатаются все валюты и итоговые суммы в нДЕ
function IsUse_Val_Summs : Boolean;
var
  bIsValBK : Boolean;
{
  bIsValBK := (IsValid(tnKlVal_BK));
  Result := ((not bZak2014 and not g_isNDEEqual) or (bZak2014 and not bIsValBK));
}

// Собственно процедура вычитания сумм текущей записи BookPrZkCorrected
// aDelta = cnstDelta_Total_Sums - итоговые суммы по валюте
// aDelta = cnstDelta_Begin_Sums - начальные итоговые суммы по валюте для доп.листа
procedure Minus_Curr_BookPrZkCorrected(aDelta : Word; aKodOp : String);
var
  bIsPrintSummsWithoutNDS : Boolean;
{
  if ((aDelta <> cnstDelta_Total_Sums) and (aDelta <> cnstDelta_Begin_Sums))
    Exit;

  if (not g_isPrintItog_NA)
    if ((aKodOp = cs_KodOp_RF_33) or (aKodOp = cs_KodOp_RF_34))
      Exit;

  // Пересчет сумм без НДС
  bIsPrintSummsWithoutNDS :=
    IsNeedSummsWithoutNDS(BookPrZkCorrected.Buffer, if (IsValid(tnSchFact2_Corrected), SchFact2_Corrected.SubTip, 0), if (IsValid(tnSchFact2_Corrected), SchFact2_Corrected.TipUser, 0));

  // доп.проверка на код операции для записей регистрации авансов поставщику в момент отгрузки и сторно по авансу в момент отгрузки (сбыт)
  if ((bIsPrintSummsWithoutNDS) and (BookPrZk.Direct = cwDirect_Sell) and (BookPrZk.SubTip = cwTotal_TypeBK_AvansInMomentOtgr))
    if (aKodOp <> cs_KodOp_RF_21) and (aKodOp <> cs_KodOp_RF_43)
      bIsPrintSummsWithoutNDS := false;

  if (IsUse_Val_Summs)
  {
    if (bIsPrintSummsWithoutNDS)
    {
      tmpListVal.Sum[aDelta + 1] -= BookPrZkCorrected.Sum[1];
      tmpListVal.Sum[aDelta + 4] -= BookPrZkCorrected.Sum[4];
    }

    tmpListVal.Sum[aDelta + 20] -= BookPrZkCorrected.Summa;
    tmpListVal.Sum[aDelta +  2] -= BookPrZkCorrected.Sum[2];
    tmpListVal.Sum[aDelta +  3] -= BookPrZkCorrected.Sum[3];
    tmpListVal.Sum[aDelta +  5] -= BookPrZkCorrected.Sum[5];
    tmpListVal.Sum[aDelta +  6] -= BookPrZkCorrected.Sum[6];
    tmpListVal.Sum[aDelta +  7] -= BookPrZkCorrected.Sum[7];
    tmpListVal.Sum[aDelta +  8] -= BookPrZkCorrected.Sum[8];
    tmpListVal.Sum[aDelta +  9] -= BookPrZkCorrected.Sum[9];
    tmpListVal.Sum[aDelta + 10] -= BookPrZkCorrected.Sum[10];
    tmpListVal.Sum[aDelta + 11] -= BookPrZkCorrected.SumIn[1];
    tmpListVal.Sum[aDelta + 12] -= BookPrZkCorrected.SumIn[2];
    tmpListVal.Sum[aDelta + 13] -= BookPrZkCorrected.SumIn[3];
    tmpListVal.Sum[aDelta + 14] -= BookPrZkCorrected.SumIn[4];
    tmpListVal.Sum[aDelta + 15] -= BookPrZkCorrected.Sum[23];

    if (not IsNDS20(BookPrZkCorrected.Sum[1], BookPrZkCorrected.Sum[2],
                    if (BookPrZkCorrected.dOpr = ZeroDate, BookPrZkCorrected.dReg, BookPrZkCorrected.dOpr)))
    {
      if (bIsPrintSummsWithoutNDS)
        tmpListVal.Sum[aDelta + 16] -= BookPrZkCorrected.Sum[1];

      tmpListVal.Sum[aDelta + 17] -= BookPrZkCorrected.Sum[2];
    }
    else
    {
      if (bIsPrintSummsWithoutNDS)
        tmpListVal.Sum[aDelta + 18] -= BookPrZkCorrected.Sum[1];

      tmpListVal.Sum[aDelta + 19] -= BookPrZkCorrected.Sum[2];
    }

  }
  else
  {
    if (bIsPrintSummsWithoutNDS)
    {
      tmpListVal.Sum[aDelta + 1] -= BookPrZkCorrected.Sum[11];
      tmpListVal.Sum[aDelta + 4] -= BookPrZkCorrected.Sum[14];
    }

    tmpListVal.Sum[aDelta + 20] -= BookPrZkCorrected.Sum[21];
    tmpListVal.Sum[aDelta +  2] -= BookPrZkCorrected.Sum[12];
    tmpListVal.Sum[aDelta +  3] -= BookPrZkCorrected.Sum[13];
    tmpListVal.Sum[aDelta +  5] -= BookPrZkCorrected.Sum[15];
    tmpListVal.Sum[aDelta +  6] -= BookPrZkCorrected.Sum[16];
    tmpListVal.Sum[aDelta +  7] -= BookPrZkCorrected.Sum[17];
    tmpListVal.Sum[aDelta +  8] -= BookPrZkCorrected.Sum[18];
    tmpListVal.Sum[aDelta +  9] -= BookPrZkCorrected.Sum[19];
    tmpListVal.Sum[aDelta + 10] -= BookPrZkCorrected.Sum[20];
    tmpListVal.Sum[aDelta + 11] -= BookPrZkCorrected.SumIn[6];
    tmpListVal.Sum[aDelta + 12] -= BookPrZkCorrected.SumIn[7];
    tmpListVal.Sum[aDelta + 13] -= BookPrZkCorrected.SumIn[8];
    tmpListVal.Sum[aDelta + 14] -= BookPrZkCorrected.SumIn[9];
    tmpListVal.Sum[aDelta + 15] -= BookPrZkCorrected.Sum[28];

    if (not IsNDS20(BookPrZkCorrected.Sum[11]
                  , BookPrZkCorrected.Sum[12]
                  , if (BookPrZkCorrected.dOpr = ZeroDate, BookPrZkCorrected.dReg, BookPrZkCorrected.dOpr)))
    {
      if (bIsPrintSummsWithoutNDS)
        tmpListVal.Sum[aDelta + 16] -= BookPrZkCorrected.Sum[11];

      tmpListVal.Sum[aDelta + 17] -= BookPrZkCorrected.Sum[12];
    }
    else
    {
      if (bIsPrintSummsWithoutNDS)
        tmpListVal.Sum[aDelta + 18] -= BookPrZkCorrected.Sum[11];

      tmpListVal.Sum[aDelta + 19] -= BookPrZkCorrected.Sum[12];

    }
  }
}

// Вычитание сумм корректируемых СФ
function SubCorrectedSumms(aKodOp : String) : Boolean;
var
  bIsDoubleCorrSF, bIsSpec_Pr : Boolean;
{
  Result            := False;
  bIsDoubleCorrSF   := False;
  bIsSpec_Pr        := False;

  if (GetFirst tmpBook_Corrected
    where ((tmpListVal.cVal        == tmpBook_Corrected.cVal     and
            prPred                 == tmpBook_Corrected.TypeRec  and
            BookPrZkCorrected.NRec == tmpBook_Corrected.cBookPrZk)) <> tsOk)
  {
    // Ситуация, когда в доп.периоде несколько корректирующих СФ, вывожу все
    if (GetFirst tmpBook_Corrected
      where ((tmpListVal.cVal        == tmpBook_Corrected.cVal     and
              prMain                 == tmpBook_Corrected.TypeRec  and
              BookPrZkCorrected.NRec == tmpBook_Corrected.cBookPrZk)) <> tsOk)
    {
      Exit;
    }
    else
    {
      // Спецкорректировка по книге продаж.
      // Дублирование не надо ставить, т.к. аннулирующая пропускается, а корректирующая печатается
      if ((BookPrZk.Direct = cwDirect_Sell) and (BookPrZk.SubTip = cwTotal_TypeBK_Correcting) and
          ((BookPrZk.Flags and cwSpecCorr_Pr) <> 0) and
          (Abs(BookPrZkCorrected.Summa) <= cnstNullDouble))
        bIsSpec_Pr := True;
      else
        bIsDoubleCorrSF := True;
    }
  }

  // Собственно процедура вычитания сумм
  Minus_Curr_BookPrZkCorrected(cnstDelta_Total_Sums, aKodOp);

  // Промежуточный период. Запись из предыдущего периода заменяется корректирующей записью из следующего.
  if (bIsBetweenPeriod)
  {
    Delete current tmpBook_Corrected;
  }
  else
  {
    if (not bIsDoubleCorrSF)
    {
      // Для первоначальной корректируемой записи тоже устанавливаю ссылку, иначе не будет печатать рядом.
      if (bIsSpec_Pr)
      {
        if (GetFirst tmpBook_Spec where((BookPrZkCorrected.cSchfactR == tmpBook_Spec.cBookPrZk)) = tsOk)
        {
          tmpBook_Spec.cCorrected_BookPrZk := BookPrZk.NRec; // Ссылка на корректирующую СФ
          Update current tmpBook_Spec;
        }
      }

      tmpBook_Corrected.TypeRec             := prCorrected;
      tmpBook_Corrected.cCorrected_BookPrZk := BookPrZk.NRec; // Ссылка на корректирующую СФ
    }
    else
    {
      // Признак дублирующей записи, может понадобится при дальнейшей обработке
      tmpBook_Corrected.wDouble := Word(1);
    }

    Update current tmpBook_Corrected;
  }

  Result := True;
}

// Возвращает строку сортировки по датам
function GetSortedStrByDate : String;
{
  // Для обеспечения сортировки по дате регистрации (дате записи)
  Result := DateToStr(BookPrZk.dReg, 'YYYYMMDD');

  case (g_SortedBK) of
    // По дате записи и номеру документа для учета НДС
    0 : {}
    // По дате записи, дате оплаты и номеру документа для учета НДС
    1 :
    {
      Result += if (BookPrZk.dOpl > ZeroDate, DateToStr(BookPrZk.dOpl, 'YYYYMMDD'), strNullDate);
    }
    // По дате записи, дате оплаты, дате оприходования и номеру документа для учета НДС
    2 :
    {
      Result += if (BookPrZk.dOpl > ZeroDate, DateToStr(BookPrZk.dOpl, 'YYYYMMDD'), strNullDate);
      Result += if (BookPrZk.dOpr > ZeroDate, DateToStr(BookPrZk.dOpr, 'YYYYMMDD'), strNullDate);
    }
    // По дате записи, дате оприходования и номеру документа для учета НДС
    3 :
    {
      Result += if (BookPrZk.dOpr > ZeroDate, DateToStr(BookPrZk.dOpr, 'YYYYMMDD'), strNullDate);
    }
    // По дате записи, дате оприходования, дате оплаты и номеру документа для учета НДС
    4 :
    {
      Result += if (BookPrZk.dOpr > ZeroDate, DateToStr(BookPrZk.dOpr, 'YYYYMMDD'), strNullDate);
      Result += if (BookPrZk.dOpl > ZeroDate, DateToStr(BookPrZk.dOpl, 'YYYYMMDD'), strNullDate);
    }
  end;

  Result += Trim(BookPrZk.Num);
}

// Проверка корректирующих сторно-записей
// Они заносятся в дополнительную книгу покупок,
// а ссылаться могут на записи и в книге продаж и в книге покупок
// CheckCorrStorno = -1 - Не коррекция-сторно
//                    0 - Корректирующая сторно-запись, не подходит для отчета
//                    1 - Корректирующая сторно-запись, подходит для отчета,
//                        ссылается на запись в книге продаж, т.е. в разных книгах
//                    2 - Корректирующая сторно-запись, подходит для отчета,
//                        ссылается на запись в книге покупок, т.е. в одной книге

function CheckCorrStorno : Integer;
{
  Result := -1;

  if ((BookPrZk.Direct <> cwDirect_Buy) or (BookPrZk.TipUser <> cwTypeBK_Sell_CorrStorno))
    Exit;

  Result := 0;

  // Корректировка-сторно может быть привязана к авансовой записи, а корректировать период отгрузки,
  // поэтому проверка идет по полю Корректируемая дата.
  if ((g_DateFrom_Copy <= BookPrZk.ds[2]) and (BookPrZk.ds[2] <= g_DateTo_Copy))
  {
    Result := Integer(BookPrZkCorrected.Direct);
  }
}

function Is_GTD_CurRecBookBel : Boolean;
{
  // Поиск налогового акта, который соответствует записи регистрации
  if (GetFirst NalAkt where ((BookPrZk.cSopr == NalAkt.NRec)) <> tsOk)
    Result := False;
  else
    Result := (((NalAkt.VidSopr = cgDoc_0111) and (NalAkt.cNote = coGetTune('Nalog.Bel.GTD_Status'))) or
               ((NalAkt.wADoc = cgCustomAkt) and (Pos(csSymbol_NalAkt, NalAkt.NSopr) = 1)));
}

function Is_Budget_CurRecBookBel : Boolean;
{
  // Поиск налогового акта, который соответствует записи регистрации
  if (GetFirst NalAkt where ((BookPrZk.cSopr == NalAkt.NRec)) <> tsOk)
    Result := False;
  else
    Result := ((NalAkt.VidSopr = cgDoc_0111) and (NalAkt.cNote = coGetTune('Nalog.Bel.Budget_Status')));
}

function Is_GTD_NalAktLinkNakl: Boolean;
{
  Result := False;

  if (GetFirst NalAkt where ((BookPrZk.cSopr == NalAkt.NRec)) <> tsOk)
    Exit;

  // только, если статус в акте ГТД
  if ((NalAkt.VidSopr <> cgDoc_0111) or (NalAkt.cNote <> coGetTune('Nalog.Bel.GTD_Status')))
    Exit;

  if (GetFirst GTD_Nakl <> tsOk)
    Exit;

  if (GTD_Nakl.cSchFact <> 0)
    Result := True;
}

// Получить код операции, по типу СФ или записи регистрации
function GetKodOpBel : Byte;
var
  IsBelarusOrg : Boolean;
{
  Result  := 0;
  IsBelarusOrg := False;

  // 5 - регистрация возвратов
  if (BookPrZk.TipUser = 7533)   // Регистрация возврата товара поставщику
  {
    Result := cb_KodOp_Vozvr;
    Exit;
  }

  // если организация не задана или код равен 112, то относим ее к Беларуси
  if (not isValid(tnKatState))
    IsBelarusOrg := True;
  else
    IsBelarusOrg := trim(KatState.KOD) = sKod_Bel;

  if (Is_Budget_CurRecBookBel)
  {
    Result := cb_KodOp_NDS_NalOrg; // Оплата налогов в бюджет, спец. статус привязанного налогового акта
  }
  else
    if (IsBelarusOrg)
    {
      Result := if (Is_GTD_CurRecBookBel, cb_KodOp_NDS_TamOrg, cb_KodOp_Bel); // cb_KodOp_Bel - страна Беларусь
    }
    else
    {
      if ((KatOrg.TipKnt shr 8) = 3)
        Result := cb_KodOp_NeverNDS;      // страна не Беларусь и признак <Применять налоги> = никогда
      else
      {
        if (Is_GTD_CurRecBookBel)
          Result := cb_KodOp_NDS_TamOrg;  // страна не Беларусь, признак <Применять налоги> не равен никогда, есть ГТД
        else
          Result := cb_KodOp_NDS_NalOrg; // страна не Беларусь, признак <Применять налоги> не равен никогда, нет ГТД
      }
    }
}

function GetAndFilter_CodeOp(var aKodOp : String) : Boolean;
{
  Result := True;

  aKodOp := oForPrint.GetKodOpAndSF_DopForBK(BookPrZk.NRec, _SF_Dop);

  // Фильтр по коду операции
  if (g_isFiltCodeOp)
    if (GetFirst tmpCodeOp_ForBK where ((aKodOp == tmpCodeOp_ForBK.Value)) <> tsOK)
      Result := False;
}

// Выгрузка данных во временную таблицу
procedure BuildTmpBook;
var
  IsOk, bIsPrintSummsWithoutNDS, bIsNotLink, bIsIspr, bIsBothBook, bIsPrintItog,
  IsPrintTotalSum_NA, IsPrintNDS_NA                  : Boolean;
  aCorrected, aObj, cCorrInSameBook, AttrKO_Mediator : Comp;
  iCheckSt   : Integer;
  lCount     : LongInt;
  Curr_KodOp : String;   // Глобальные переменные - зло! Делаю локальной, чтобы последнее сохранившееся значение не использовалось в функциях типа Minus_Curr_BookPrZkCorrected после _loop BookPrZk
{
  StartNewVisual(vtNumericVisual + vfScreenBottom, vfTimer, 'Подсчет документов...', 1);

  lCount := 0;

  _loop BookPrZk
  {
    NextVisual;
    lCount++;
  }

  StopVisual;

  StartNewVisual(vtIndicatorVisual, vfTimer, 'Обработка документов...', lCount);

  _loop BookPrZk
  {
    NextVisual;

    if (bIsOnlyCorrectBK) // Дополнительная книга, только корректирующие записи
    {
      if (BookPrZk.SubTip <> cwTotal_TypeBK_Correcting)
        Continue;
    }
    else // Основная книга
    {
      if (not bMainBkZk_WithCorrecting)
      {
        if (BookPrZk.SubTip = cwTotal_TypeBK_Correcting)
          Continue;
      }
      else
      {
        // В основную книгу по покупкам корректирующие записи попадают
        // только если они привязаны к корректируемой записи
        if ((BookPrZk.SubTip = cwTotal_TypeBK_Correcting) and (BookPrZk.cSchFactR = Comp(0)))
          Continue;
      }
    }

    if (not IsFilterBK)
      Continue;

    AttrKO_Mediator := 0;

    if (TuneCountry = ccRus)
    {
      if (not GetAndFilter_CodeOp(Curr_KodOp))
        Continue;

      AttrKO_Mediator := Find_KO_Mediator; // Посредник СФ записи регистрации

     if (not IsFilterBK_Dop(AttrKO_Mediator))
        Continue;
    }

    // Отслеживание ситуаций, когда в один налоговый период попадает несколько корректируЮЩих исправление записей.
    // Должны выводиться все, одна с "-". вторая с "+".
    bIsBothBook     := False;
    cCorrInSameBook := 0;

    if ((BookPrZk.SubTip = cwTotal_TypeBK_Correcting) and (not bIsBetweenPeriod))
    {
      // СФ по корректирующей записи - исправление
      bIsIspr := if (IsValid(tnSchFact1), Is_IsprSF(SchFact1.TipUser, SchFact1.Flags),
                 if (IsValid(tnSchFact2), Is_IsprSF(SchFact2.TipUser, SchFact2.Flags), False));

      // Корректирующая запись с "-" обычного СФ попадает, если у него есть СФ-исправления
      bIsIspr := bIsIspr or if (IsValid(tnSchFact1), SchFact1.cRecs[9] <> 0,
                            if (IsValid(tnSchFact2), SchFact2.cRecs[9] <> 0, False));

      // За текущей записью есть корректирующие исправления в данном налоговом периоде, значит текущая должна попасть и в доп.книгу prMain и
      // в корректируемые записи prCorrected.
      if (bIsIspr)
      {
        if (IsValid(tnBookPrZk_ForNext))
          if ((g_DateFrom <= BookPrZk_ForNext.dReg) and (BookPrZk_ForNext.dReg <= g_DateTo))
          {
            bIsBothBook := True;
            cCorrInSameBook := BookPrZk_ForNext.NRec;
          }
      }
    }

    if TuneCountry <> ccBel
      if ((GetMarkerCount (mrkDescrFilter) > 0) and (not iDescr.IsFilterDescr(BookPrZk.Descr)))
        Continue;

    bIsNotLink := False;

    if (bIsReport2015Bel)
    {
      if (wTune_MajorPayerBel = 1)
      {
        g_KodOpBel := GetKodOpBel;

        // Создание записи во временной таблице сумм для текущих коду операции и валюте
        if (GetFirst tmpListKodOp where ((g_cVal == tmpListKodOp.cVal and g_KodOpBel == tmpListKodOp.bKodOp)) <> tsOk)
        {
          ClearBuffer(#tmpListKodOp);
          tmpListKodOp.cVal   := g_cVal;
          tmpListKodOp.bKodOp := g_KodOpBel;
          Insert current tmpListKodOp;
        }
      }
    }

    // Расчеты по корректирующим записям
    if (bIsOnlyCorrectBK)
    {
      // Корректируемая запись - BookPrZk.cSchFactR
      aCorrected := BookPrZk.cSchFactR;

      if (aCorrected <> Comp(0))
      {
        IsOk := False;

        if (GetFirst BookPrZkCorrected where((aCorrected == BookPrZkCorrected.NRec)) = tsOk)
        {
          // Проверка корректирующих сторно-записей
          iCheckSt := CheckCorrStorno;

          // Не коррекция-сторно, дальнейшие проверки записи
          // или обе записи в одной книге покупок
          if ((iCheckSt = -1) or (iCheckSt = 2))
          {
            if (SubCorrectedSumms(Curr_KodOp)) // Вычитание сумм корректируемых СФ
              IsOk := True;
          }
          else
            IsOk := (iCheckSt = 1); // Коррекция-сторно, разные книги
        }

        // Если в основном периоде нет записей, которая текущая запись изменяет, то она в отчет не попадает
        if (not IsOk)
          Continue;
      }
      else
      {
        // Непривязанная запись тоже попадает в отчет, если корректирует основной период
        if ((BookPrZk.ds[2] = ZeroDate) or
            (BookPrZk.ds[2] < g_DateFrom_Copy) or (g_DateTo_Copy < BookPrZk.ds[2]))
          Continue;

        bIsNotLink := True;
      }
    }

    if (BookPrZk.SubTip = cwTotal_TypeBK_Correcting and (not bIsBetweenPeriod))
      if (dDopL < BookPrZk.dReg)
        dDopL := BookPrZk.dReg;

    // Создание записи временной таблицы
    ClearBuffer(#tmpBook);
    tmpBook.cVal      := tmpListVal.cVal;
    tmpBook.TypeRec   := prMain;
    tmpBook.cBookPrZk := BookPrZk.NRec;
    tmpBook.dReg      := BookPrZk.dReg;
    tmpBook.SubTip    := BookPrZk.SubTip;
    tmpBook.sKodOp    := Trim(Curr_KodOp);
    tmpBook.SF_Dop    := _SF_Dop;
    tmpBook.KO_Med    := AttrKO_Mediator;

    // Группировка по типам записей
    if (g_isGroupType)
    {
      tmpBook.wTipUsers     := BookPrZk.TipUser;
      tmpBook.sTipUsersName := UsersDoc.Name;
    }

    // Группировка по центрам ответственности
    if (g_isGroupOtvPodr)
    {
      tmpBook.cPodr     := BookPrZk.cOtvPodr;
      tmpBook.sPodrName := if (BookPrZk.cOtvPodr <> 0, FpCO.Name, 'не определено');
    }

    // Группировка по контрагентам
    if (g_isGroupKatOrg)
    {
      SetKatOrgInfo(False);
      tmpBook.cKatOrg     := BookPrZk.cOrg;
      tmpBook.sKatOrgName := if (BookPrZk.cOrg <> 0, gen_OrgName, 'не определено');
    }
    // Поиск объекта строительства, если он будет нужен при дальнейшей печати
    if (g_isGroupObject or g_isPrintObject)
    {
      tmpBook.sStroyName := cnstNotFind;

      if (IsValid(tnKatStroy2))
      {
        // Старые записи, с установленным BookPrZk.cObject
        tmpBook.cStroyObject := BookPrZk.cObject;
        tmpBook.sStroyName   := KatStroy2.Name;
      }
      else
        if (GetFirst SpSchF_Obj where ((BookPrZk.cSchFact == SpSchF_Obj.cSchFact)) = tsOK)
        {
          // Ссылка на объект строительства
          aObj := oMTRFun.GetObjUKS(coSpSchF, SpSchF_Obj.NRec);

          if (aObj <> Comp(0))
          {
            tmpBook.cStroyObject := aObj;
            tmpBook.sStroyName   := oMTRFun.GetObjUKSName(coSpSchF, SpSchF_Obj.NRec);
          }
        }
    }

    // Группировка по группам дескрипторов
    if (g_isGroupGrDescr)
      tmpBook.DesGr := if (BookPrZk.DesGr <> '', BookPrZk.DesGr, 'не определен');

    // Сортировка по контрагенту
    if (g_isSortKatOrg)
    {
      if (BookPrZk.cOrg <> 0)
        tmpBook.sSortName := KatOrg.Name;
    }

    tmpBook.sSortName := tmpBook.sSortName + GetSortedStrByDate;

    if ((TuneCountry = ccRus) and (BookPrZk.Direct = cwDirect_Buy) and
        (BookPrZk.SubTip = cwTotal_TypeBK_Correcting))
      if ((BookPrZk.Flags and cwCorr_Dop) <> 0)
        tmpBook.wCorrZk_Dop := 1;

    // "Забытые" записи, не привязанные к записям регистрации, попадают только в доп.книгу
    if (bIsNotLink)
      tmpBook.wNotLink := 1;

    bIsPrintSummsWithoutNDS :=
      IsNeedSummsWithoutNDS(BookPrZk.Buffer, if (IsValid(tnSchFact2), SchFact2.SubTip, 0), if (IsValid(tnSchFact2), SchFact2.TipUser, 0));

    // доп.проверка на код операции для записей регистрации авансов поставщику в момент отгрузки и сторно по авансу в момент отгрузки (сбыт)
    if ((bIsPrintSummsWithoutNDS) and (BookPrZk.Direct = cwDirect_Sell) and (BookPrZk.SubTip = cwTotal_TypeBK_AvansInMomentOtgr))
      if (Curr_KodOp <> cs_KodOp_RF_21) and (Curr_KodOp <> cs_KodOp_RF_43)
        bIsPrintSummsWithoutNDS := false;

    bIsPrintItog := True;

    // Ситуация: не учитываю в итоговых суммах суммы по реализации сырых шкур и лома
    if (not g_isPrintItog_NA)
      bIsPrintItog := not (Is_BK_NDS_NA(BookPrzk.TipUser) or (Curr_KodOp = cs_KodOp_RF_33) or (Curr_KodOp = cs_KodOp_RF_34));

    if (bIsPrintItog)
    {
      IsPrintTotalSum_NA := IsPrintNDS_NA := True;

      if (Is_BK_NDS_NA_Sell(BookPrzk.TipUser) or (Curr_KodOp = cs_KodOp_RF_33 or Curr_KodOp = cs_KodOp_RF_34))
      {
        IsPrintTotalSum_NA := (BookPrzk.TipUser = cwTypeBK_Buy_CorrV_Minus_NDS_NA); // при реализации шкур и лома, сбыт - сумма с НДС выводится только в книге покупок (корректировка - уменьшение)
        IsPrintNDS_NA      := False;
      }

      // Итоги по разным валютам
      if (IsUse_Val_Summs)
      {
        // Суммы в валюте документа
        // согласно письма от 15.08.2004, суммы без НДС для авансовых не отображаем
        if (bIsPrintSummsWithoutNDS)
        {
          tmpListVal.Sum[1] += BookPrZk.Sum[1];
          tmpListVal.Sum[4] += BookPrZk.Sum[4];
        }

        if ((bIsReport2015Bel) and ((g_KodOpBel = cb_KodOp_NDS_NalOrg) or (g_KodOpBel = cb_KodOp_NDS_TamOrg) or (g_KodOpBel = cb_KodOp_NeverNDS)))
          tmpListVal.Sum[20] += BookPrZk.Sum[2] + BookPrZk.Sum[5];
        else if (IsPrintTotalSum_NA)
            tmpListVal.Sum[20] += BookPrZk.Summa;

        if (IsPrintNDS_NA)
          tmpListVal.Sum[2] += BookPrZk.Sum[2];

        tmpListVal.Sum[3]  += BookPrZk.Sum[3];
        tmpListVal.Sum[5]  += BookPrZk.Sum[5];
        tmpListVal.Sum[6]  += BookPrZk.Sum[6];
        tmpListVal.Sum[7]  += BookPrZk.Sum[7];
        tmpListVal.Sum[8]  += BookPrZk.Sum[8];
        tmpListVal.Sum[9]  += BookPrZk.Sum[9];
        tmpListVal.Sum[10] += BookPrZk.Sum[10];
        tmpListVal.Sum[11] += BookPrZk.SumIn[1];
        tmpListVal.Sum[12] += BookPrZk.SumIn[2];
        tmpListVal.Sum[13] += BookPrZk.SumIn[3];
        tmpListVal.Sum[14] += BookPrZk.SumIn[4];
        tmpListVal.Sum[15] += BookPrZk.Sum[23];

        if ((bIsReport2015Bel) and (wTune_MajorPayerBel = 1))
        {
          tmpListKodOp.Sum[1] += BookPrZk.Sum[2];
          tmpListKodOp.Sum[2] += BookPrZk.Sum[5];
        }

        // Для переходной книги (с 2мя ставками НДС: 18% и 20%)
        if (not IsNDS20(BookPrZk.Sum[1], BookPrZk.Sum[2],
                      if (BookPrZk.dOpr = ZeroDate, BookPrZk.dReg, BookPrZk.dOpr)))
        {
          if (bIsPrintSummsWithoutNDS)
            tmpListVal.Sum[16] += BookPrZk.Sum[1];

          if (IsPrintNDS_NA)
            tmpListVal.Sum[17] += BookPrZk.Sum[2];
        }
        else
        {
          if (bIsPrintSummsWithoutNDS)
            tmpListVal.Sum[18] += BookPrZk.Sum[1];

          if (IsPrintNDS_NA)
            tmpListVal.Sum[19] += BookPrZk.Sum[2];

        }

      }
      else
      {
        // Суммы в НДЕ эквиваленте
        // согласно письма от 15.08.2004, суммы без НДС для авансовых не отображаем
        if (bIsPrintSummsWithoutNDS)
        {
          tmpListVal.Sum[1] += BookPrZk.Sum[11];
          tmpListVal.Sum[4] += BookPrZk.Sum[14];
        }

        if ((bIsReport2015Bel) and ((g_KodOpBel = cb_KodOp_NDS_NalOrg) or (g_KodOpBel = cb_KodOp_NDS_TamOrg) or (g_KodOpBel = cb_KodOp_NeverNDS)))
          tmpListVal.Sum[20] += BookPrZk.Sum[12] + BookPrZk.Sum[15];
        else if (IsPrintTotalSum_NA)
            tmpListVal.Sum[20] += BookPrZk.Sum[21];

        if (IsPrintNDS_NA)
          tmpListVal.Sum[2] += BookPrZk.Sum[12];

        tmpListVal.Sum[3]  += BookPrZk.Sum[13];
        tmpListVal.Sum[5]  += BookPrZk.Sum[15];
        tmpListVal.Sum[6]  += BookPrZk.Sum[16];
        tmpListVal.Sum[7]  += BookPrZk.Sum[17];
        tmpListVal.Sum[8]  += BookPrZk.Sum[18];
        tmpListVal.Sum[9]  += BookPrZk.Sum[19];
        tmpListVal.Sum[10] += BookPrZk.Sum[20];
        tmpListVal.Sum[11] += BookPrZk.SumIn[6];
        tmpListVal.Sum[12] += BookPrZk.SumIn[7];
        tmpListVal.Sum[13] += BookPrZk.SumIn[8];
        tmpListVal.Sum[14] += BookPrZk.SumIn[9];
        tmpListVal.Sum[15] += BookPrZk.Sum[28];

        if ((bIsReport2015Bel) and (wTune_MajorPayerBel = 1))
        {
          tmpListKodOp.Sum[1] += BookPrZk.Sum[12];
          tmpListKodOp.Sum[2] += BookPrZk.Sum[15];
        }

        // Для переходной книги (с 2мя ставками НДС: 18% и 20%)
        if (not IsNDS20(BookPrZk.Sum[11], BookPrZk.Sum[12],
                        if (BookPrZk.dOpr = ZeroDate, BookPrZk.dReg, BookPrZk.dOpr)))
        {
          if (bIsPrintSummsWithoutNDS)
            tmpListVal.Sum[16] += BookPrZk.Sum[11];

          if (IsPrintNDS_NA)
            tmpListVal.Sum[17] += BookPrZk.Sum[12];
        }
        else
        {
          if (bIsPrintSummsWithoutNDS)
            tmpListVal.Sum[18] += BookPrZk.Sum[11];

          if (IsPrintNDS_NA)
            tmpListVal.Sum[19] += BookPrZk.Sum[12];
        }
      }
    }

    if ((bIsReport2015Bel) and (wTune_MajorPayerBel = 1))
      Update current tmpListKodOp;

    Insert current tmpBook;

    if (bIsBothBook)
    {
      tmpBook.TypeRec             := prCorrected;
      tmpBook.cCorrected_BookPrZk := cCorrInSameBook;

      Insert current tmpBook;
    }
  } // _loop BookPrZk

  if (bIsBetweenPeriod)
  {
    Update tmpBook where((g_cVal == tmpBook.cVal))
      Set tmpBook.TypeRec := prPred;
  }

  Update current tmpListVal;

  StopVisual;
}

// Преобразование временных таблиц для книги покупок (отличается от книги продаж),
// выводятся только корректируемые СФ - в доп.книге, корректирующие - в основной.
// Лучше эту функцию вынести в отдельную процедуру, чем изменять уже существующий и не простой код.
procedure Transform_tmpBook_Zk;
var
  mrkSpecTmpBook : TPtr;
  i, mrkCount    : LongInt;
  aRec           : Comp;
  lCount         : LongInt;
{
  if (bMainBkZk_WithCorrecting)
  {
    StartNewVisual(vtNumericVisual + vfScreenBottom, vfTimer, 'Подсчет количества записей...', 1);

    lCount := 0;

    _loop tmpBook where((tmpListVal.cVal == tmpBook.cVal    and
                         prMain          == tmpBook.TypeRec and
                         Word(1)         == tmpBook.wCorrZk_Dop))
    {
      NextVisual;
      lCount++;
    }

    StopVisual;

    StartNewVisual(vtIndicatorVisual, vfTimer, 'Обработка спецкорректирующих записей...', lCount);

    // Спецкорректирующие записи входят только в доп.книгу, из основной их нужно удалить
    _loop tmpBook where((tmpListVal.cVal == tmpBook.cVal    and
                         prMain          == tmpBook.TypeRec and
                         Word(1)         == tmpBook.wCorrZk_Dop))
    {
      NextVisual;

      if (GetFirst BookPrZkCorrected where ((tmpBook.cBookPrZk == BookPrZkCorrected.NRec)) = tsOk)
      {
        Minus_Curr_BookPrZkCorrected(cnstDelta_Total_Sums, tmpBook.sKodOp); // Процедура вычитания сумм корректирующих записей
      }
    }

    StopVisual;

    Update current tmpListVal;

    Delete tmpBook where((tmpListVal.cVal == tmpBook.cVal    and
                          prMain          == tmpBook.TypeRec and
                          Word(1)         == tmpBook.wCorrZk_Dop));
  }
  else // Дополнительная книга покупок
  {
    mrkSpecTmpBook := InitMarker('', 8, 100, 10);
    ClearMarker(mrkSpecTmpBook);

    StartNewVisual(vtNumericVisual + vfScreenBottom, vfTimer, 'Подсчет количества записей...', 1);

    lCount := 0;

    _loop tmpBook where ((tmpListVal.cVal == tmpBook.cVal  and
                          prMain          == tmpBook.TypeRec))
    {
      NextVisual;
      lCount++;
    }

    StopVisual;

    StartNewVisual(vtIndicatorVisual, vfTimer, 'Обработка корректирующих записей (этап 1 из 3)...', lCount);

    _loop tmpBook where ((tmpListVal.cVal == tmpBook.cVal  and
                          prMain          == tmpBook.TypeRec))
    {
      NextVisual;

      // Спецкорректирующие записи, которые входят в доп.книгу
      if (tmpBook.wCorrZk_Dop = Word(1))
        Continue;

      // "Забытые" записи, не привязанные к записям регистрации, попадают только в доп.книгу
      if (tmpBook.wNotLink = 1)
        Continue;

      InsertMarker(mrkSpecTmpBook, tmpBook.cBookPrZk);

      // Дублирующие записи не обрабатываю - суммы по ним не входят в общую сумму, они светятся для предупреждения
      if (tmpBook.wDouble = Word(1))
        Continue;

      if (GetFirst BookPrZkCorrected where ((tmpBook.cBookPrZk == BookPrZkCorrected.NRec)) = tsOk)
      {
        Minus_Curr_BookPrZkCorrected(cnstDelta_Total_Sums, tmpBook.sKodOp); // Процедура вычитания сумм корректируемых записей
      }
    }

    StopVisual;

    Update current tmpListVal;

    // Удаление записей
    mrkCount := GetMarkerCount(mrkSpecTmpBook);

    for (i := 0; i < mrkCount; i++)
      if GetMarker(mrkSpecTmpBook, i, aRec)
        Delete tmpBook where ((aRec == tmpBook.cBookPrZk));

    ClearMarker(mrkSpecTmpBook);

    StartNewVisual(vtNumericVisual + vfScreenBottom, vfTimer, 'Подсчет количества записей...', 1);

    lCount := 0;

    _loop tmpBook where ((tmpListVal.cVal == tmpBook.cVal  and
                          prCorrected     == tmpBook.TypeRec))
    {
      NextVisual;
      lCount++;
    }

    StopVisual;

    StartNewVisual(vtIndicatorVisual, vfTimer, 'Обработка спецкорректировок (этап 2 из 3)...', lCount);

    _loop tmpBook where ((tmpListVal.cVal == tmpBook.cVal   and
                          prCorrected     == tmpBook.TypeRec))
    {
      NextVisual;

      // Для корректируемой записи есть спецкорректировка, тогда изменять ничего не надо
      if (GetFirst tmpBook_Corrected
          where ((tmpListVal.cVal             == tmpBook_Corrected.cVal       and
                  prMain                      == tmpBook_Corrected.TypeRec    and
                  tmpBook.cCorrected_BookPrZk == tmpBook_Corrected.cBookPrZk  and
                  Word(1)                     == tmpBook_Corrected.wCorrZk_Dop)) = tsOk)
        Continue;

      InsertMarker(mrkSpecTmpBook, tmpBook.cBookPrZk);
    }

    StopVisual;

    mrkCount := GetMarkerCount(mrkSpecTmpBook);

    for (i := 0; i < mrkCount; i++)
      if GetMarker(mrkSpecTmpBook, i, aRec)
        Update tmpBook where ((aRec == tmpBook.cBookPrZk))
          set tmpBook.TypeRec := prMain;

    StartNewVisual(vtNumericVisual + vfScreenBottom, vfTimer, 'Подсчет количества записей...', 1);

    lCount := 0;

    _loop tmpBook where ((tmpListVal.cVal == tmpBook.cVal))
    {
      NextVisual;
      lCount++;
    }

    StopVisual;

    StartNewVisual(vtIndicatorVisual, vfTimer, 'Обработка промежуточных записей (этап 3 из 3)...', lCount);

    // Книга покупок, промежуточные записи не учитываются
    // (идет корректировка основного периода, что было в других основных периодах - не важно)
    _loop tmpBook where ((tmpListVal.cVal == tmpBook.cVal))
    {
      NextVisual;

      if (tmpBook.TypeRec = prCorrected)
        Continue;

      if not ((g_DateTo_Copy < tmpBook.dReg) and (tmpBook.dReg < g_DateFromDop) and
              (tmpBook.SubTip = cwTotal_TypeBK_Correcting))
        Continue;

      // Спецкорректирующие записи, которые входят в доп.книгу, в начальных и итоговых суммах учитываются
      if (tmpBook.wCorrZk_Dop = Word(1))
        Continue;

      // "Забытые" записи, не привязанные к записям регистрации, попадают только в доп.книгу
      if (tmpBook.wNotLink = 1)
        Continue;

      if (GetFirst BookPrZkCorrected
        where ((tmpBook.cBookPrZk == BookPrZkCorrected.NRec)) = tsOk)
      {
        // Процедура вычитания сумм корректируемых записей
        Minus_Curr_BookPrZkCorrected(cnstDelta_Total_Sums, tmpBook.sKodOp); // Из итоговых сумм по валютам
        Minus_Curr_BookPrZkCorrected(cnstDelta_Begin_Sums, tmpBook.sKodOp); // Из итоговых начальных сумм по валютам для доп.листа
      }
    }

    StopVisual;

    Update current tmpListVal;

    DoneMarker(mrkSpecTmpBook, '');
  }
}

procedure AddStrInMemo(aStrInMemo: String);
{
  var lSizeFile: LongInt;

  FileMemo.OpenMemo(AllMemo.Mem);
  lSizeFile := FileMemo.GetSize;
  FileMemo.Seek(lSizeFile);
  FileMemo.WriteLine(aStrInMemo);
  FileMemo.Close;

  Update current AllMemo;
}

// Вставка строки в мемо-поле (для хранения страны и номера ГТД)
procedure InsStrInMemoAttr(aKol_StrMemo : LongInt; aStrInMemo : String; aTip: Word; aCharSeparator : Char = ',');
{
  set wTypeMemo := aTip;

  if (aKol_StrMemo = 1)
  {
    if (GetFirst AllMemo <> tsOk)
    {
      ClearBuffer(#AllMemo);
      AllMemo.wTable := coBookPrZk;
      AllMemo.cRec   := BookPrZk.Nrec;
      AllMemo.Tip    := aTip;
      Insert Current AllMemo;

      FileMemo.OpenMemo(AllMemo.Mem);
      FileMemo.WriteLine(aStrInMemo);
      FileMemo.Close;

      update Current AllMemo;
    }
  }
  else
  {
    // Вставка в атрибут-мемо следующих строк. mSetAttr не подходит, т.к. стирает предыдущие строки
    if (GetFirst AllMemo <> tsOk)
      Exit;

    if ((Length(aStrInMemo) + 2) > 255)
    {
      FileMemo.OpenMemo(AllMemo.Mem);
      var lSizeFile : longint = FileMemo.GetSize;
      FileMemo.Close;

      if (lSizeFile <> 0)
        AddStrInMemo(aCharSeparator + ' ');

      AddStrInMemo(aStrInMemo);
    }
    else
      AddStrInMemo(aCharSeparator + ' ' + aStrInMemo);
  }
}

procedure AddsTemp(var sRes, sTemp : String; var aKol : LongInt; aTip : Word; aCharSeparator : Char = ',');
{
  if (Length(sRes) + 2 + Length(sTemp) > 255)
  {
    aKol++;

    if (toc = cw_Text)
      InsStrInMemoAttr(aKol, sRes, aTip, aCharSeparator);
    else
      Exit;

    sRes := '';
  }

  sRes += if (Trim(sRes) <> '', aCharSeparator + ' ', '') + sTemp;
}

// Загрузка данных по ГТД для текущей позиции спецификации
procedure LoadGTD_OneSp(IsGTD, IsSvodAkt : Boolean);
var
  iCountry            : MCOriginCountry;
  s1, s2              : String;
  isMC                : Boolean;
  lDefIndex           : LongInt;
  aMC, aSpSopr, aSpSF : Comp;
  wSort1, wSort2      : Word;
{
  // Сводный акт, рассматриваю только накладные.
  // Вариант "исходный документ - акт" не рассматриваю, т.к. выводится только по МЦ
  if ((IsSvodAkt) and (GTD_Svodn.VidSopr <> cgDoc_0101))
    Exit;

  s1 := '';
  s2 := '';
  g_cParty := if (IsSvodAkt, SpSopr_Svodn.cParty,
                if (isGTD, SpSopr.cParty, SpSchF_OtgrSF.cParty));
  isMC     := if (IsSvodAkt, SpSopr_Svodn.PrMC,
                if (isGTD, SpSopr.PrMC, SpSchF_OtgrSF.PrMC)) = 1;

  if (not isMC)
    Exit;

  aMC := if (IsSvodAkt, SpSopr_Svodn.cMCUsl,
           if (isGTD, SpSopr.cMCUsl , SpSchF_OtgrSF.cMCUsl));

  if (GetFirst KatParty = tsOk)
  {
    if (not bZak2014)
      s1 := Trim(iCountry.getCountryName(aMC, KatParty.NRec));

    s2 := Trim(iCountry.getGTDNumber(KatParty.NRec));

    if (s1 <> '' or s2 <> '')
    {
      if (not SearchMarker(mrkKatParty, KatParty.NRec, lDefIndex))
      {
        if (not bZak2014)
          if (GetFirst tmpGTDC where ((s1 == tmpGTDC.sCountry)) <> tsOk)
          {
            ClearBuffer(#tmpGTDC);

            set tmpGTDC.wSortName := ++wSort1;
            set tmpGTDC.sCountry  := s1;

            if (s1 <> '')
              if (GetFirst KatStateGTD where ((s1 == KatStateGTD.Name)) = tsOk)
                set tmpGTDC.sKod := KatStateGTD.KOD;

            Insert current tmpGTDC;
          }

        if (GetFirst tmpGTDN where ((s2 == tmpGTDN.sNum and
                                     s1 == tmpGTDN.sCountry)) <> tsOk)
        {
          ClearBuffer(#tmpGTDN);

          set tmpGTDN.wSortName := ++wSort2;
          set tmpGTDN.sNum      := s2;
          set tmpGTDN.sCountry  := s1;

          Insert current tmpGTDN;
        }

        InsertMarker(mrkKatParty, KatParty.NRec);
      }
    }
  }

  if (s1 = '' and s2 = '')
  {
    aSpSopr := if (IsSvodAkt, SpSopr_Svodn.NRec,
                 if (isGTD, SpSopr.NRec, SpSopr_OtgrSF.NRec));

    if (not bZak2014)
    {
      wCodeCountry := GetClassCode(coSpSopr, sClassCountry);
      s1 := Trim(GetSegName(wCodeCountry, aSpSopr));
    }

    s2 := Trim(sGetAttr(coSpSopr, aSpSopr, sAttrGTD));

    if (s1 = '' and s2 = '')
    {
      aSpSF := SpSchF_OtgrSF.NRec;

      // Для импортированных СФ, страна в атрибутах
      if (not bZak2014)
      {
        var cKatStateGTD : Comp;
        cKatStateGTD := coGetAttr(coSpSchF, aSpSF, sClassCountry);

        if (GetFirst KatStateGTD where ((cKatStateGTD == KatStateGTD.NRec)) = tsOk)
          s1 := KatStateGTD.Name;
        else
        {
          // Для СФ, у которых страна в классификаторе
          wCodeCountry := GetClassCode(coSpSchF, sClassCountry);
          s1           := Trim(GetSegName(wCodeCountry, aSpSF));
        }
      }

      s2 := Trim(sGetAttr(coSpSchF, aSpSF, sAttrGTD));
    }

    if ((s1 <> '') and (not bZak2014))
      if (GetFirst tmpGTDC where ((s1 == tmpGTDC.sCountry)) <> tsOk)
      {
        ClearBuffer(#tmpGTDC);

        set tmpGTDC.wSortName := ++wSort1;
        set tmpGTDC.sCountry  := s1;

        if (s1 <> '')
          if (GetFirst KatStateGTD where ((s1 == KatStateGTD.Name)) = tsOk)
            set tmpGTDC.sKod := KatStateGTD.KOD;

        Insert current tmpGTDC;
      }

    if (s2 <> '')
      if (GetFirst tmpGTDN where ((s2 == tmpGTDN.sNum and
                                   s1 == tmpGTDN.sCountry)) <> tsOk)
      {
        ClearBuffer(#tmpGTDN);

        set tmpGTDN.wSortName := ++wSort2;
        set tmpGTDN.sNum      := s2;
        set tmpGTDN.sCountry  := s1;

        Insert current tmpGTDN;
      }
  }
}

// Добавить номер ГТД во временную таблицу tmpGTDN из мемо- атрибута к СФ
Procedure InsTmpGTDNOfMemo(var _wSort: word; _sNum: string);
{
  if (GetFirst tmpGTDN where ((_sNum == tmpGTDN.sNum)) <> tsOk)
  {
    ClearBuffer(#tmpGTDN);

    tmpGTDN.wSortName := ++_wSort;
    tmpGTDN.sNum      := _sNum;

    Insert current tmpGTDN;
  }
}

// Поиск для записей регистрации ГТД значений кода страны происхождения и номера ГТД.
// if (bZak2014) - законодательство 2014г., выводятся только номера ГТД
procedure LoadGTD;
var
  isGTD, IsSvodAkt, IsGTDMemoSF : Boolean;
{
  gen_NumGTD := '';
  gen_CountryGTD  := '';
  chSeparator_GTD := ',';
  IsGTDMemoSF := false;

  Delete all tmpGTDN;
  Delete all tmpGTDC;

  if (TuneCountry <> ccRus)
    Exit;

  if not ((BookPrZk.SubTip = cwTotal_TypeBK_RegOtgr_ByPlat) or
          (BookPrZk.Subtip = cwTotal_TypeBK_RegGTD) or
          (BookPrZk.Subtip = cwTotal_TypeBK_Correcting) or
          ((BookPrZk.Subtip = cwTotal_TypeBK_RegOtgr) and (g_Direct = cwDirect_Sell)))
    Exit;

  if (BookPrZk.SubTip = cwTotal_TypeBK_Correcting) // Корректирующие записи
  {
    if (not bZak2014)
      gen_CountryGTD := Trim(BookPrZk.ss[2]); // Страна происхождения

    gen_NumGTD := Trim(BookPrZk.ss[3]); // Номер ГТД
  }

  if ((gen_NumGTD = '') and (gen_CountryGTD = ''))
  {
    // Номер ГТД из атрибута к СФ
    // в зависимости от типа атрибута: для строкового - запись в gen_NumGTD, для мемо-поля - в AllMemo и во временную таблицу tmpGTDN
    // (сохранение в AllMemo необходимо для декларации)
    if (GetFirst AttrNam_GTD = tsOk)
    {
      case AttrNam_GTD.AttrType of
        cgAttrType_Str :
          gen_NumGTD := Trim(sGetAttr(coSchFact, Schfact1.NRec, sAttrGTD));
        cgAttrType_Memo:
        {
          var wSort1 : word = 0;
          var sNum1 : string = '';

          if (GetFirst AttrVal_GTD = tsOk)
          {
            FileMemo.OpenMemo(AttrVal_GTD.vLVar);

            while (not FileMemo.EOF)
            {
              var s1 : char;
              FileMemo.Read(s1);

              if (s1 = ' ')
                Continue;

              if (s1 = ',') or (s1 = ';')
              {
                if (sNum1 <> '')
                InsTmpGTDNOfMemo(wSort1, sNum1);

                chSeparator_GTD := s1; // чтобы сохранить введенный в атрибут разделитель
                sNum1 := '';
              }
              else
                sNum1 := sNum1 + s1;
            }

            if (Trim(sNum1) != '')
            {
              InsTmpGTDNOfMemo(wSort1, sNum1);
              sNum1 := '';
              IsGTDMemoSF := true;
            }

            FileMemo.Close;
         }
       }
      end;
    }

    if (not bZak2014)
    {
      wCodeCountry   := GetClassCode(coSchFact, sClassCountry);
      gen_CountryGTD := Trim(GetSegName(wCodeCountry, Schfact1.NRec));

      if (bIsNewBook and gen_CountryGTD <> '')
        if (GetFirst KatStateGTD where ((gen_CountryGTD == KatStateGTD.Name)) = tsOk)
          gen_CountryGTD := KatStateGTD.KOD;
    }
  }

  if ((gen_NumGTD = '') and (not IsGTDMemoSF) and (gen_CountryGTD = ''))
  {
    // Страна происхождения товара
    ClearMarker(mrkKatParty);

    isGTD := (BookPrZk.SubTip  = cwTotal_TypeBK_RegGTD);
    IsSvodAkt := False;

    // Проверка, является ли налоговый акт сводным.
    // Для него отдельные подцепки, т.к. в одной ссылке не может быть несколько указателей на исходные документы
    if (isGTD and (GetFirst GTD = tsOk))
      IsSvodAkt := (GTD.cKatSopr = 0);

    if (IsSvodAkt)
    {
      if (GetFirst GTD = tsOk)
      {
        _loop GTD_Svodn
          _loop SpSopr_Svodn
            LoadGTD_OneSp(IsGTD, IsSvodAkt);
      }
    }
    else
    {
      if (isGTD)
      {
        if (GetFirst GTD = tsOk)
          _loop SpSopr
            LoadGTD_OneSp(IsGTD, IsSvodAkt);
      }
      else
      {
        if (GetFirst SchFact1 = tsOk)
          _loop SpSchF_OtgrSF
            LoadGTD_OneSp(IsGTD, IsSvodAkt);
      }
    }
  }
  else
  {
    if (bIsNewBook and (gen_CountryGTD <> ''))
      if (GetFirst KatStateGTD where ((gen_CountryGTD == KatStateGTD.Name)) = tsOk)
        gen_CountryGTD := KatStateGTD.KOD;
  }
}

procedure LoadTNVED_OneSp(var _Npp: word);
{
  if (SpSchf_OtgrSF.PrMC <> 1)
    Exit;

  if (GetFirst KatMC_TNVED where ((SpSchF_OtgrSF.cMCUSL == KatMC_TNVED.nRec)) <> tsOk)
    Exit;

  var _TNVED : string = Trim(KatMC_TNVED.TNVED);

  if (_TNVED <> '')
    if (GetFirst tmpTNVED where ((_TNVED == tmpTNVED.sCode)) <> tsOk)
    {
      _Npp++;

      ClearBuffer(#tmpTNVED);
      set tmpTNVED.Npp   := _Npp;
      set tmpTNVED.sCode := _TNVED;
      insert current tmpTNVED;
    }
}

// Поиск кодов ТНВЭД
procedure LoadTNVED(_Org: comp);
var i : Word;
{
  Delete all tmpTNVED;

  if (not ((TuneCountry = ccRus) and (g_Direct = cwDirect_Sell)))
    Exit;

  if (GetFirst KatOrg_TNVED where ((_Org == KatOrg_TNVED.nRec)) <> tsOk)
    Exit;

  if (GetFirst KatState_TNVED where ((KatOrg_TNVED.cState == KatState_TNVED.nRec)) <> tsOk)
    Exit;

  var _StateKod : String = (Trim(KatState_TNVED.Kod));

  if (not (_StateKod = sKod_Bel or _StateKod = sKod_Kaz  or
           _StateKod = sKod_Arm or _StateKod = sKod_Arm_ or
           _StateKod = sKod_Kgz))
    Exit;

  i := 0;

  if (GetFirst SchFact1 = tsOk)
    _loop SpSchF_OtgrSF
      LoadTNVED_OneSp(i);
}

// Дата оплаты. Поиск одной, авансовой, максимальной даты оплаты.
procedure SetDateOpl;
var
  _dOpr           : Date;
  iKolPlat        : Integer;
  bIsOplFromAvans : Boolean;
{
  gen_DateOpl := ZeroDate;
  _dOpr       := BookPrZk.dOpr;
  iKolPlat    := 0;

  // Корректирующая запись без привязки к корректируемой записи
  // Если дата оплаты не задана, то берется из авансового СФ, если есть.
  gen_DOplRes     := BookPrZk.dOpl;  // Дата оплаты записи регистрации
  bIsOplFromAvans := False;

  if ((BookPrZk.SubTip = cwTotal_TypeBK_Correcting) and (BookPrZk.cSchFactR = Comp(0)) and
      (gen_DOplRes = ZeroDate))
  {
    // Только по авансовому СФ
    if (SchFact2.SubTip = cwTotal_TypeSF_Avans)
    {
      gen_DOplRes     := SchFact2.dFact;
      bIsOplFromAvans := True;
    }
  }

  //для СФ налогового агента дата оплаты проставляется по сопрхозу
  if ((Is_NalAgent(SchFact1.TipUser)) and (gen_DOplRes = ZeroDate))
    if (GetFirst SoprHoz_NA where ((SchFact1.cSoprHoz == SoprHoz_NA.Nrec)) = tsOk)
      gen_DOplRes := SoprHoz_NA.DatOb;

  if (gen_DOplRes <> ZeroDate)
  {
    if (((gen_DOplRes <= _dOpr) or (_dOpr = ZeroDate) or bIsOplFromAvans or bIsNewBook) and
        (gen_DOplRes <= g_DateTo)) // дата оплаты не из будущих периодов
      gen_DateOpl := gen_DOplRes;
  }
  else
  {
    // Если есть авансовый СФ, дата оплаты отгрузки = дата оплаты аванса
    if (BookprZk.TipUser = cwTypeBK_Buy_OtgrRegistr) or (BookPrZk.TipUser = cwTypeBK_Sell_OtgrRegistr)
    {
      _loop BkNum where ((BookPrZk.cSchFact == BkNum.cSchFact))
        if (BkNum.cSchFactS <> 0)
        {
          //если записей с привязкой платежных СФ больше 1, то дату оплаты ищем только по распределению
          if (++iKolPlat > 1)
          {
            gen_DateOpl := ZeroDate;
            Break;
          }

          if (((BkNum.dOpl <= _dOpr   ) or bIsNewBook) and (gen_DateOpl < BkNum.dOpl) and
               (BkNum.dOpl <= g_DateTo)) // дата оплаты не из будущих периодов
            gen_DateOpl := BkNum.dOpl;
        }
    }

    // Если есть разноска платежа, поиск платежных документов по ДО отгрузочного счета-фактуры
    if (gen_DateOpl = ZeroDate)
    {
      if (GetFirst SchFact_Opl <> tsOk)
        Exit;

      if ((SchFact_Opl.SubTip <> cwTotal_TypeSF_Otgr) or (SchFact_Opl.cStepDoc = Comp(0)))
        Exit;

      _loop KatSopr_Opl
        _loop SpSopr_Opl
          _loop SpSopHoz_Opl
            if (GetFirst BaseFin_Opl = tsOk)
              if ((BaseFin_Opl.dDoc <> ZeroDate) and ((BaseFin_Opl.dDoc <= _dOpr) or bIsNewBook) and (gen_DateOpl < BaseFin_Opl.dDoc) and
                  (BaseFin_Opl.dDoc <= g_DateTo)) // дата оплаты не из будущих периодов
                gen_DateOpl := BaseFin_Opl.dDoc;
    }
  }
}

// Проверка, должна ли печататься оплата для текущей записи регистрации
function IsPrintDateNumOpl : Boolean;
{
  Result := False;

  // Для регистрация аванса в момент отгрузки платежи НЕ печатаются
  case wGetTune('Nalog.Rus.PrintSF.PrintOplata_AvInMomOtgr_Ex') of
   0: if (Is_MinusAvans_BK(BookPrZk.TipUser)) Exit;
   2: if (Is_RegAvansInMomentOtgr(BookPrZk.TipUser)) Exit;
   3: if (Is_RegVozvrAvans(BookPrZk.TipUser)) Exit;
  end;

  Result := True;
}

// Должна всегда печататься оплата для текущей записи регистрации,
// вне зависимости от настройки "Печать информации об оплате, книга покупок/продаж".
// Передаю этот признак в функцию поиска оплаты FindPlatNo_Date.
function IsAlwaysPrintOpl : Boolean;
{
  Result := False;

  // Вариант: для регистрация аванса в момент отгрузки платежи всегда печатаются
  case wGetTune('Nalog.Rus.PrintSF.PrintOplata_AvInMomOtgr_Ex') of
    1: Result := Is_MinusAvans_BK(BookPrZk.TipUser);
    2: Result := Is_RegVozvrAvans(BookPrZk.TipUser);
    3: Result := Is_RegAvansInMomentOtgr(BookPrZk.TipUser);
  end;
}

// Функции для корректного переноса данных в декларацию НДС
procedure InitForDeklar;
{
  Delete all tmpInfoPlat;
}

procedure InsertForDeklar(aNum : String; aDate : Date);
{
  Insert tmpInfoPlat Set tmpInfoPlat.cRec    := 0,
                         tmpInfoPlat.DateDoc := aDate,
                         tmpInfoPlat.NoDoc   := aNum;
}

// Печатает строку с информацией о всех авансовых платежах - номера и даты.
// возвращает 0 - все ок, разобрались
//            1 - для кода 23 надо печатать гр.3, номер и дату СФ, а не оплату
function SetManyDateNumOpl(IsExcel : Boolean) : Word;
var
  aSF : Comp;
  bInitInfoPl, bIspr, bFlag : Boolean;
  sResult, sTmp : String;
  aRes          : Word;
{
  Result := 0;
  InitForDeklar;

  // Для некоторых записей оплата не печатается
  if (not IsPrintDateNumOpl)
  {
    if (not IsExcel)
      frmBkPrZkF.SkipFormat(1);

    Exit;
  }

  // Специально для тех клиентов, которые используют левые алгоритмы, а потом возмущаются, почему я не могу им платежный документ найти.
  // Информация об оплате задается во внешнем атрибуте записи регистрации, не СФ.
  sResult := Trim(sGetAttr(coBookPrZk, BookPrZk.NRec, csAttrNumDateOpl));  // Именно для записи регистрации, не СФ.

  if (sResult <> '')
  {
    if (IsExcel)
      pXL.SetTblStringFldValue('ДатаОпл', sResult)
    else
      frmBkPrZkF.Write(sResult);

    InsertForDeklar(sResult, ZeroDate);

    Exit;
  }

  aSF   := 0;
  bIspr := False;

  if ((BookPrZk.SubTip <> cwTotal_TypeBK_RegAvans) and (BookPrZk.SubTip <> cwTotal_TypeBK_AvansInMomentOtgr))
    if (IsValid(tnSchFact1))
    {
      aSF   := SchFact1.NRec;
      bIspr := Is_IsprSF(SchFact1.TipUser, SchFact1.Flags);
    }

  if (aSF = 0)
    if (IsValid(tnSchFact2))
    {
      aSF   := SchFact2.NRec;
      bIspr := Is_IsprSF(SchFact2.TipUser, SchFact2.Flags);
    }

  bInitInfoPl := False;
  aRes := 0;

  if (BookPrZk.Subtip = cwTotal_TypeBK_RegGTD)
  {
    if (iInfoPl.InitBK(BookPrZk.NRec))
    {
      iInfoPl.FindPlatNo_DateBK;
      bInitInfoPl := True;
    }
  }
  else
    if (iInfoPl.Init(aSF))
    {
      aRes := iInfoPl.FindPlatNo_Date(BookPrZk.Direct, tmpBook.sKodOp, IsAlwaysPrintOpl);
      bInitInfoPl := True;

      if (bIspr)
        if (GetFirst tmpInfoPlat <> tsOk)
        {
          // если платежи не найдены,
          // то информацию для СФ исправлением тянем из исходной СФ
          aSF  := iSrcIspr.GetSFSrc(aSF);

          if (iInfoPl.Init(aSF))
            aRes := iInfoPl.FindPlatNo_Date(BookPrZk.Direct, tmpBook.sKodOp, IsAlwaysPrintOpl);
        }
    }

  if (not bInitInfoPl)
  {
    if (not IsExcel)
      frmBkPrZkF.SkipFormat(1);

    Exit;
  }

  // Печать оплаты = по вн.атрибуту "Номер и дата оплаты НДС",по плат.кодам, для кода 23 - из графы 3
  if (bIsPrintOpl_23) and (aRes <> 1) // не внешний атрибут
  {
    if (IsExcel)
      pXL.SetTblStringFldValue('ДатаОпл', DatNomSF);
    else
      frmBkPrZkF.SkipFormat(1);  // В самой форме дублирую поля, передаю в форму только признак, что надо это сделать.

    InitForDeklar;
    InsertForDeklar(if (ZeroPrint, gen_NumSF, LTrim(Trim(gen_NumSF), '0')), gen_DateFact);

    Result := 1;
    Exit;
  }

  bFlag := False;

  _loop tmpInfoPlat
  {
    sTmp := if (bFlag, ', ', '') +
            if (ZeroPrint, tmpInfoPlat.NoDoc, LTrim(Trim(tmpInfoPlat.NoDoc), '0')) +
            if (tmpInfoPlat.DateDoc <> ZeroDate, ' ' + DateToStr(tmpInfoPlat.DateDoc, dtFormat), '');

    if (not IsExcel)
      sResult += sTmp;
    else
      if (bFlag)
        pXL.AddTblStringFldValue('ДатаОпл', sTmp);
      else
        pXL.SetTblStringFldValue('ДатаОпл', sTmp);

    bFlag := True;
  }

  if (not IsExcel)
    frmBkPrZkF.Write(sResult);
}

// Добавление даты, не пустой
function AddNode_DateFull_XML(_ref : Comp; aName : String; aDate : Date) : Comp;
{
  Result := 0;

  if (aDate <> ZeroDate)
    Result := AddNode(_ref, aName, Dat(aDate));
}

function AddNode_DateTime_XML(_ref : Comp; aName : String; aDate : Date; aTime : Time) : Comp;
{
  Result := 0;

  if (aDate <> ZeroDate)
    Result := AddNode(_ref, aName, DateToStr(aDate, 'YYYY-MM-DD') + '-' + TimeToStr(aTime, 'HH:MM'));
}

procedure SetDateOplXML(_ref: Comp);
var
  _dOpr, _dOplRes : Date;
  refDataOpl      : Comp;
  iKolPlat        : Integer;
  bIsOplFromAvans, bIsExistDOpl : Boolean;
{
//  gen_DateOpl := ZeroDate;
  _dOpr := BookPrZk.dOpr;
  iKolPlat := 0;
  bIsExistDOpl := False;

  // Корректирующая запись без привязки к корректируемой записи
  // Если дата оплаты не задана, то берется из авансового СФ, если есть.
  _dOplRes := BookPrZk.dOpl;
  bIsOplFromAvans := False;

  if ((BookPrZk.SubTip = cwTotal_TypeBK_Correcting) and (BookPrZk.cSchFactR = Comp(0)) and
      (_dOplRes = ZeroDate))
  {
    // Только по авансовому СФ
    if (SchFact2.SubTip = cwTotal_TypeSF_Avans)
    {
      _dOplRes := SchFact2.dFact;
      bIsOplFromAvans := True;
    }
  }

  //для СФ налогового агента дата оплаты проставляется по сопрхозу
  if ((Is_NalAgent(SchFact1.TipUser)) and (_dOplRes = ZeroDate))
    if (GetFirst SoprHoz_NA where ((SchFact1.cSoprHoz == SoprHoz_NA.Nrec)) = tsOk)
      _dOplRes := SoprHoz_NA.DatOb;

  if (_dOplRes <> ZeroDate)
  {
    if (((_dOplRes <= _dOpr) or (_dOpr = ZeroDate) or bIsOplFromAvans or bIsNewBook) and
        (_dOplRes <= g_DateTo)) // дата оплаты не из будущих периодов
    {
      refDataOpl   := AddNode_DateFull_XML(_ref, 'ДатаОплСчФПрод', _dOplRes);
      bIsExistDOpl := True;
    }
  }
  else
  {
    //Если есть авансовый СФ, дата оплаты отгрузки = дата оплаты аванса
    if (BookprZk.TipUser = cwTypeBK_Buy_OtgrRegistr) or (BookPrZk.TipUser = cwTypeBK_Sell_OtgrRegistr)
    {
      _loop BkNum where ((BookPrZk.cSchFact == BkNum.cSchFact))
        if (BkNum.cSchFactS <> 0)
        {
          //если записей с привязкой платежных СФ больше 1, то дату оплаты ищем только по распределению
          if (++iKolPlat > 1)
          {
            _dOplRes := ZeroDate;
            Break;
          }

          if (((BkNum.dOpl <= _dOpr   ) or bIsNewBook) and (_dOplRes < BkNum.dOpl) and
               (BkNum.dOpl <= g_DateTo)) // дата оплаты не из будущих периодов
            _dOplRes := BkNum.dOpl;
        }
    }

    // Если есть разноска платежа, поиск платежных документов по ДО отгрузочного счета-фактуры
    if (_dOplRes = ZeroDate)
    {
      if (GetFirst SchFact_Opl = tsOk)
        if ((SchFact_Opl.SubTip = cwTotal_TypeSF_Otgr) and (SchFact_Opl.cStepDoc <> Comp(0)))
          _loop KatSopr_Opl
            _loop SpSopr_Opl
              _loop SpSopHoz_Opl
                if (GetFirst BaseFin_Opl = tsOk)
                  if (((BaseFin_Opl.dDoc <> ZeroDate) and ((BaseFin_Opl.dDoc <= _dOpr) or bIsNewBook)) and
                       (BaseFin_Opl.dDoc <= g_DateTo)) // дата оплаты не из будущих периодов
                  {
                    refDataOpl   := AddNode_DateFull_XML(_ref, 'ДатаОплСчФПрод', BaseFin_Opl.dDoc);
                    bIsExistDOpl := True;
                  }
    }
    else
    {
      refDataOpl   := AddNode_DateFull_XML(_ref, 'ДатаОплСчФПрод', _dOplRes);
      bIsExistDOpl := True;
    }
  }

  if (not bIsExistDOpl)
    refDataOpl := AddNode_DateFull_XML(_ref, 'ДатаОплСчФПрод', _dOplRes);
}

function GetDate_NumOplXMLBel(var sNumOpl : String) : Date;
{
  Result := ZeroDate;

  if (g_KodOpBel <> cb_KodOp_NDS_TamOrg)
  {
    if (g_KodOpBel = cb_KodOp_NeverNDS)
    {
      if IsValid(tnSchFact1)
      {
        if (SchFact1.cStepDoc <> Comp(0))
        {
          set cStepDoc_BaseFin := SchFact1.cStepDoc;

          if (GetFirst BaseFin_OtgrGTD = tsOk) // индекс по дате
            if (GetFirst PlPor_SFNalAkt = tsOk)
            {
              Result := PlPor_SFNalAkt.DatOb;
              sNumOpl := if (trim(PlPor_SFNalAkt.NoDOK)= '', '', ' №' + PlPor_SFNalAkt.NoDOK)
            }
        }
      }
      else
      {
        var dOplRKO     : Date    = ZeroDate;
        var sNumOplRKO2 : String  = '';

        sNumOpl := if (IsValid(tnSchFact2), if (ZeroPrint, SchFact2.Num, Ltrim(Trim(SchFact2.Num), '0')), '');

        if (GetFirst SoprHoz = tsOk)
          if (GetFirst PlPor_RKO = tsOk)
          {
            dOplRKO     := PlPor_RKO.DatOb;
            sNumOplRKO2 := PlPor_RKO.NoDok;
          }

        Result  := if (dOplRKO <> ZeroDate, dOplRKO, BookPrZk.dOpl);
        sNumOpl := if (Trim(strNumRKO2) <> '', '№ ' + sNumOplRKO2, if (sNumOpl = '', '', '№ ' + sNumOpl));
      }
    }
    else
    {
      if (IsValid(tnSchFact1))
      {
        Result  := KatSopr_OtgrSF.dSopr;
        sNumOpl := KatSopr_OtgrSF.NSopr;
      }
    }

    sNumOpl := if (ZeroPrint, sNumOpl, LTrim(Trim(sNumOpl), '0'));
  }
}

function GetDate_NumOplNDSBel(var sNumOplNDS : String) : Date;
{
  Result := ZeroDate;

  sNumOplNDS := Trim(sGetAttr(coBookPrZk, BookPrZk.NRec, csAttrNumDateOpl));

  if (sNumOplNDS <> '')
  {
    sNumOplNDS := if (toc = cw_XML, '', sNumOplNDS);

    Exit;
  }

  if (g_KodOpBel = cb_KodOp_NDS_TamOrg)
  {
    if (NalAkt.cStepDoc <> Comp(0))
    {
      set cStepDoc_BaseFin := NalAkt.cStepDoc;

      if (GetFirst BaseFin_OtgrGTD = tsOk) // индекс по дате
        if (GetFirst PlPor_SFNalAkt = tsOk)
        {
          Result := PlPor_SFNalAkt.DatOb;
          sNumOplNDS := if (trim(PlPor_SFNalAkt.NoDOK)= '', '', '№' + PlPor_SFNalAkt.NoDOK)
        }
    }
  }
  else
    if (g_KodOpBel <> cb_KodOp_NeverNDS)
    {
      if IsValid(tnSchFact1)
      {
        if (SchFact1.cStepDoc <> Comp(0))
        {
          set cStepDoc_BaseFin := SchFact1.cStepDoc;

          if (GetFirst BaseFin_OtgrGTD = tsOk) // индекс по дате
            if (GetFirst PlPor_SFNalAkt = tsOk)
            {
              Result := if (PlPor_SFNalAkt.DatOb = ZeroDate, ZeroDate, PlPor_SFNalAkt.DatOb);
              sNumOplNDS := if (trim(PlPor_SFNalAkt.NoDOK)= '', '', '№' + PlPor_SFNalAkt.NoDOK);
            }
        }
      }
      else
      {
        var dOplRKO     : Date   = ZeroDate;
        var sNumOplRKO2 : String = '';

        sNumOplNDS := if (IsValid(tnSchFact2), if (ZeroPrint, SchFact2.Num, Ltrim(Trim(SchFact2.Num), '0')), '');

        if (GetFirst SoprHoz = tsOk)
          if (GetFirst PlPor_RKO = tsOk)
          {
            dOplRKO     := PlPor_RKO.DatOb;
            sNumOplRKO2 := PlPor_RKO.NoDok;
          }

        Result := if (dOplRKO <> ZeroDate, dOplRKO, BookPrZk.dOpl);
        sNumOplNDS := if (Trim(strNumRKO2) <> '', '№ ' + sNumOplRKO2, if (sNumOplNDS = '', '', '№ ' + sNumOplNDS));
      }
    }

  sNumOplNDS := if (ZeroPrint, sNumOplNDS, LTrim(Trim(sNumOplNDS), '0'));
}

function GetDateOplNDSXMLBel : Date;
{
  Result := ZeroDate;

  case g_KodOpBel of

    cb_KodOp_NDS_NalOrg :
      Result := SchFact1.DS[2];

    cb_KodOp_NDS_TamOrg :
      Result := NalAkt.DSopr ;

    cb_KodOp_NeverNDS :
    {
      var bMonth, bDay : Byte;
      var wYear : Word;

      if (BookPrZk.dOpl <> ZeroDate)
      {
        wYear  := Year(BookPrZk.dOpl);
        bMonth := Month(BookPrZk.dOpl);
        bDay   := 22;

        Result:= Date(bDay, bMonth, wYear);
      }
    }

  end;
}

function GetDateCorrPeriod : Date;
{
  Result := ZeroDate;

  if ((BookPrZk.SubTip = cwTotal_TypeBK_Correcting) and (IsValid(tnBookPrZk_CorrNew)))
    Result := BookPrZk_CorrNew.dReg;
}

function GetKvartal (wMonth : Word) : LongInt;
{
  Result := 0;

  if (wMonth mod 3) <> 0
    Result := (wMonth div 3) + 1;
  else
    Result := (wMonth div 3);
}

// Загрузка в tmpGTD_ForPrint номеров ГТД по конкретной стране aCountry
procedure LoadNumGTD_ByCountry(aCountry : String; var aNpp : Word);
var
  Str : String;
{
  _loop tmpGTDN where ((aCountry == tmpGTDN.sCountry))
  {
    Str := if (bZak2014, '', aCountry + if (aCountry <> '', ', ', '')); // 4 кв.. 2014г. - страна не печатается
    Str += tmpGTDN.sNum;

    Insert tmpGTD_ForPrint Set tmpGTD_ForPrint.Npp  := ++aNpp,
                               tmpGTD_ForPrint.Name := Str;

    aCountry := '';
  }
}

// Информация о ГТД из 2-х таблиц tmpGTDC и tmpGTDN переносится в tmpGTD_ForPrint в виде, пригодном для печати без доп. проверок
procedure LoadTmpGTD_ForPrint(aKolRec_Num, aKolRec_Country : LongInt);
var
  aCountry : String;
  i : Word;
{
  Delete all tmpGTD_ForPrint;

  if ((aKolRec_Num <= 0) and (aKolRec_Country <= 0))
    Exit;

  i := 0;

  if (aKolRec_Num > 0 and aKolRec_Country > 0) // Обе таблицы заполнены
  {
    aCountry := '';
    i := 0;

    _loop tmpGTDC
    {
      aCountry := if (bIsNewBook, tmpGTDC.sKod, tmpGTDC.sCountry);
      LoadNumGTD_ByCountry(tmpGTDC.sCountry, i);
    }

    LoadNumGTD_ByCountry('', i);  // Страна не задана
    Exit;
  }

  if (aKolRec_Num > 0 and aKolRec_Country <= 0) // есть только номера ГТД
  {
    LoadNumGTD_ByCountry('', i);
    Exit;
  }

  if (aKolRec_Num <= 0 and aKolRec_Country > 0) // есть только страны происхождения
  {
    _loop tmpGTDC
    {
      aCountry := if (bIsNewBook, tmpGTDC.sKod, tmpGTDC.sCountry);
      Insert tmpGTD_ForPrint Set tmpGTD_ForPrint.Npp  := ++i,
                                 tmpGTD_ForPrint.Name := aCountry;
    }

    Exit;
  }
}

procedure PrintFieldOfMemo(var _Str: string; _KolRow: longint; _Type: word; aCharSeparator : Char = ',');
{
  set wTypeMemo := _Type;

  if (_KolRow > 0)
  {
    _KolRow++;
    InsStrInMemoAttr(_KolRow, _Str, _Type, aCharSeparator);
    _Str := '';
  }

  if (_KolRow > 0)
  {
    if (GetFirst AllMemo = tsOk)
      frmBkPrZkF.Write(AllMemo.Mem)
    else
      frmBkPrZkF.Write(if (g_isPrintDash, '-', ''));
  }
  else
  {
    if (_Str = '')
      frmBkPrZkF.Write(if (g_isPrintDash, '-', ''));
    else
      frmBkPrZkF.Write(_Str);
  }
}

procedure PrintGTD;
var
  lKolRec_Num, lKolRec_Country, lKolRow : LongInt;
{
  lKolRec_Num     := RecordsInTable(tntmpGTDN);
  lKolRec_Country := if (bZak2014, 0, RecordsInTable(tntmpGTDC));

  if (lKolRec_Num > 0 or lKolRec_Country > 0) // Информация о ГТД из временных таблиц
  {
    LoadTmpGTD_ForPrint(lKolRec_Num, lKolRec_Country);

    lKolRow := 0;
    cNPrintNoteBook++;

    _loop tmpGTD_ForPrint
    {
      if (toc = cw_Text)
        AddsTemp(gen_CountryGTD, tmpGTD_ForPrint.Name, lKolRow, 1);

      if (toc = cw_Excel)
      {
        lKolRow++;

        if (lKolRow > 1)
          pXL.ClearTblBuffer;

        pXL.SetTblStringFldValue('СтранаГТД'  , tmpGTD_ForPrint.Name);
        pXL.SetTblStringFldValue('Пор_ном_ГТД', String(cNPrintNoteBook));

        pXL.InsTblRow;
      }
    }

    if (toc = cw_Text)
    {
      PrintFieldOfMemo(gen_CountryGTD, lKolRow, 1, chSeparator_GTD);
      frmBkPrZkF.SkipFormat(1);
    }

    // Ситуация маловероятная, но пусть будет. Если не были в _loop'е, то заполненная строка в Excel не будет внесена.
    if ((lKolRow = 0) and (toc = cw_Excel))
      pXL.InsTblRow;
  }
  else
  {
    if (gen_CountryGTD = '') and (gen_NumGTD = '')
    {
      if  (toc = cw_Text)
      {
        frmBkPrZkF.Write(if (g_isPrintDash, '-', ''));
        frmBkPrZkF.SkipFormat(1);
      }

      if  (toc = cw_Excel)
        pXL.SetTblStringFldValue('СтранаГТД', '');
    }
    else
    {
      if (not bZak2014)
      {
        if (gen_CountryGTD <> '')
        {
          if (toc = cw_Text)
            frmBkPrZkF.Write(gen_CountryGTD);

          if (toc = cw_Excel)
            pXL.SetTblStringFldValue('СтранаГТД', gen_CountryGTD);
        }
        else
          frmBkPrZkF.Write(if (g_isPrintDash, '-', ''));
      }

      if (gen_NumGTD <> '')
      {
        if (toc = cw_Text)
          frmBkPrZkF.Write(gen_NumGTD);

        if (toc = cw_Excel)
        {
          if ((not bZak2014) and (gen_CountryGTD <> ''))
          {
            pXL.InsTblRow;
            pXL.ClearTblBuffer;
          }

          pXL.SetTblStringFldValue('СтранаГТД', gen_NumGTD);
        }
      }
      else
        if (toc = cw_Text)
          if (not bZak2014)
            frmBkPrZkF.SkipFormat(1);
          else
            frmBkPrZkF.Write(if (g_isPrintDash, '-', ''));

      if (bZak2014)
        frmBkPrZkF.SkipFormat(1);

    }

    if (toc = cw_Excel)
     pXL.InsTblRow;
  }
}

// Печать информации о ГТД и ТНВЭД для XLS для книги продаж с 2017 (совместная, чтобы не добавлялись лишние доп.строки)
procedure PrintGTDAndTNVED_XL;
var
  lKolRec_NumGTD, lKolRec_TNVED, lKolRec, lKolRow, lKolRowGTD, lKolRowTNVED, i : LongInt;
  sTNVED   : String;
  bNeedGTD : Boolean;
{
  bNeedGTD := NeedGTD_From2017; // чтобы не пересчитывать поле при каждом обращении

  lKolRec_NumGTD := if (bNeedGTD, RecordsInTable(tntmpGTDN), 0);
  if (lKolRec_NumGTD > 0)
  {
    LoadTmpGTD_ForPrint(lKolRec_NumGTD, 0);
    lKolRec_NumGTD := RecordsInTable(tntmpGTD_ForPrint);
  }
  else
    Delete all tmpGTD_ForPrint;

  lKolRec_TNVED  := RecordsInTable(tntmpTNVED);

  lKolRec := if (lKolRec_NumGTD >= lKolRec_TNVED, lKolRec_NumGTD, lKolRec_TNVED);
  sTNVED  := '';

  if (lKolRec_NumGTD > 0 or lKolRec_TNVED > 0) // Информация о ГТД из временных таблиц
  {
    lKolRow := lKolRowGTD := lKolRowTNVED := 0;
    cNPrintNoteBook++;

    for (i := 1; i <= lKolRec; i++)
    {
      lKolRow++;

      if (lKolRow > 1)
        pXL.ClearTblBuffer;

      pXL.SetTblStringFldValue('Пор_ном_ГТД', String(cNPrintNoteBook)); // общее значение для ГТД и ТНВЭД

      if (GetFirst tmpGTD_ForPrint where ((word(i) == tmpGTD_ForPrint.Npp)) = tsOk)
        pXL.SetTblStringFldValue('СтранаГТД', tmpGTD_ForPrint.Name + if (i < lKolRec_NumGTD, chSeparator_GTD, ''));
      else
        pXL.SetTblStringFldValue('СтранаГТД', '');

      if (GetFirst tmpTNVED where ((word(i) == tmpTNVED.Npp)) = tsOk)
        pXL.SetTblStringFldValue('КодТНВЭД', tmpTNVED.sCode + if (i < lKolRec_TNVED, ';', ''));
      else
        pXL.SetTblStringFldValue('КодТНВЭД', '');

      pXL.InsTblRow;
    }

    // Ситуация маловероятная, но пусть будет. Если не были в цикле, то заполненная строка в Excel не будет внесена.
    if (lKolRow = 0)
      pXL.InsTblRow;
  }
  else // дополнительно для ГТД
  {
    if (bNeedGTD)
    {
      if (gen_CountryGTD = '') and (gen_NumGTD = '')
        pXL.SetTblStringFldValue('СтранаГТД', '');
      else
        if (gen_NumGTD <> '') //выводится только номер, т.к. применяется только с 2017
          pXL.SetTblStringFldValue('СтранаГТД', gen_NumGTD);
    }
    else
      pXL.SetTblStringFldValue('СтранаГТД', '');

    pXL.SetTblStringFldValue('КодТНВЭД', '');
    pXL.InsTblRow;
  }
}

procedure PrintTNVED_FCom;
var
  lKolRec, lKolRow: longint;
  sTNVED: string;
{
  lKolRec := RecordsInTable(tntmpTNVED);
  sTNVED  := '';

  if (lKolRec > 0)
  {
    lKolRow := 0;

    _loop tmpTNVED
      AddsTemp(sTNVED, tmpTNVED.sCode, lKolRow, 2, ';');

    PrintFieldOfMemo(sTNVED, lKolRow, 2, ';');
  }
  else
    frmBkPrZkF.Write(if (g_isPrintDash, '-', ''));
}

Function GetSumCorrBK_ByTune(aSummaBK, aSummaSF: double; IsSameDirect, IsDopRecNDSNA, aIsNDEEq: boolean): double;
var
  aSummaSP, aSum: double;
{
  Result := aSummaSF;

  aSummaSP := aSum := 0.0;

  //доп.проверка, если запись не является корректировочной, то выводим сумму по СФ
  if (not Is_CorrV_BK(BookPrZk.TipUser))
    Exit;

  _loop SpSchF_OtgrSF
  {
    aSummaSP := if ((SchFact1.cVal = Comp(0)) or aIsNDEEq, SpSchF_OtgrSF.SumAll, SpSchF_OtgrSF.VSumAll);

    if (IsDopRecNDSNA)
      aSummaSP := aSummaSP * (doTune_Stav1_calc / 100 + 1);

    if (aSummaSP < 0)
    {
      if (not IsSameDirect)
        aSum += aSummaSP;
    }
    else
      if (IsSameDirect)
        aSum += aSummaSP;
  }

  Result := aSum;
}

// Книги с 2014г., сумма может печататься по записи или СФ
function GetSum_ByTune(aSummBK : Double; aIsNDEEq : Boolean = False) : Double;
{
  Result := aSummBK;

  if (not bZak2014)
    Exit;

  // Печатать сумму по записи регистрации, в суммах они уже занесены, дальше не иду
  if (((g_Direct = cwDirect_Buy)  and (wGetTune('Nalog.Rus.PrintSF.PrintSumma') = 0)) or
      ((g_Direct = cwDirect_Sell) and (wGetTune('Nalog.Rus.PrintSF.PrintSumma_Sell') = 0)))
     or Is_ManualIspr_BK(BookPrZk.TipUser)
    Exit;

  if (gen_IsGTD or gen_NoSF)
    Exit;

  if (gen_IsOtgr)
  {
    if (IsValid(tnSchFact1))
    {
      var bIsSameDir: boolean = ((SchFact1.Direct = BookPrZk.Direct) and (BookPrZk.TipUser <> cwTypeBK_Buy_CorrV_Minus_NDS_NA_OfBuy)) or (BookPrZk.TipUser = cwTypeBK_Sell_CorrV_Plus_NDS_NA_OfBuy);

      if (Is_CorrV_SF(SchFact1.TipUser))
        Result := GetSumCorrBK_ByTune(aSummBK, if (not aIsNDEEq, SchFact1.Summa, SchFact1.Sum[21]), bIsSameDir, Is_CorrV_BK_NDS_NA_Buy(BookPrZk.TipUser), aIsNDEEq);
      else
        Result := if (not aIsNDEEq, SchFact1.Summa, SchFact1.Sum[21]);
    }
  }
  else
  {
    if (IsValid(tnSchFact2))
      Result := if (not aIsNDEEq, SchFact2.Summa, SchFact2.Sum[21]);
  }

  // Знаки у сумм должны быть одинаковы
  if ((Result * aSummBK) < 0)
    Result *= -1;
}

function isPrintDateOprForStornoVozvrAvans : Boolean;
{
  Result := (((BookPrZk.TipUser = cwTypeBK_Buy_RegVozvrAvans          ) or  //  Регистрация возврата оплаты, предоплаты покупателю
              (BookPrZk.TipUser = cwTypeBK_Buy_RegVozvrPlat           ) or  //  Регистрация возврата платежа (без возврата МЦ/услуг)
              (BookPrZk.TipUser = cwTypeBK_Buy_RegCommissVoznagr      ) or  //  Регистрация комиссионного вознаграждения
              (BookPrZk.TipUser = cwTypeBK_Buy_StornoAvansInMomentOtgr) or  //  Сторно по авансу поставщику в момент отгрузки
              (BookPrZk.TipUser = cwTypeBK_Buy_StornoVozvrAvans       ) or  //  Сторно по возврату аванса (книга покупок)
              (BookPrZk.TipUser = cwTypeBK_Buy_StornoVozvrAvansDohod  ) or  //  Сторно по возврату аванса, дохода (книга покупок)
              (BookPrZk.TipUser = cwTypeBK_Buy_RegAvansInMomentOtgr   ))    //  Регистрация аванса в момент отгрузки
             and (not boTune_PrintDOpr_ForStornoVozvrAvans));
}

// Получение значения поля и ссылки "Назначения" из сопрдока
function GetValue_cNRecNaznach(var sNaznachKatSopr : String) : comp;
{
  cSF := oForPrint.Get_NRecSFForBK(BookPrZk.NRec);
  sNaznachKatSopr := '';
  Result := 0;

  // Поиск значений поля и ссылки "Назначений" из сопрдока имеет смысл только из отгрузочных СФ
  // для всех платежных СФ это поле будет пустым
  if (SchFact1.NRec = cSF)
  {
    sNaznachKatSopr := KatNazna.Name;
    Result := KatNazna.NRec
  }
}

// Проверка наличия Посредника
function IsExist_KO_Med : Boolean;
{
  Result := False;
  // ссылка на "посредника" (_KO_Mediator) используется в "Декларации по НДС"
  _KO_Mediator := if (bIsPrint_Corrected, tmpBook_Corrected.KO_Med, tmpBook.KO_Med);
  if (_KO_Mediator <> 0)
    Result := (GetFirst FastFirstRow KatOrg_Med = tsOk);

  if (Result)
  {
    _KO_Mediator_Head := GetHeadOrg(_KO_Mediator);
    if (_KO_Mediator_Head = 0)
      _KO_Mediator_Head := _KO_Mediator;

    if (GetFirst FastFirstRow KatOrg_Med_Head = tsOk) {}
  }
}

function GetDateFact_ForPrint : Date;
{
  if (tmpBook.sKodOp = '20')
    Result := ZeroDate;
  else
    Result := gen_DateFact;
}

// Печать текущей записи книги
procedure PrintCurrentBookPrZkFCom(iZnak : Integer);
var
  bIsPrintSummsWithoutNDS : Boolean;
  dCorr                   : Date;
  sSomeDateOplata, sKPP, sINN,
  PeriodUpl, PeriodUplDop : String;
  aResOpl, wDopType_KodOp : Word;
{
  frmBkPrZkF.PutEventById(feDoLoop, fcBkPrZkMain);

  // Группировка идет только по основным записям
  // (всегда использую tmpBook, а не tmpBook_Corrected в некоторых случаях).
  // Т.е. корректирующие записи всегда попадают туда же, куда и основные.
  if (g_isGroupType)
    if (Trim(strTipUsersName) = '') or (strTipUsersName <> tmpBook.sTipUsersName)
    {
      frmBkPrZkF.PutEventById(feTrue, fcTipUsersGroup);
      frmBkPrZkF.Write(tmpBook.sTipUsersName);
      strTipUsersName := tmpBook.sTipUsersName;

      // Если изменилась "верхняя" группировка по типу записи,
      // то наименования "нижних" группировок нужно опять вывести на печать
      strPodrName   := '';
      strObjectName := '';
      strDesGr      := '';
      strKatOrgName := '';
    }

  if (g_isGroupOtvPodr)
    if (Trim(strPodrName) = '') or (strPodrName <> tmpBook.sPodrName)
    {
      frmBkPrZkF.PutEventById(feTrue, fcPodrGroup);
      frmBkPrZkF.Write(tmpBook.sPodrName);
      strPodrName := tmpBook.sPodrName;
    }

  if (g_isGroupKatOrg)
    if (Trim(strKatOrgName) = '') or (strKatOrgName <> tmpBook.sKatOrgName)
    {
      frmBkPrZkF.PutEventById(feTrue, fcKatOrgGroup);
      frmBkPrZkF.Write(tmpBook.sKatOrgName);
      strKatOrgName := tmpBook.sKatOrgName;
    }

  if (g_isGroupObject)
    if (Trim(strObjectName) = '') or (strObjectName <> tmpBook.sStroyName)
    {
      frmBkPrZkF.PutEventById(feTrue, fcGroupBKObjectStroi);
      frmBkPrZkF.Write(tmpBook.sStroyName);
      strObjectName := tmpBook.sStroyName;
    }

  if (g_isGroupGrDescr)
    if (Trim(strDesGr) = '') or (strDesGr <> tmpBook.DesGr)
    {
      frmBkPrZkF.PutEventById(feTrue, fcDesGrGroup);
      frmBkPrZkF.Write(tmpBook.DesGr);
      strDesGr := tmpBook.DesGr;
    }

  strNum2 := if (IsValid(tnSchFact2),
                  if (ZeroPrint,
                      LPadCh(SchFact2.Num, ' ', Length(SchFact2.Num) + 1),
                      LPadCh(Ltrim(Trim(SchFact2.Num), '0'), ' ', Length(Trim(SchFact2.Num)) + 1)), '');

  frmBkPrZkF.Write(BookPrZk.NRec);
  frmBkPrZkF.Write(f_descrBook);
  frmBkPrZkF.Write(f_desgrBook);
  frmBkPrZkF.Write(BookPrZk.dReg);
  frmBkPrZkF.Write(BookPrZk.ls[1]);
  frmBkPrZkF.Write(BookPrZk.ss[1]);
  frmBkPrZkF.Write(BookPrZk.SubTip);
  frmBkPrZkF.Write(BookPrZk.TipUser);

  frmBkPrZkF.Write(wTune_UchPolicy);

  gen_NumSF := Trim(gen_NumSF);

  frmBkPrZkF.Write(strNum2);
  frmBkPrZkF.Write(gen_NumSF);
  frmBkPrZkF.Write(GetDateFact_ForPrint);
  frmBkPrZkF.Write(gen_DatePost);
  frmBkPrZkF.Write(LTrim(Trim(gen_NumIsprSF), '0'));
  frmBkPrZkF.Write(gen_DateIsprSF);
  frmBkPrZkF.Write(Trim(gen_NumKSF));
  frmBkPrZkF.Write(gen_DateKSF);
  frmBkPrZkF.Write(LTrim(Trim(gen_NumKIsprSF), '0'));
  frmBkPrZkF.Write(gen_DateKIsprSF);

  sSomeDateOplata := if (gen_DateOpl <> ZeroDate, DateToStr(gen_DateOpl, dtFormat), '');
  aResOpl := 0;

  if ((VidReport = 35) or (VidReport = 36) or (VidReport = 45) or (VidReport = 53) or (VidReport = 54) or (VidReport = 55))  // Книги c 2014г., РФ
    aResOpl := SetManyDateNumOpl(False);
  else
    frmBkPrZkF.Write(sSomeDateOplata);

  frmBkPrZkF.Write(if (gen_DOplRes <= g_DateTo, gen_DOplRes, ZeroDate));
  frmBkPrZkF.Write(if (isPrintDateOprForStornoVozvrAvans and bIsNewBook, ZeroDate, BookPrZk.dOpr));

  var bIsPrnSeller: boolean = (tmpBook.sKodOp <> cs_KodOp_RF_27);
  if (not bIsPrnSeller)
    bIsPrnSeller := if (IsValid(#SchFact1), doGetAttr(coSchFact, SchFact1.NRec, csAttrPrnSeller_Code27) <> 0, false);

  if bIsPrnSeller
    frmBkPrZkF.Write(gen_OrgName);
  else
    frmBkPrZkF.SkipFormat(1);

  if (oFuncsSF.IsRussiaINN(gen_UNN, gen_NRecKatOrg_BK)) and bIsPrnSeller
  {
    frmBkPrZkF.Write(gen_UNN);
    frmBkPrZkF.Write(gen_KPP);
  }
  else
  {
    frmBkPrZkF.Write('-');
    frmBkPrZkF.Write('-');
  }

  frmBkPrZkF.Write(SchFact1.cOrg);
  frmBkPrZkF.Write(SchFact2.cOrg);

  // ОКОНX ОКПО
  frmBkPrZkF.Write(KatOrg.OKONH);
  frmBkPrZkF.Write(KatOrg.OKPO);

  frmBkPrZkF.Write(tmpBook.sKodOp); // Код операции

  wDopType_KodOp := 0;

  // Книги c 2014г., РФ
  // Печать оплаты = по вн.атрибуту "Номер и дата оплаты НДС",по плат.кодам, для кода 23 - из графы 3
  if (((VidReport = 35) or (VidReport = 53) or (VidReport = 36) or (VidReport = 45) or (VidReport = 54) or (VidReport = 55)) and (bIsPrintOpl_23) and (aResOpl = 1))
    wDopType_KodOp := 1;

  frmBkPrZkF.Write(wDopType_KodOp);

  // Посредник
  if (IsExist_KO_Med)
  {
    frmBkPrZkF.Write(oHistory.sGetField(coKatOrg, KatOrg_Med_Head.NRec, 'REP.KATORGNAME', gen_DateFact_ForHistory)); // Наименование посредника
    sKPP := oHistory.sGetField(coKatOrg, KatOrg_Med.NRec, 'KODPLATNDS', gen_DateFact_ForHistory);
    sINN := oHistory.sGetField(coKatOrg, KatOrg_Med_Head.NRec, 'UNN'  , gen_DateFact_ForHistory);

    if (oFuncsSF.IsRussiaINN(sINN, KatOrg_Med_Head.NRec))
      frmBkPrZkF.Write(if (LTrim(Trim(sINN + sKPP), '-') = '', '-', sINN + '/' + sKPP)); // УНН/КПП посредника
    else
      frmBkPrZkF.Write('-'); // УНН/КПП посредника
  }
  else
    frmBkPrZkF.SkipFormat(2);

  var bIsValBK : Boolean;  bIsValBK := (IsValid(tnKlVal_BK));

  if (bIsValBK)
    frmBkPrZkF.Write(KlVal_BK.Dollar + ',' + KlVal_BK.ISO) // Код/наименование валюты
  else
    frmBkPrZkF.SkipFormat(1);

  bIsPrintSummsWithoutNDS :=
    IsNeedSummsWithoutNDS(BookPrZk.Buffer, if (IsValid(tnSchFact2), SchFact2.SubTip, 0), if (IsValid(tnSchFact2), SchFact2.TipUser, 0));

  // доп.проверка на код операции для записей регистрации авансов поставщику в момент отгрузки и сторно по авансу в момент отгрузки (сбыт)
  if ((bIsPrintSummsWithoutNDS) and (BookPrZk.Direct = cwDirect_Sell) and (BookPrZk.SubTip = cwTotal_TypeBK_AvansInMomentOtgr))
    if (tmpBook.sKodOp <> cs_KodOp_RF_21) and (tmpBook.sKodOp <> cs_KodOp_RF_43)
      bIsPrintSummsWithoutNDS := false;

  // печать сумм по записи регистрации
  frmBkPrZkF.Write(arrSum[1]);      // 10 SummAll

  if (IsUse_Val_Summs)  // суммы в валюте документа
  {
    frmBkPrZkF.SkipFormat(1);       // в валюте
  }
  else   // суммы в НДЕ эквиваленте
  {
    if (bIsValBK)
      frmBkPrZkF.Write(arrSum[17]); // в валюте
    else
      frmBkPrZkF.SkipFormat(1);
  }

  frmBkPrZkF.Write(arrSum[18]);   // в валюте СФ
  frmBkPrZkF.Write(arrSum[19]);    // НДС в рублях

  if (not bIsPrintSummsWithoutNDS)
  {
    frmBkPrZkF.SkipFormat(1);      // 11 Summ1
    frmBkPrZkF.SkipFormat(1);      // 11 Summ1_20
    frmBkPrZkF.Write(arrSum[3]);  // 12 Summ2
    frmBkPrZkF.Write(arrSum[21]);  // 12 Summ2_20
    frmBkPrZkF.Write(arrSum[4]);   // 13 Summ3
    frmBkPrZkF.SkipFormat(1);      // 14 Summ4
  }
  else
  {
    frmBkPrZkF.Write(arrSum[2]);   // 11 Summ1
    frmBkPrZkF.Write(arrSum[20]);  // 11 Summ1_20
    frmBkPrZkF.Write(arrSum[3]);   // 12 Summ2
    frmBkPrZkF.Write(arrSum[21]);  // 11 Summ2_20
    frmBkPrZkF.Write(arrSum[4]);   // 13 Summ3
    frmBkPrZkF.Write(arrSum[5]);   // 14 Summ4
  }

  frmBkPrZkF.Write(arrSum[6]);     // 15 Summ5
  frmBkPrZkF.Write(arrSum[7]);     // 16 Summ6
  frmBkPrZkF.Write(arrSum[8]);     // 17 Summ7
  frmBkPrZkF.Write(arrSum[9]);     // 17a Summ8
  frmBkPrZkF.Write(arrSum[10]);    // 17b Summ9
  frmBkPrZkF.Write(arrSum[11]);    // 18 Summ10
  frmBkPrZkF.Write(arrSum[12]);    // 19 SumIn1
  frmBkPrZkF.Write(arrSum[13]);    // 20 SumIn2
  frmBkPrZkF.Write(arrSum[14]);    // 20a SumIn3
  frmBkPrZkF.Write(arrSum[15]);    // 20b SumIn4
  frmBkPrZkF.Write(arrSum[16]);    // 20с Sum23

  frmBkPrZkF.Write(gen_IsNDS20);   // 20d
  frmBkPrZkF.Write(not Is_BK_NDS_NA(BookPrZk.TipUser) or g_isPrintItog_NA);
  frmBkPrZkF.Write(BaseDoc.NoDoc); // 21

  if ((TuneCountry = ccBel) or (TuneCountry = ccRus))
  {
    if (g_isPrintNazn)
      frmBkPrZkF.Write(BookPrZk.Nazn); // 22 Nazn
    else
      frmBkPrZkF.Write('');
  }
  else
    frmBkPrZkF.Write(BookPrZk.Nazn);   // 22 Nazn

  if (bIsNewBook)
  {
    // Получаем значения поля и ссылки "Назначения" из сопрдока
    var cNaznachKatSopr : comp;
    var sNaznachKatSopr : String;
    cNaznachKatSopr := GetValue_cNRecNaznach(sNaznachKatSopr);

    frmBkPrZkF.Write(sNaznachKatSopr);
    frmBkPrZkF.Write(cNaznachKatSopr);
  }
  else
    frmBkPrZkF.SkipFormat(2);

  frmBkPrZkF.Write(BookPrZk.cSopr); // 23 cSopr

  cRecMemo := BookPrZk.Nrec;
  Delete AllMemo where ((coBookPrZk == AllMemo.wTable and
                         cRecMemo   == AllMemo.cRec));

  if (not NeedGTD_From2017)
  {
    frmBkPrZkF.Write('-');
    frmBkPrZkF.SkipFormat(1);
  }
  else
    PrintGTD;

  if ((VidReport = 36) or (VidReport = 45) or (VidReport = 54) or (VidReport = 55)) and (g_Direct = cwDirect_Sell)
    PrintTNVED_FCom;
  else
    frmBkPrZkF.SkipFormat(1);

  dCorr := GetDateCorrPeriod;

  PeriodUpl    := if (g_RegDoc = cwBook_Dop, String(Year(g_DateFromDop)) + '_' + String(GetKvartal(Month(g_DateFromDop)))
                                           , String(Year(g_DateFrom))    + '_' + String(GetKvartal(Month(g_DateFrom))));
  PeriodUplDop := if (g_RegDoc = cwBook_Dop, if (dCorr = ZeroDate, '0000_0'
                                                                 , String(Year(dCorr)) + '_' + String(GetKvartal(Month(dCorr))))
                                           , '0000_0');
  frmBkPrZkF.Write(PeriodUpl);
  frmBkPrZkF.Write(PeriodUplDop);
  frmBkPrZkF.Write(0); // lFieldNumMVK, левая форма, нигде не инициализируется
}

// Сохранение номера следующего листа книги после отработки Excel-отчета
procedure SaveLastList_XL;
var
  ExcelList : LongInt;
  Res       : Boolean;
  wR, wC    : Word;
  _NameVar  : String;
{
  // Ячейка на листе переменных, в котором в Excel'е сохраняется количество сформированных листов
  ExcelList := 0;
  wR := 100;
  wC := 3;

  Res := xlGetCellValue(wR, wC, ExcelList);

  if (not Res)
    Exit;

  if (ExcelList <> 0)
  {
    _NameVar := if (g_Direct = cwDirect_Sell, 'o', 'p') + 'bkprzkf_g_numPageBk' +
                if (VidReport = 52 or VidReport = 53 or VidReport = 54 or VidReport = 55, '_Dop', '')  ;

    SaveMyDsk(ExcelList + 1, _NameVar);
  }
}

// К строке sRes добавляю sAdd, чтобы не получилась строка с несколькими скобками ()
function AddDopStr(sRes, sAdd : String) : String;
{
  if ((SubStr(sRes, Length(sRes), 1) = ')') and
      (Trim(sAdd) <> ''))
    Result := SubStr(sRes, 1, Length(sRes) - 1) + ', ' + sAdd + ')';
  else
    Result := sRes + if (Trim(sAdd) <> '', ' (' + sAdd + ')', '');
}


#declare mcrSetSummsBK(TblBK)

  // if not IsPrintTotalSum_ByBK, то общие суммы уже рассчитаны по СФ и не лезем туда со своими записями регистрации

  if (IsUse_Val_Summs)
  {
    if (TuneCountry = ccRus)
      gen_IsNDS20 := IsNDS20(#(TblBK).Sum[1], #(TblBK).Sum[2],
                     if (#(TblBK).dOpr = ZeroDate, #(TblBK).dReg, #(TblBK).dOpr));

    if (not IsFirstBK) and (IsPrintTotalSum_ByBK) and (IsPrintTotalSum_NA)
    {
      arrSum[1]  += iZnak * #(TblBK).Summa;
      arrSum[18] := arrSum[1]; // в валюте СФ, :=, а не += - осторожней!
    }

    arrSum[19] += iZnak * (#(TblBK).Sum[2] + #(TblBK).Sum[5]); // НДС в руб.

    if (IsPrintNDS_NA) // на всякий случай, чтобы не вывелся НДС, если он вдруг есть, для НДС НА сбыт
      {
        arrSum[3] += if (not gen_IsNDS20, iZnak * #(TblBK).Sum[2], 0); // 12 Summ2
        arrSum[21] += if (gen_IsNDS20, iZnak * #(TblBK).Sum[2], 0);    //    Summ2_20
      }
    arrSum[4] += iZnak * #(TblBK).Sum[3];    // 13 Summ3

    if (not bIsPrintSummsWithoutNDS)
    {
      arrSum[2] += 0; // оставляю этот ненужный код для наглядности
      arrSum[20] += 0;
      arrSum[5] += 0;
    }
    else
    {
      arrSum[2]  += if (not gen_IsNDS20, iZnak * #(TblBK).Sum[1], 0); // 11 Summ1
      arrSum[20] += if (gen_IsNDS20, iZnak * #(TblBK).Sum[1], 0);     //    Summ1_20
      arrSum[5] += iZnak * #(TblBK).Sum[4];    // 14 Summ4
    }

    arrSum[6] += iZnak * #(TblBK).Sum[5];        // 15 Summ5
    arrSum[7] += iZnak * #(TblBK).Sum[6];        // 16 Summ6
    arrSum[8] += 0;

    if (VidReport > 29)
      arrSum[8] += iZnak * #(TblBK).Sum[7];
    else
      arrSum[8] += iZnak * #(TblBK).Sum[7] + iZnak * #(TblBK).Sum[23];

    arrSum[9]  += iZnak * #(TblBK).Sum[8];       // 17a Summ8
    arrSum[10] += iZnak * #(TblBK).Sum[9];       // 17b Summ9
    arrSum[11] += iZnak * #(TblBK).Sum[10];      // 18 Summ10
    arrSum[12] += iZnak * #(TblBK).SumIn[1];     // 19 SumIn1
    arrSum[13] += iZnak * #(TblBK).SumIn[2];     // 20 SumIn2
    arrSum[14] += iZnak * #(TblBK).SumIn[3];     // 20a SumIn3
    arrSum[15] += iZnak * #(TblBK).SumIn[4];     // 20b SumIn4
    arrSum[16] += iZnak * #(TblBK).Sum[23];      // 20с Sum23
  }
  else
  {
    if (not IsFirstBK) and (IsPrintTotalSum_ByBK) and (IsPrintTotalSum_NA)
    {
      arrSum[1]  += iZnak * #(TblBK).Sum[21];
      arrSum[18] += iZnak * #(TblBK).Summa;        // в валюте СФ

      if (bIsValBK)
        arrSum[17] += iZnak * #(TblBK).Summa;   // в валюте
    }

    arrSum[19] += iZnak * (#(TblBK).Sum[12] + #(TblBK).Sum[15]); // НДС в руб.

    if (not bIsPrintSummsWithoutNDS)
    {
      arrSum[2] += 0;
      if (IsPrintNDS_NA) // на всякий случай, чтобы не вывелся НДС, если он вдруг есть, для НДС НА сбыт
        arrSum[3] += iZnak * #(TblBK).Sum[12]; // 12 Summ2
      arrSum[4] += iZnak * #(TblBK).Sum[13];   // 13 Summ3
      arrSum[5] += 0;
    }
    else
    {
      arrSum[2] += iZnak * #(TblBK).Sum[11];   // 11 Summ1
      if (IsPrintNDS_NA) // на всякий случай, чтобы не вывелся НДС, если он вдруг есть, для НДС НА сбыт
        arrSum[3] += iZnak * #(TblBK).Sum[12]; // 12 Summ2
      arrSum[4] += iZnak * #(TblBK).Sum[13];   // 13 Summ3
      arrSum[5] += iZnak * #(TblBK).Sum[14];   // 14 Summ4
    }

    arrSum[6] += iZnak * #(TblBK).Sum[15];       // 15 Summ5
    arrSum[7] += iZnak * #(TblBK).Sum[16];       // 16 Summ6
    arrSum[8] += 0;

    if (VidReport > 29)
      arrSum[8] += iZnak * #(TblBK).Sum[17];
    else
      arrSum[8] += iZnak * #(TblBK).Sum[17] + iZnak * #(TblBK).Sum[28];

    arrSum[9]  += iZnak * #(TblBK).Sum[18];       // 17a Summ8
    arrSum[10] += iZnak * #(TblBK).Sum[19];       // 17b Summ9
    arrSum[11] += iZnak * #(TblBK).Sum[20];       // 18 Summ10
    arrSum[12] += iZnak * #(TblBK).SumIn[6];      // 19 SumIn1
    arrSum[13] += iZnak * #(TblBK).SumIn[7];      // 20 SumIn2
    arrSum[14] += iZnak * #(TblBK).SumIn[8];      // 20a SumIn3
    arrSum[15] += iZnak * #(TblBK).SumIn[9];      // 20b SumIn4
    arrSum[16] += iZnak * #(TblBK).Sum[28];       // 20с Sum23
  }
#end

// Печать сумм по записи регистрации
procedure SetSumsByCurrentBookPrZk (iZnak : Integer);
var
  bIsValBK, bIsPrintSummsWithoutNDS, IsFirstBK, IsPrintTotalSum_ByBK, IsPrintTotalSum_NA, IsPrintNDS_NA : Boolean;
{
  var aKodOp : String = '';
  var aDop   : Comp   = 0;

  bIsPrintSummsWithoutNDS :=
    IsNeedSummsWithoutNDS(BookPrZk.Buffer, if (IsValid(tnSchFact2), SchFact2.SubTip, 0), if (IsValid(tnSchFact2), SchFact2.TipUser, 0));

  // доп.проверка на код операции для записей регистрации авансов поставщику в момент отгрузки и сторно по авансу в момент отгрузки (сбыт)
  if ((bIsPrintSummsWithoutNDS) and (BookPrZk.Direct = cwDirect_Sell) and (BookPrZk.SubTip = cwTotal_TypeBK_AvansInMomentOtgr))
    if (tmpBook.sKodOp <> cs_KodOp_RF_21) and (tmpBook.sKodOp <> cs_KodOp_RF_43)
      bIsPrintSummsWithoutNDS := false;

  bIsValBK := (IsValid(tnKlVal_BK));

  IsPrintTotalSum_NA := IsPrintNDS_NA := True;

  if (Is_BK_NDS_NA_Sell(BookPrzk.TipUser) or (tmpBook.sKodOp = cs_KodOp_RF_33 or tmpBook.sKodOp = cs_KodOp_RF_34))
  {
    IsPrintTotalSum_NA := (BookPrzk.TipUser = cwTypeBK_Buy_CorrV_Minus_NDS_NA); // при реализации шкур и лома, сбыт - сумма с НДС выводится только в книге покупок (корректировка - уменьшение)
    IsPrintNDS_NA   := false;
  }

  var i : Byte;
  for (i := 1; i <= iSum; i++)
    arrSum[i] := 0.0;

  // Поиск общей стоимости, в зависимости от настройки печати по СФ или записи регистрации
  // Печать сумм по записи регистрации, не валютной
  if (IsUse_Val_Summs)
  {
    if (IsPrintTotalSum_NA)
    {
      // суммы в валюте документа
      if ((bIsReport2015Bel) and ((g_KodOpBel = cb_KodOp_NDS_NalOrg) or (g_KodOpBel = cb_KodOp_NDS_TamOrg) or (g_KodOpBel = cb_KodOp_NeverNDS)))
        arrSum[1] := iZnak * (BookPrZk.Sum[2] + BookPrZk.Sum[5])
      else
        arrSum[1] := GetSum_ByTune(iZnak * BookPrZk.Summa);  // 10 SummAll
    }

    arrSum[18] := arrSum[1]; // в валюте СФ
    arrSum[17] := 0;         // в валюте
  }
  else
  {
    if (IsPrintTotalSum_NA)
    {
      // Суммы в НДЕ эквиваленте или по валютной записи
      if ((bIsReport2015Bel) and ((g_KodOpBel = cb_KodOp_NDS_NalOrg) or (g_KodOpBel = cb_KodOp_NDS_TamOrg) or (g_KodOpBel = cb_KodOp_NeverNDS)))
        arrSum[1] := iZnak * (BookPrZk.Sum[12] + BookPrZk.Sum[15]);
      else
        arrSum[1] := GetSum_ByTune(iZnak * BookPrZk.Sum[21], True);  // 10 SummAll

      arrSum[18] := GetSum_ByTune(iZnak * BookPrZk.Summa);   // в валюте СФ

      if (bIsValBK)
        arrSum[17] := GetSum_ByTune(iZnak * BookPrZk.Summa);   // в валюте
    }
  }

  IsFirstBK := True;
  IsPrintTotalSum_ByBK := (((g_Direct = cwDirect_Buy)  and (wGetTune('Nalog.Rus.PrintSF.PrintSumma') = 0)) or
                           ((g_Direct = cwDirect_Sell) and (wGetTune('Nalog.Rus.PrintSF.PrintSumma_Sell') = 0))) or
                          Is_ManualIspr_BK(BookPrZk.TipUser);

  #mcrSetSummsBK(BookPrZk)

  // Ситуация Исправительный СФ, который корректирует исходный СФ с множеством записей регистрации.
  // Тогда в доп.лист вывожу сумму по всем исходным записям регистрации
  if (TuneCountry = ccRus) and (bIsDopBook)        // Только для России и доп.книги
  if (IsValid(tnBookPrZk_ForNext)) // исходная запись - корректируемая
  {
    if ((BookPrZk_ForNext.SubTip = cwTotal_TypeBK_Correcting) and
        (IsValid(tnSchFact_ForNext)))
    if (Is_IsprSF(SchFact_ForNext.TipUser, SchFact_ForNext.Flags)) // СФ-исправление
    {
       _loop BookPrZk_Sosedi  // "соседи" по СФ для исходной корректируемой записи, которые также надо включить в суммы
       {
         if (BookPrZk_Sosedi.NRec = BookPrZk.NRec) or           // исходная корректируемая запись, ее суммы в массиве уже есть
            (BookPrZk_Sosedi.RegDoc <> cwBK_Reg)   or           // нерегистрируемая запись, не учитываю
            (BookPrZk_Sosedi.dReg >= BookPrZk_ForNext.dReg) or  // дата позже корректирующей записи
            (IsValid(tnBookPrZk_Sosedi_ForNext) or              // есть своя корректирующая запись, не учитываю
            (BookPrZk_Sosedi.Direct != BookPrZk.Direct))        // разные направления, например рег.аванса в момент отгрузки
           Continue;

         IsFirstBK := False;
         #mcrSetSummsBK(BookPrZk_Sosedi)

         if (GetFirst BookPrZkCorrected where ((BookPrZk_Sosedi.NRec == BookPrZkCorrected.NRec)) = tsOk)
         {
           aKodOp := oForPrint.GetKodOpAndSF_DopForBK(BookPrZkCorrected.NRec, aDop);
           Minus_Curr_BookPrZkCorrected(cnstDelta_Total_Sums, aKodOp); // Процедура вычитания сумм корректирующих записей из итоговых сумм
           Update current tmpListVal;
         }
       }
    }
  }
}

function NeedPrintItogGroup : Boolean;
{
  Result := False;

  if (VidReport <> 42) or (VidReport <> 44)
  {
    if (abs(arrGr[1]) > 0.00001 or abs(arrGr[2]) > 0.00001 or abs(arrGr[3]) > 0.00001 or
        abs(arrGr[4]) > 0.00001 or abs(arrGr[5]) > 0.00001 or abs(arrGr[6]) > 0.00001 or
        abs(arrGr[7]) > 0.00001 or abs(arrGr[8]) > 0.00001 or abs(arrGr[9]) > 0.00001)
      Result := True;
  }
  else
  {
    if (g_Direct = cwDirect_Sell)
    {
      if (abs(arrGr[2]) > 0.00001 or abs(arrGr[3]) > 0.00001 or abs(arrGr[6]) > 0.00001 or
          abs(arrGr[7]) > 0.00001 or abs(arrGr[8]) > 0.00001 or abs(arrGr[9]) > 0.00001)
        Result := True;
    }
    else
    {
      if (abs(arrGr[10]) > 0.00001)
        Result := True;
    }
  }
}

// Печать текущей записи книги в Excel
procedure PrintCurrentBookPrZkXL(iZnak : Integer);
var
  IsBelarus, IsRussia: Boolean;
  sName, sSomeDateOplata,   // Даты оплаты по всем платежам
  sNazn, _SrcSF, StrRes : String;
  aDate : Date;
  ISNds24, ISSumm24, ISOsnSumm, ISOsnNds,
  ISSummAll_18_SF, ISSummAll_24_SF, dblPart18,
  dblPart24, ISSummAll_SF, IsDopSumm, IsDopNds,
  ISNds25, ISSumm25, ISSummAll_25_SF, dblPart25 : Double;
  IsPartBK, bIs24, bIsRasch_Stavka, bIs25       : Boolean;
  iNumGr : Integer;
{
  #__UnUsed__(iZnak)

  // Группировка идет только по основным записям
  // (всегда использую tmpBook, а не tmpBook_Corrected в некоторых случаях).
  // Т.е. корректирующие записи всегда попадают туда же, куда и основные.
  if (g_isGroupType and (VidReport > 36 and VidReport < 51 and  VidReport <> 45))
    if (Trim(strTipUsersName) = '') or (strTipUsersName <> tmpBook.sTipUsersName)
    {
      if (strTipUsersName <> '')
        if NeedPrintItogGroup
        {
          if (g_isGroupOtvPodr)
          {
            pXL.ClearTblBuffer;
            pXL.SetTblStringFldValue('ДатаНомер','   Итого по подразделению ' + strPodrName + ':');

            if (VidReport <> 42) or (VidReport <> 44)
              pXL.SetTblNumberFldValue('Сумма', arrCO[1]);

            pXL.SetTblNumberFldValue('Сум1'   , arrCO[2]);
            pXL.SetTblNumberFldValue('Сум2'   , arrCO[3]);
            pXL.SetTblNumberFldValue('Сум4'   , arrCO[6]);
            pXL.SetTblNumberFldValue('Сум5'   , arrCO[7]);
            pXL.SetTblNumberFldValue('Сум9'   , arrCO[9]);
            pXL.SetTblNumberFldValue('Сум1Доп', arrCO[4]);
            pXL.SetTblNumberFldValue('Сум2Доп', arrCO[5]);
            pXL.SetTblNumberFldValue('Сум7'   , arrCO[8]);
            pXL.SetTblNumberFldValue('НДС'    , arrCO[10]);

            pXL.InsTblRow;

            for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
              arrCO[iNumGr] := 0.0
          }

          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('ДатаНомер','   Итого по типу записей: ' + strTipUsersName);

          if (VidReport <> 42)  or (VidReport <> 44)
            pXL.SetTblNumberFldValue('Сумма', arrGr[1]);

          pXL.SetTblNumberFldValue('Сум1'   , arrGr[2]);
          pXL.SetTblNumberFldValue('Сум2'   , arrGr[3]);
          pXL.SetTblNumberFldValue('Сум4'   , arrGr[6]);
          pXL.SetTblNumberFldValue('Сум5'   , arrGr[7]);
          pXL.SetTblNumberFldValue('Сум9'   , arrGr[9]);
          pXL.SetTblNumberFldValue('Сум1Доп', arrGr[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', arrGr[5]);
          pXL.SetTblNumberFldValue('Сум7'   , arrGr[8]);
          pXL.SetTblNumberFldValue('НДС'    , arrGr[10]);

          pXL.InsTblRow;

          for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
            arrGr[iNumGr] := 0.0;
        }

      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('ДатаНомер','   Тип записей: ' + tmpBook.sTipUsersName);
      pXL.InsTblRow;

      strTipUsersName := tmpBook.sTipUsersName;
      // Если изменилась "верхняя" группировка по типу записи,
      // то наименования "нижних" группировок нужно опять вывести на печать
      strPodrName   := '';
      strObjectName := '';
      strDesGr      := '';
      strKatOrgName := '';
    }

  if (g_isGroupOtvPodr) and ((VidReport > 36 and VidReport < 51 and VidReport <> 45) or bIsReport2015Bel)
    if (Trim(strPodrName) = '') or (strPodrName <> tmpBook.sPodrName)
    {
      if (strPodrName <> '')
      {
        if (bIsReport2015Bel)
        {
          ClearBuffer(#tmpListPodr);

          tmpListPodr.sPodrName := strPodrName;
          tmpListPodr.sum[1]    := arrCO[3];
          tmpListPodr.sum[2]    := arrCO[7];
          tmpListPodr.sum[3]    := arrCO[5];

          if (VidReport = 12)
            tmpListPodr.sum[4]    := arrCO[4];

          Insert current tmpListPodr;
        }
        else
        {
          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('ДатаНомер','   Итого по подразделению ' + strPodrName + ':');

          if (VidReport <> 42)  or (VidReport <> 44)
            pXL.SetTblNumberFldValue('Сумма', arrCO[1]);

          pXL.SetTblNumberFldValue('Сум1'   , arrCO[2]);
          pXL.SetTblNumberFldValue('Сум2'   , arrCO[3]);
          pXL.SetTblNumberFldValue('Сум4'   , arrCO[6]);
          pXL.SetTblNumberFldValue('Сум5'   , arrCO[7]);
          pXL.SetTblNumberFldValue('Сум9'   , arrCO[9]);
          pXL.SetTblNumberFldValue('Сум1Доп', arrCO[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', arrCO[5]);
          pXL.SetTblNumberFldValue('Сум7'   , arrCO[8]);
          pXL.SetTblNumberFldValue('НДС'    , arrCO[10]);

          pXL.InsTblRow;
        }

        for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
          arrCO[iNumGr] := 0.0;
      }

      if ((VidReport <> 11) and (VidReport <> 12) and (VidReport <> 13))
      {
        pXL.ClearTblBuffer;
        pXL.SetTblStringFldValue('ДатаНомер','   Подразделение:  ' + tmpBook.sPodrName);
        pXL.InsTblRow;
      }

      strPodrName := tmpBook.sPodrName;
    }

  if (g_isGroupObject and (VidReport > 36 and VidReport < 51 and VidReport <> 45))
    if (Trim(strObjectName) = '') or (strObjectName <> tmpBook.sStroyName)
    {
      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('ДатаНомер','   Объект строительства: ' + tmpBook.sStroyName);
      pXL.InsTblRow;
      strObjectName := tmpBook.sStroyName;
    }

  if (g_isGroupGrDescr and (VidReport > 36 and VidReport < 51 and VidReport <> 45))
    if (Trim(strDesGr) = '') or (strDesGr <> tmpBook.DesGr)
    {
      if (strDesGr <> '')
        if NeedPrintItogGroup
        {
          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('ДатаНомер','   Итого по группе дескрипторов: ' + strDesGr);

          if (VidReport <> 42)  or (VidReport <> 44)
            pXL.SetTblNumberFldValue('Сумма', arrGr[1]);

          pXL.SetTblNumberFldValue('Сум1'   , arrGr[2]);
          pXL.SetTblNumberFldValue('Сум2'   , arrGr[3]);
          pXL.SetTblNumberFldValue('Сум4'   , arrGr[6]);
          pXL.SetTblNumberFldValue('Сум5'   , arrGr[7]);
          pXL.SetTblNumberFldValue('Сум9'   , arrGr[9]);
          pXL.SetTblNumberFldValue('Сум1Доп', arrGr[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', arrGr[5]);
          pXL.SetTblNumberFldValue('Сум7'   , arrGr[8]);
          pXL.SetTblNumberFldValue('НДС'    , arrGr[10]);

          pXL.InsTblRow;

          for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
            arrGr[iNumGr] := 0.0;
        }

      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('ДатаНомер','   Группа дескрипторов:  ' + tmpBook.DesGr);
      pXL.InsTblRow;
      strDesGr := tmpBook.DesGr;
    }

  if (g_isGroupKatOrg and (VidReport > 36 and VidReport < 51 and VidReport != 45))
    if (Trim(strKatOrgName) = '') or (strKatOrgName <> tmpBook.sKatOrgName)
    {
      if (strKatOrgName <> '')
        if NeedPrintItogGroup
        {
          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('ДатаНомер','   Итого по контрагентам: ' + strKatOrgName);

          if (VidReport <> 42)  or (VidReport <> 44)
            pXL.SetTblNumberFldValue('Сумма', arrGr[1]);

          pXL.SetTblNumberFldValue('Сум1'   , arrGr[2]);
          pXL.SetTblNumberFldValue('Сум2'   , arrGr[3]);
          pXL.SetTblNumberFldValue('Сум4'   , arrGr[6]);
          pXL.SetTblNumberFldValue('Сум5'   , arrGr[7]);
          pXL.SetTblNumberFldValue('Сум9'   , arrGr[9]);
          pXL.SetTblNumberFldValue('Сум1Доп', arrGr[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', arrGr[5]);
          pXL.SetTblNumberFldValue('Сум7'   , arrGr[8]);
          pXL.SetTblNumberFldValue('НДС'    , arrGr[10]);

          pXL.InsTblRow;

          for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
            arrGr[iNumGr] := 0.0;
        }

      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('ДатаНомер','   Контрагент:  ' + tmpBook.sKatOrgName);
      pXL.InsTblRow;
      strKatOrgName := tmpBook.sKatOrgName;
    }

  sSomeDateOplata := '';

  if (TuneCountry = ccRus)
  {
    ClearMarker(mrkKatParty);
    sSomeDateOplata := if (gen_DateOpl <> ZeroDate, DateToStr(gen_DateOpl, dtFormat), '');
  }

  NomDO := if (ZeroPrint, BaseDoc.NoDoc, LTrim(Trim(BaseDoc.NoDoc),'0'));

  var _Date, _Num : String;
  aDate := GetDateFact_ForPrint;
  _Date := if (aDate = ZeroDate, '', DateToStr(aDate, dtFormat));
  _Num  := if (ZeroPrint, gen_NumSF, LTrim(Trim(gen_NumSF), '0'));

  DatNomSF := if (bZak2014, _Num + ' ' + _Date, _Date + ' ' + _Num);
  DatNomKS := if (IsValid(tnSchFact1), DateToStr(KatSopr_OtgrSF.dSopr, dtFormat) + ' № ' + KatSopr_OtgrSF.NSopr, '');

  strNum1 := '';
  strNum2 := '';
  strAkt  := '';
  dAkt    := ZeroDate;

  IsBelarus := True;
  IsRussia  := False;

  if (GetFirst KatState = tsOk)
  {
    IsBelarus := trim(KatState.KOD) = sKod_Bel;
    IsRussia  := trim(KatState.KOD) = sKod_Russ;
  }

  IsBelZakon2007 := False;

  if (TuneCountry = ccBel)
  {
    aDate := if (IsValid(tnSchFact1), SchFact1.dFact,
             if (IsValid(tnSchFact2), SchFact2.dFact, ZeroDate));

    if ((VidReport <> 11) and (VidReport <> 12) and (VidReport <> 13))
      IsBelZakon2007 := if (dTune_DateNewMetodUch <= aDate, True, False) and (wTune_UchPolicy = muByOtgr);
  }

  if (IsValid(tnSchFact1))
  {
    strAkt :=
      if (KatSopr_OtgrSF.VidSopr <> cgDoc_0111,
        if (KatSopr_OtgrSF.VidSopr = cgDoc_0101 or KatSopr_OtgrSF.VidSopr = cgDoc_0102 or
            KatSopr_OtgrSF.VidSopr = cgDoc_0103 or KatSopr_OtgrSF.VidSopr = cgDoc_0106 or
            KatSopr_OtgrSF.VidSopr = cgDoc_0201 or KatSopr_OtgrSF.VidSopr = cgDoc_0202 or
            KatSopr_OtgrSF.VidSopr = cgDoc_0203,
              ' Накладная от '+ DateToStr(KatSopr_OtgrSF.dSopr, dtFormat) +
              ' № ' + KatSopr_OtgrSF.NSopr + ' ', ''),
        if (KatSopr_OtgrSF.wADoc <> cgCustomAkt, ' Акт от ', ' ГТД от ') +
          DateToStr(KatSopr_OtgrSF.dSopr, dtFormat) + ' № ' + KatSopr_OtgrSF.NSopr + ' ');

    dAkt := KatSopr_OtgrSF.dSopr;
  }

  strNum1 := if (IsValid(tnSchFact1),
               if (ZeroPrint,
                   LPadCh(SchFact1.Num, ' ', Length(SchFact1.Num) + 1),
                   LPadCh(Ltrim(Trim(SchFact1.Num), '0'), ' ', Length(Trim(SchFact1.Num)) + 1)), '');

  if ((strAkt <> '') and (Pos('Акт', strAkt) <> 0) and
      (dAkt <> 0) and (dAkt < Date(1, 1, 2010))) // Законодательство 2010г, информация о СФ не нужна
    strNum1 := strAkt + ', СФ-1 №' + strNum1 + ' от ' + if (SchFact1.dFact = ZeroDate, '', DateToStr(SchFact1.dFact, dtFormat));
  else
    strNum1 := if (strAkt <> '', strAkt, if (BookPrZk.dOpr = ZeroDate, '', DateToStr(BookPrZk.dOpr, dtFormat)) +
                   if (strNum1 = '', '', ' № ' + strNum1));

  strNum2 := if (IsValid(tnSchFact2),
                  if (ZeroPrint,
                      LPadCh(SchFact2.Num, ' ', Length(SchFact2.Num) + 1),
                      LPadCh(Ltrim(Trim(SchFact2.Num), '0'), ' ', Length(Trim(SchFact2.Num)) + 1)), '');

  // Для кн.покупок РБ от 2007 г. -  заполнение значений авансовых отчетов и РКО
  if (VidReport > 2) and (VidReport < 18) and (g_Direct <> cwDirect_Sell)
  {
    // Регистрация ГТД в книге покупок
    if (BookPrZk.SubTip = cwTotal_TypeBK_RegGTD)
    {
      IsBelarus := False;
      IsRussia  := False;
      strNum1 := DateToStr(BookPrZk.dOpr, dtFormat) + ' №' + BookPrZk.Num;
      strNum2 := sGetAttr(coKatSopr, BookPrZk.cSopr, sTune_Attr_GTDPlat);

      if (Trim(strNum2) = '')
        strNum2 := '-';
    }
    else
    {
      strNumRKO1 := '';
      strNumRKO2 := '';

      if (GetFirst SoprHoz = tsOk)
        if (GetFirst PlPor_RKO = tsOk)
          if (GetFirst PlPor_AO = tsOk)
            if (PlPor_AO.TiDkGal = cgDoc_0009) // авансовый отчет
            {
              if (GetFirst RashDoc = tsOk)
                strNumRKO1 := 'Чек № ' + RashDoc.NomKvit;

              strNumRKO1 := strNumRKO1 + ' Ав.отчет № ' + PlPor_AO.NoDok +
                            ' от ' + DateToStr(PlPor_AO.DatOb, dtFormat) + ' ';

              strNumRKO2 := 'РКО № ' + PlPor_RKO.NoDok +
                            ' от ' + DateToStr(PlPor_RKO.DatOb, dtFormat) + ' ';
            }

      strNum1 := Trim(if (Trim(strNumRKO1) <> '', strNumRKO1, strNum1));

      if (strNum1 = '')
        strNum2_Copy := strNum2;

      strNum2 := if (IsRussia,
                   if (BookPrZk.dOpl = ZeroDate, '', DateToStr(BookPrZk.dOpl, dtFormat) +
                                                if (strNum2 = '', '', ' № ' + strNum2)),
                   if (IsBelZakon2007, '-',
                     if (Trim(strNumRKO2) <> '', strNumRKO2,
                       if (BookPrZk.dOpl = ZeroDate, '', DateToStr(BookPrZk.dOpl, dtFormat)) +
                                                    if (strNum2 = '', '', ' № ' + strNum2))));

      strNum2 := Trim(strNum2);

      // Ситуация, когда IsBelZakon2007, а у записи только ссылка на платеж SchFact2.
      // Суммовая разница, например
      if ((strNum1 = '') and ((strNum2 = '-') or (strNum2 = '') or (strNum2 = '№')))
      {
        strNum2 := if (BookPrZk.dOpl = ZeroDate, '', DateToStr(BookPrZk.dOpl, dtFormat)) +
                   if (strNum2_Copy = '', '', ' № ' + strNum2_Copy);

        // метод по отгрузке, в колонке оплаты только таможенный документы по контрагенту из РФ
        if (IsBelZakon2007)
        {
          strNum1 := strNum2;
          strNum2 := '-';
        }
      }

      if (Trim(strNum2) = '')
        strNum2 := '-';
    }
  }

  pXL.ClearTblBuffer;

  // Книги 2006г., РФ
  if ((VidReport = 33) or (VidReport = 40) or (VidReport = 34) or (VidReport = 41))
    pXL.SetTblStringFldValue('ДатаОпл', sSomeDateOplata);
  else if ((VidReport = 35) or (VidReport = 53) or (VidReport = 42) or (VidReport = 44) or (VidReport = 36) or (VidReport = 45) or (VidReport = 54) or (VidReport = 55))  // Книги c 2014г., РФ
  {
    SetManyDateNumOpl(True);
  }
  else
    pXL.SetTblStringFldValue('ДатаОпл', if (gen_DOplRes = ZeroDate, '', DateToStr(gen_DOplRes, dtFormat)));


  // Поле ДатаНомер, может быть список исходных СФ для корректировок
  if (not gen_IsCorrV)
  {
    pXL.SetTblStringFldValue('ДатаНомер', DatNomSF);
  }
  else
  {
    // Корректировочный СФ
    _SrcSF :=
      oForPrint.Get_List_SF_Src_CorrV(cSchFact_Original,
                                      if (g_isExcelAllSrc, cw_PrintAllSF, cw_PrintOneSF) +
                                      cw_PrintBK +
                                      if (ZeroPrint, cw_PrintZero, 0) +
                                      if (bZak2014, cw_Zak2014, 0));

    // Данные помещаются в строку
    if (_SrcSF <> '')
    {
      pXL.SetTblStringFldValue('ДатаНомер', _SrcSF);
    }
    else
    {
      // Данные во временной таблице
      StrRes := '';

      _loop tmpListSF
      {
        if (Length(StrRes) + Length(tmpListSF.Info) + cb_Razdelit_Len > 250)
        {
          pXL.AddTblStringFldValue('ДатаНомер', StrRes);
          StrRes := cs_Razdelit_Num + tmpListSF.Info;
        }
        else
        {
          StrRes += if (StrRes <> '', cs_Razdelit_Num, '') + tmpListSF.Info;
        }
      }

      if (StrRes <> '')
        pXL.AddTblStringFldValue('ДатаНомер', StrRes);
    }
  }

  pXL.SetTblStringFldValue('ДатаНомК', if (gen_NumKSF = '' and gen_DateKSF = ZeroDate, '',
                                           if (ZeroPrint, gen_NumKSF, LTrim(Trim(gen_NumKSF), '0')) + if (gen_DateKSF = ZeroDate, '', ' ' + DateToStr(gen_DateKSF, dtFormat))));
  pXL.SetTblStringFldValue('ДатаНомИспр', if (gen_NumIsprSF = '' and gen_DateIsprSF = ZeroDate, '',
                                              LTrim(Trim(gen_NumIsprSF), '0') + if (gen_DateIsprSF = ZeroDate, '', ' ' + DateToStr(gen_DateIsprSF, dtFormat))));
  pXL.SetTblStringFldValue('ДатаНомИспрК', if (gen_NumKIsprSF = '' and gen_DateKIsprSF = ZeroDate, '',
                                              LTrim(Trim(gen_NumKIsprSF), '0') + if (gen_DateKIsprSF = ZeroDate, '', ' ' + DateToStr(gen_DateKIsprSF, dtFormat))));
  pXL.SetTblStringFldValue('ДатаОтгрНомер', DatNomKS);
  pXL.SetTblStringFldValue('НомерДО', NomDO);

  // Штрих-кода
  Set _SF_ForBar := oForPrint.Get_NRecSFForBK(BookPrZk.NRec); // ШК текущей, а не исходной СФ

  // Направление из СФ, т.к. у СФ и записи могут быть разные направления, например, Регистрация аванса в момент отгрузки
  var _Dir : Word;
  _Dir := if (IsValid(tnSchFact_Bar), SchFact_Bar.Direct, BookPrZk.Direct);

  pXL.SetTblStringFldValue('SF_BarCode', GetDocBarCode(if (_Dir = cwDirect_Sell, cwGlobalCodeSF_Sell, cwGlobalCodeSF_Buy), _SF_ForBar));

  if (IsValid(tnSoprHoz_Bar))
    pXL.SetTblStringFldValue('Prim_BarCode', GetDocBarCodeBySoprHoz(SoprHoz_Bar.NRec));

  var bIsUslForeignOrg: boolean = false;
  var bIsDisplayDataPlat: boolean = false;

  if (bIsReport2015Bel)
    if (IsValid(tnSoprHoz) and (BookPrZk.TipUser = cwTypeBK_Buy_RegRash))
    {
      if ((TypeCountry(BookPrZk.cOrg, BookPrZk.Direct) != tcBel))
        _loop SpStep where ((SoprHoz.cStepDoc == SpStep.cStepDoc))
        {
          bIsUslForeignOrg := (SpStep.PrMC != 1);
          if (not bIsUslForeignOrg)
            Break;
        }

      bIsDisplayDataPlat := (IsBuhSpravka(SoprHoz.TiDkGal) or bIsUslForeignOrg);
    }

  // вычисление 'ДатаОплНомер' для РБ 2015
  var sDateNomOpl : String;
  sDateNomOpl := '';

  if ((bIsReport2015Bel) and (g_KodOpBel <> cb_KodOp_NDS_TamOrg))
  {
    if (g_KodOpBel = cb_KodOp_NeverNDS)
    {
      if IsValid(tnSchFact1)
      {
        if (SchFact1.cStepDoc <> Comp(0))
        {
          set cStepDoc_BaseFin := SchFact1.cStepDoc;

          if (GetFirst BaseFin_OtgrGTD = tsOk) // индекс по дате
            if (GetFirst PlPor_SFNalAkt = tsOk)
              sDateNomOpl := if (PlPor_SFNalAkt.DatOb = ZeroDate, '', DateToStr(PlPor_SFNalAkt.DatOb, dtFormat))
                                      + if (trim(PlPor_SFNalAkt.NoDOK)= '', '', ' №' + PlPor_SFNalAkt.NoDOK)
        }
      }
      else
        sDateNomOpl := strNum2;
    }
    else
    {
      sDateNomOpl := if (VidReport = 13, DatNomKS, DatNomSF); // 13 - Книга покупок (с 01.07.2016)

      // Для бухсправок отображаем дату и номер. Не законодательный вывод
      if (bIsDisplayDataPlat)
        if (GetFirst PlPor_RKO = tsOk)
          sDateNomOpl := if (PlPor_RKO.DatOb = ZeroDate, '', DateToStr(PlPor_RKO.DatOb, dtFormat))
                                     + if (trim(PlPor_RKO.NoDok)= '', '', ' №' + PlPor_RKO.NoDok);
    }
  }

  if (VidReport < 3) or (VidReport > 17)
    pXL.SetTblStringFldValue('ДатаОплНомер', if (BookPrZk.dOpl = ZeroDate, '', DateToStr(BookPrZk.dOpl, dtFormat)) + ' ' + strNum2);
  else
     // Для кн.покупок РБ от 2007 г.-  заполнение значений авансовых отчетов и РКО
    if (bIsReport2015Bel)
      pXL.SetTblStringFldValue('ДатаОплНомер',if (sDateNomOpl = '', '-', sDateNomOpl))
    else
      if (VidReport > 2) and (VidReport < 18) and (g_Direct <> cwDirect_Sell)
        pXL.SetTblStringFldValue('ДатаОплНомер', strNum2);
      else
        pXL.SetTblStringFldValue('ДатаОплНомер',
          if (IsRussia,
            if (BookPrZk.dOpl = ZeroDate, '', DateToStr(BookPrZk.dOpl, dtFormat) + strNum2),
            if (IsBelZakon2007, '-',
              if (BookPrZk.dOpl = ZeroDate, '', DateToStr(BookPrZk.dOpl, dtFormat)) + strNum2)));

  // Для кн.покупок РБ от 2007 г. -  заполнение значений авансовых отчетов и РКО
  if (VidReport > 2) and (VidReport < 18) and (g_Direct <> cwDirect_Sell)
    pXL.SetTblStringFldValue('ДатаОпрНомер', if (IsRussia, '', strNum1));
  else
    pXL.SetTblStringFldValue('ДатаОпрНомер', strAkt +
      if (IsRussia, if (strAkt <> '', '', '-'),
        if (BookPrZk.dOpr = ZeroDate, '', DateToStr(BookPrZk.dOpr, dtFormat)) + strNum1));

  sNazn := '';

  if (TuneCountry = ccRus)
  {
    if (g_isPrintNazn)
      if ((VidReport = 36 or VidReport = 45 or VidReport = 54 or VidReport = 55) and (g_Direct = cwDirect_Buy)) // для книги покупок с 2017 г. примечание "частичная оплата" не выводим (пока смотрим строку целиком)
        sNazn := if (Trim(UpCase(BookPrZk.Nazn)) = 'ЧАСТИЧНАЯ ОПЛАТА', '', BookPrZk.Nazn);
      else
        sNazn := BookPrZk.Nazn;
  }
  else
    sNazn := BookPrZk.Nazn;

  var bIsPrnSeller: boolean = (tmpBook.sKodOp <> cs_KodOp_RF_27);
  if (not bIsPrnSeller)
    bIsPrnSeller := if (IsValid(#SchFact1), doGetAttr(coSchFact, SchFact1.NRec, csAttrPrnSeller_Code27) <> 0, false);

  if (not bIsPrnSeller)
    sName := '';
  else
  {
    if (TuneCountry = ccBel)
      sName := gen_OrgName;
    else
      sName := AddDopStr(gen_OrgName, sNazn);

    if ((VidReport > 1) and (VidReport < 18) and (g_Direct <> cwDirect_Sell))
    {
      if (bIsReport2015Bel)
        sName := AddDopStr(sName, if (IsValid(tnKatState), KatState.Name, ''))
      else
        sName := AddDopStr(sName, if (not IsBelarus, if (IsValid(tnKatState), KatState.Name, ''), ''));
    }
  }

  pXL.SetTblStringFldValue('НаименованиеОрг', sName);
  pXL.SetTblStringFldValue('Примечание', sNazn);

  if (oFuncsSF.IsRussiaINN(gen_UNN, gen_NRecKatOrg_BK)) and bIsPrnSeller
  {
    if (bIsReport2015Bel)
      pXL.SetTblStringFldValue('УНН', if (gen_UNN = '', '-', gen_UNN))
    else
      pXL.SetTblStringFldValue('УНН', gen_UNN);

    pXL.SetTblStringFldValue('КПП', gen_KPP);
    pXL.SetTblStringFldValue('УНН_КПП', if (LTrim(Trim(gen_UNN + gen_KPP), '-') = '', '-', gen_UNN + '/' + gen_KPP));
  }
  else
  {
    pXL.SetTblStringFldValue('УНН', '-');
    pXL.SetTblStringFldValue('КПП', '-');
    pXL.SetTblStringFldValue('УНН_КПП', '-');
  }

  pXL.SetTblStringFldValue('ДатаПост',  if (gen_DatePost = ZeroDate, '',  DateToStr(gen_DatePost,dtFormat)));

  var sDateOpr : String = '';

  if (bIsReport2015Bel)
  {
    sDateOpr := '-';

    if ((g_KodOpBel <> cb_KodOp_NeverNDS) and (g_KodOpBel <> cb_KodOp_NDS_TamOrg))
    {
      if (IsValid(tnSchFact1))
        sDateOpr := if (KatSopr_OtgrSF.dOpr = ZeroDate, '-', DateToStr(KatSopr_OtgrSF.dOpr, dtFormat)); // дата оприходования связанного с записью книги сопрдока
      else
      {
        // СФ нет, регистрация ГТД в бюджет, раз код <> cb_KodOp_NDS_TamOrg
        if (BookPrZk.TipUser = cwTypeBK_Buy_RegGTD)
          sDateOpr := if (BookPrZk.dOpr = ZeroDate, '-', DateToStr(BookPrZk.dOpr, dtFormat));
        else //для ручной записи - дата оплаты
          if (BookPrZk.SubTip = cwTotal_TypeBK_HandCorr)
            sDateOpr := if (BookPrZk.dOpl = ZeroDate, '-', DateToStr(BookPrZk.dOpl, dtFormat));

        if (bIsDisplayDataPlat)
          sDateOpr := if (BookPrZk.dOpl = ZeroDate, '-', DateToStr(BookPrZk.dOpl, dtFormat));
      }
    }
  }
  else
    sDateOpr := if ((BookPrZk.dOpr = ZeroDate) or (isPrintDateOprForStornoVozvrAvans and bIsNewBook), '', DateToStr(BookPrZk.dOpr, dtFormat));

  pXL.SetTblStringFldValue('ДатаОпр', sDateOpr);

  if (bIsReport2015Bel)
    pXL.SetTblStringFldValue('КодОперации', if (wTune_MajorPayerBel = 0, '-', String(g_KodOpBel)));
  else
    pXL.SetTblStringFldValue('КодОперации', tmpBook.sKodOp);

  // Посредник
  if (IsExist_KO_Med)
  {
    var sKPP, sINN : String;

    sKPP := oHistory.sGetField(coKatOrg, KatOrg_Med.NRec,      'KODPLATNDS', gen_DateFact_ForHistory);
    sINN := oHistory.sGetField(coKatOrg, KatOrg_Med_Head.NRec, 'UNN',        gen_DateFact_ForHistory);
    pXL.SetTblStringFldValue('Наимен_Посредника',  oHistory.sGetField(coKatOrg, KatOrg_Med_Head.NRec, 'REP.KATORGNAME', gen_DateFact_ForHistory));

    if (oFuncsSF.IsRussiaINN(sINN, KatOrg_Med_Head.NRec))
      pXL.SetTblStringFldValue('УНН_КПП_Посредника', if (LTrim(Trim(sINN + sKPP), '-') = '', '-', sINN + '/' + sKPP));
    else
      pXL.SetTblStringFldValue('УНН_КПП_Посредника', '-');
  }

  if (IsValid(tnKlVal_BK))
    pXL.SetTblStringFldValue('Код_Наимен_Валюты', KlVal_BK.Dollar + ',' + KlVal_BK.ISO);

  bIsRasch_Stavka := False;
  bIs24           := False;
  ISSummAll_18_SF := 0;
  ISSummAll_24_SF := 0;
  ISNds24         := 0;
  ISSumm24        := 0;
  bIs25           := False;
  ISSummAll_25_SF := 0;
  ISNds25         := 0;
  ISSumm25        := 0;
  ISOsnSumm       := 0;
  ISOsnNds        := 0;
  ISSummAll_SF    := 0;
  ISDopSumm       := 0;
  ISDopNds        := 0;

  if (TuneCountry = ccBel)
  {
    if ((IsRussia) and (VidReport <> 11) and (VidReport <> 12) and (VidReport <> 13))
    {
      ISRusNds20 += arrSum[3];
      ISRusNds10 += arrSum[6];
    }

    if (IsValid(tnSchFact2))
      if (SchFact2.TipUser = cwTypeSF_Buy_Bel_PlatCalcStavka) // Платеж по расчетной ставке, налоги не стандартные
        bIsRasch_Stavka := True;

    if (IsValid(tnSchFact1))
      if (SchFact1.TipUser = cwTypeSF_Buy_Bel_OtgrCalcStavka) // Накладная поставщика по расчетной ставке, налоги не стандартные
        bIsRasch_Stavka := True;

    if (((VidReport = 8) or bIsReport2015Bel) and bIsRasch_Stavka)
    {
      ISDopSumm := arrSum[2] + arrSum[5];
      ISDopNds  := arrSum[3] + arrSum[6];

      if (bIsReport2015Bel)
      {
        if (wTune_MajorPayerBel = 1)
          if (GetFirst tmpListKodOp where ((g_cVal == tmpListKodOp.cVal and g_KodOpBel == tmpListKodOp.bKodOp)) = tsOk)
          {
            // перевод в тыс. руб. производится при печати
            tmpListKodOp.Sum[3] += ISDopNds;  // расчетная ставка
            tmpListKodOp.Sum[1] -= arrSum[3];    // вычитаем ранее добавленные расчетные ставки из сумм НДС по операциям
            tmpListKodOp.Sum[2] -= arrSum[6];
            Update current tmpListKodOp;
          }

        tmpListVal.Sum[cnstDelta_Total_Sums + 2] -= arrSum[3]; // вычитаем ранее добавленные расчетные ставки из общих сумм НДС
        tmpListVal.Sum[cnstDelta_Total_Sums + 5] -= arrSum[6];
        Update current tmpListVal;

        arrSum[1] /= wKoefThous;
        arrSum[2] /= wKoefThous;
        arrSum[3] /= wKoefThous;
        arrSum[5] /= wKoefThous;
        arrSum[6] /= wKoefThous;
        arrSum[8] := (arrSum[2] + arrSum[5]) / wKoefThous;
        arrSum[9] := (arrSum[3] + arrSum[6]) / wKoefThous;

        ISDopNds /= wKoefThous;
      }

      ItogDopNds += ISDopNds;
    }
    else
    {
      if (VidReport > 7 and VidReport < 11)
      {
        ISOsnSumm  := arrSum[2];   // arrSum[2] = BookPrZk.Sum[1]
        ISOsnNds   := arrSum[3];   // arrSum[3] = BookPrZk.Sum[2]
        ItogOsnNds += ISOsnNds;
      }
      else
      {
        _loop SpSchF_OtgrSF
        {
          if ((SpSchF_OtgrSF.PercNDS = 24) and (VidReport < 11) )
          {
            bIs24           := True;
            ISNds24         += SpSchF_OtgrSF.NDS;    // НДС
            ISSumm24        += SpSchF_OtgrSF.Sum;    // Сумма без НДС
            ISSummAll_24_SF += SpSchF_OtgrSF.SumAll; // Сумма по 24%
            ISSummAll_SF    += SpSchF_OtgrSF.SumAll; // Общая сумма по 18 и 24%
          }
          else
            if ((SpSchF_OtgrSF.PercNDS = 25) and (VidReport = 12))
            {
              bIs25           := True;
              ISNds25         += SpSchF_OtgrSF.NDS;    // НДС
              ISSumm25        += SpSchF_OtgrSF.Sum;    // Сумма без НДС
              ISSummAll_25_SF += SpSchF_OtgrSF.SumAll; // Сумма по 25%
              ISSummAll_SF    += SpSchF_OtgrSF.SumAll; // Общая сумма по осн и 25%
            }
            else
              if (SpSchF_OtgrSF.PercNDS = doTune_Stav1_calc)
              {
                ISSummAll_18_SF += SpSchF_OtgrSF.SumAll; // Сумма по основной ставке
                ISSummAll_SF    += SpSchF_OtgrSF.SumAll; // Общая сумма по 18 и 24%
              }
        }

        // Учет частичной оплаты
        IsPartBK := ((SchFact1.Summa - BookPrZk.Summa) > 1); // В РБ копеек нет

        if ((bIs24) or (bIs25))
        {
          if (not IsPartBK)
          {
            ISOsnSumm := arrSum[2] - ISSumm24 - ISSumm25;  // arrSum[2] = BookPrZk.Sum[1]
            ISOsnNds  := arrSum[3] - ISNds24  - ISNds25;   // arrSum[3] = BookPrZk.Sum[2]
          }
          else
          {
            // При частичной оплате некорректно рассчитывается НДС одновременно по основной и 24% ставкам
            dblPart18 := ISSummAll_18_SF / ISSummAll_SF;
            dblPart24 := ISSummAll_24_SF / ISSummAll_SF;
            dblPart25 := ISSummAll_25_SF / ISSummAll_SF;

            ISSummAll_18_SF := BookPrZk.Sum[3] * dblPart18;
            ISSummAll_24_SF := BookPrZk.Sum[3] * dblPart24;
            ISSummAll_25_SF := BookPrZk.Sum[3] * dblPart25;

            ISOsnNds  := ISSummAll_18_SF * doTune_Stav1_calc / (100 + doTune_Stav1_calc);
            ISNds24   := ISSummAll_24_SF * 24 / (100 + 24);
            ISNds25   := ISSummAll_25_SF * 25 / (100 + 25);

            ISOsnSumm := ISSummAll_18_SF - ISOsnNds;
            ISSumm24  := ISSummAll_24_SF - ISNds24;
            ISSumm25  := ISSummAll_25_SF - ISNds25;
          }

          if ((VidReport = 12) and (wTune_MajorPayerBel = 1))
            {
              if (wTune_MajorPayerBel = 1)
                if (GetFirst tmpListKodOp where ((g_cVal == tmpListKodOp.cVal and g_KodOpBel == tmpListKodOp.bKodOp)) = tsOk)
                {
                  // перевод в тыс. руб. производится при печати
                  tmpListKodOp.Sum[1] -= ISNds25;    // вычитаем  25% ставку из сумм НДС по операциям
                  tmpListKodOp.Sum[4] += ISNds25;    // добавляем к ставке 25%
                  Update current tmpListKodOp;
                }
            }
        }
        else
        {
          ISOsnSumm := arrSum[2];   // arrSum[2] = BookPrZk.Sum[1]
          ISOsnNds  := arrSum[3];   // arrSum[3] = BookPrZk.Sum[2]
        }

        ItogNds24 += ISNds24;

        if (VidReport = 7)
        {
          if (not gen_IsNDS20)
            ItogOsnNds:= ItogOsnNds + ISOsnNds;
          else
            ItogOsnNds_18 += ISOsnNds;
        }
        else
          ItogOsnNds += ISOsnNds;
      }

      if ((VidReport  = 2) or (VidReport  = 4) or (VidReport  = 6) or (VidReport  = 10)) and (g_Direct <> cwDirect_Sell)
      {
        arrSum[1] /= 1000;
        arrSum[2] := if (not IsRussia, arrSum[2]            / 1000, 0);
        arrSum[3] := if (not IsRussia, arrSum[3]            / 1000, 0);
        arrSum[5] := if (not IsRussia, arrSum[5]            / 1000, 0);
        arrSum[6] := if (not IsRussia, arrSum[6]            / 1000, 0);
        arrSum[8] := if (    IsRussia, (arrSum[2] + arrSum[5]) / 1000, 0);
        arrSum[9] := if (    IsRussia, (arrSum[3] + arrSum[6]) / 1000, 0);
        ISNds24   /= 1000;
        ISSumm24  /= 1000;
        ISOsnSumm /= 1000;
        ISOsnNds  /= 1000;
      }

      if ((VidReport = 11) or (VidReport = 13))
      {
        arrSum[1] /= wKoefThous;
        arrSum[2] /= wKoefThous;
        arrSum[3] /= wKoefThous;
        arrSum[5] /= wKoefThous;
        arrSum[6] /= wKoefThous;
        arrSum[8] := (arrSum[2] + arrSum[5]) / wKoefThous;
        arrSum[9] := (arrSum[3] + arrSum[6]) / wKoefThous;
      }

      if (VidReport = 12)
      {
        arrSum[1] /= wKoefThous;
        arrSum[2] /= wKoefThous;
        arrSum[3] /= wKoefThous;
        arrSum[5] /= wKoefThous;
        arrSum[6] /= wKoefThous;
        arrSum[8] := (arrSum[2] + arrSum[5]) / wKoefThous;
        arrSum[9] := (arrSum[3] + arrSum[6]) / wKoefThous;
        ISNds25   /= wKoefThous;
        ISSumm25  /= wKoefThous;
        ISOsnSumm /= wKoefThous;
        ISOsnNds  /= wKoefThous;

        ItogNds25 += ISNds25;
      }

      ISDopSumm := 0;
      ISDopNds  := 0;
      ItogNds10 += arrSum[6];
    }
  }

  arrGr[1]  += arrSum[1];
  arrGr[2]  += if (not gen_IsNDS20, arrSum[2], 0);
  arrGr[3]  += if (not gen_IsNDS20, arrSum[3], 0);
  arrGr[4]  += if (    gen_IsNDS20, arrSum[2], 0);
  arrGr[5]  += if (    gen_IsNDS20, arrSum[3], 0);
  arrGr[6]  += arrSum[5];
  arrGr[7]  += arrSum[6];
  arrGr[8]  += arrSum[8];
  arrGr[9]  += arrSum[10];
  arrGr[10] += arrSum[19]; // Общий НДС в руб.

  if (g_isGroupOtvPodr and (bIsReport2015Bel))
  {
    arrCO[3] += if (bIsRasch_Stavka, 0, arrSum[3] - ISNds25);
    arrCO[7] += if (bIsRasch_Stavka, 0, arrSum[6]);
    arrCO[4] += if (bIsRasch_Stavka, 0, ISNds25);
    arrCO[5] += ISDopNds;
  }
  else
  {
    arrCO[1]  += arrSum[1];
    arrCO[2]  += if (not gen_IsNDS20, arrSum[2], 0);
    arrCO[3]  += if (not gen_IsNDS20, arrSum[3], 0);
    arrCO[4]  += if (    gen_IsNDS20, arrSum[2], 0);
    arrCO[5]  += if (    gen_IsNDS20, arrSum[3], 0);
    arrCO[6]  += arrSum[5];
    arrCO[7]  += arrSum[6];
    arrCO[8]  += arrSum[8];
    arrCO[9]  += arrSum[10];
    arrCO[10] += arrSum[19]; // Общий НДС в руб.
  }

  pXL.SetTblNumberFldValue('Сумма',       arrSum[1]);  // сумма для книги продаж
  pXL.SetTblNumberFldValue('Сумма_Вал',   arrSum[17]); // сумма для книги продаж
  pXL.SetTblNumberFldValue('Сумма_ВалСФ', arrSum[18]); // сумма для книги покупок
  pXL.SetTblNumberFldValue('НДС',         arrSum[19]);

  if (IsLastExcelForms)
  {

    pXL.SetTblNumberFldValue('Сум1', arrSum[2]);
    pXL.SetTblNumberFldValue('Сум1_20',arrSum[20]);

    pXL.SetTblNumberFldValue('Сум2', arrSum[3]);
    pXL.SetTblNumberFldValue('Сум2_20', arrSum[21]);
  }
  else
  {
    pXL.SetTblNumberFldValue('Сум1',  arrSum[2]);
    pXL.SetTblNumberFldValue('Сум1_20',  arrSum[20]);

    pXL.SetTblNumberFldValue('Сум2',  if (((VidReport = 8) or bIsReport2015Bel) and bIsRasch_Stavka, 0, arrSum[3] - ISNds25));
  }

  npp++;
  pXL.SetTblNumberFldValue('Сум3', arrSum[4]);
  pXL.SetTblNumberFldValue('Сум4', if (VidReport = 8 and bIsRasch_Stavka, 0, arrSum[5]));
  pXL.SetTblNumberFldValue('Сум5', if (((VidReport = 8) or bIsReport2015Bel) and bIsRasch_Stavka, 0, arrSum[6]));
  pXL.SetTblNumberFldValue('Сум6', arrSum[7]);
  pXL.SetTblNumberFldValue('Сум7', arrSum[8]);
  pXL.SetTblNumberFldValue('Сум8', arrSum[9]);
  pXL.SetTblNumberFldValue('Сум9', arrSum[10]);
  pXL.SetTblNumberFldValue('Сум10', arrSum[11]);
  pXL.SetTblNumberFldValue('СумИн1', arrSum[12]);
  pXL.SetTblNumberFldValue('СумИн2', arrSum[13]);
  pXL.SetTblNumberFldValue('СумИн3', arrSum[14]);
  pXL.SetTblNumberFldValue('СумИн4', arrSum[15]);
  pXL.SetTblNumberFldValue('Сум23', arrSum[16]);

  if (bIsPrintNumPP_FromOne)
    pXL.SetTblNumberFldValue('НомПП', npp); // Доп. книга, нумерация строк с 1.
  else
    pXL.SetTblNumberFldValue('НомПП',
      if (g_NumParam = 0, BookPrZk.ls[1], npp));

  pXL.SetTblNumberFldValue('ТипЗап'   , BookPrZk.TipUser);
  pXL.SetTblNumberFldValue('ПодтипЗап', BookPrZk.SubTip);

  if ((VidReport = 8) or bIsReport2015Bel)
  {
    if (VidReport = 12)
      pXL.SetTblNumberFldValue('Сум1Доп', ISNds25);
    else
      pXL.SetTblNumberFldValue('Сум1Доп', ISDopSumm);

    pXL.SetTblNumberFldValue('Сум2Доп', ISDopNds);
  }
  else
  {
    if (VidReport = 7) and (g_Direct = cwDirect_Buy)
    {
      pXL.SetTblNumberFldValue('Сум1Доп', if (gen_IsNDS20, ISOsnSumm, 0));
      pXL.SetTblNumberFldValue('Сум2Доп', if (gen_IsNDS20, ISOsnNds, 0));
    }
    else
    {
      pXL.SetTblNumberFldValue('Сум1Доп', if (gen_IsNDS20, arrSum[2], 0));
      pXL.SetTblNumberFldValue('Сум2Доп', if (gen_IsNDS20, arrSum[3], 0));
    }
  }

  pXL.SetTblNumberFldValue('Сум24'     , ISSumm24);
  pXL.SetTblNumberFldValue('Сум24_НДС' , ISNds24);

  if (VidReport = 7)
  {
    pXL.SetTblNumberFldValue('СумОсн'    , if (not gen_IsNDS20, ISOsnSumm, 0));
    pXL.SetTblNumberFldValue('СумОсн_НДС', if (not gen_IsNDS20, ISOsnNds,0));
  }
  else
  {
    pXL.SetTblNumberFldValue('СумОсн'    , ISOsnSumm);
    pXL.SetTblNumberFldValue('СумОсн_НДС', ISOsnNds);
  }

  if (bIsReport2015Bel)
  {
    var sDateOplNDS : String;

    sDateOplNDS := '';

    case g_KodOpBel of

      cb_KodOp_NDS_NalOrg :
        sDateOplNDS := if (SchFact1.DS[2] = ZeroDate, '', DateToStr(SchFact1.DS[2], dtFormat));;

      cb_KodOp_NDS_TamOrg :
        sDateOplNDS := if (NalAkt.DSopr = ZeroDate, '', DateToStr(NalAkt.DSopr, dtFormat));;

      cb_KodOp_NeverNDS :
      {
        var bMonth, bDay : Byte;
        var wYear : Word;
        var dateOplNDS : Date;

        if (BookPrZk.dOpl <> ZeroDate)
        {
          wYear  := Year(BookPrZk.dOpl);
          bMonth := Month(BookPrZk.dOpl);
          bDay   := 22;

          dateOplNDS  := Date(bDay, bMonth, wYear);
          sDateOplNDS := DateToStr(dateOplNDS, dtFormat);
        }
      }

    end;

    pXL.SetTblStringFldValue('Дата_записи' , if (g_KodOpBel = cb_KodOp_NDS_TamOrg and BookPrZk.DReg <> ZeroDate, DateToStr(BookPrZk.DReg, dtFormat), '-'));
    pXL.SetTblStringFldValue('Номер_записи', if (g_KodOpBel = cb_KodOp_NDS_TamOrg, BookPrZk.Num, '-'));

    // определение даты и номера оплаты для поля 'ДатаОплНомер_ДатаОплНДС'
    var dDocOplNDS : Date;

    sDateNomOpl := '';

    dDocOplNDS  := GetDate_NumOplNDSBel(sDateNomOpl);
    sDateNomOpl := if (dDocOplNDS = ZeroDate, '', DateToStr(dDocOplNDS, dtFormat)) + ' ' + sDateNomOpl;
    sDateNomOpl := Trim(sDateNomOpl);

    pXL.SetTblStringFldValue('ДатаОплНомер_ДатаОплНДС', sDateNomOpl + if ((sDateOplNDS <> '') and (sDateNomOpl <> ''), ', ', '') + sDateOplNDS
                                                      + if (sDateOplNDS = '' and sDateNomOpl = '', '-', ''));

    // определение даты и номера ЭСФ
    var sDateElectrSF, sNumElectrSF, aNumE : String;
    var bIsExistElectrSF : boolean;

    sDateElectrSF := '-';
    sNumElectrSF  := '-';
    bIsExistElectrSF := False;
    _ElectrSF := 0;
    aNumE     := '';

    if (bIsExistElectrSF := IsValid(tnSchFact1))
      Set _ElectrSF := SchFact1.NRec;
    else
      if (bIsExistElectrSF := IsValid(tnSchFact2))
        Set _ElectrSF := SchFact2.NRec;

    if (not bIsExistElectrSF) and (g_KodOpBel = cb_KodOp_NDS_TamOrg)
      if (bIsExistElectrSF := Is_GTD_NalAktLinkNakl)
        Set _ElectrSF := GTD_Nakl.cSchFact;

    if (bIsExistElectrSF)
      if (GetFirst StatusEDO where (( coSchFact == StatusEDO.wTable
                                  and _ElectrSF == StatusEDO.cRec   )) = tsOk)
        if (StatusEDO.Status = st_COMPLETED or StatusEDO.Status = st_COMPLETED_SIGNED)
          if (GetFirst SchFactEl = tsOk)
          {
            sDateElectrSF := if (StatusEDO.Changed <> ZeroDateTime, _DateTimeToStr(StatusEDO.Changed, dtFormat), '-');

            aNumE := TUNP(KatOrgEl.UNN) + '-' + String(Year(SchFactEl.dPost)) + '-' + LPadCh(SchFactEl.Num, '0', 10);
            sNumElectrSF  := if (aNumE = '', '-', aNumE);
          }

    pXL.SetTblStringFldValue('ДатаЭлектронногоСФ',  sDateElectrSF);
    pXL.SetTblStringFldValue('НомерЭлектронногоСФ', sNumElectrSF);
  }

  if (bIsNewBook)
  {
    // Получаем значения поля и ссылки "Назначения" из сопрдока
    var cNaznachKatSopr : comp;
    var sNaznachKatSopr : String;
    cNaznachKatSopr := GetValue_cNRecNaznach(sNaznachKatSopr);

    pXL.SetTblStringFldValue('НаименованиеНазначенияСопрдока', sNaznachKatSopr);
    pXL.SetTblNumberFldValue('СсылкаНазначенияСопрдока', cNaznachKatSopr);

    if (IsValid(tnFpCO))
      pXL.SetTblStringFldValue('ЦентрОтветственности',  FpCO.Name);

    pXL.SetTblStringFldValue('Дескриптор', BookPrZk.Descr);
    pXL.SetTblStringFldValue('ГруппаДескрипторов', BookPrZk.DesGr);
  }

  NoData := False;

  // Для сводной книги покупок РБ при группировке по ЦО данные по записям регистрации отсутствуют
  if (g_isGroupOtvPodr and (bIsReport2015Bel))
  {
    pXL.ClearTblBuffer;
    Exit;
  }

    // ГТД
  if ((VidReport > 37) or ((VidReport > 30) and (VidReport <= 36 or VidReport = 45))) and (g_Direct <> cwDirect_Sell) and (not Is_CorrV_BK(BookPrZk.TipUser))
    PrintGTD;
  else
    if ((VidReport = 36) or (VidReport = 45) or (VidReport = 54) or (VidReport = 55)) and (g_Direct = cwDirect_Sell)  // книги 01.10.2017
    {
      PrintGTDAndTNVED_XL;
    }
    else
    {
      pXL.SetTblStringFldValue('СтранаГТД', '');
      pXL.SetTblStringFldValue('КодТНВЭД', '');
      pXL.InsTblRow;
    }
}

procedure PrintCurrentBookPrZkXMLBel(iZnak : Integer);
var
  BookPurchasesReportPayers_v1_t001_ri,     // Номер п/п
  BookPurchasesReportPayers_v1_t001_ric2,   // Код вида операции
  BookPurchasesReportPayers_v1_t001_ric3,   // Дата совершения покупок
//BookPurchasesReportPayers_v1_t001_ric3_2, // Вторая дата совершения покупок
  BookPurchasesReportPayers_v1_t001_ric4_1, // Реквизиты документа, подтверждающего совершение покупок, дата
  BookPurchasesReportPayers_v1_t001_ric4_2, // Реквизиты документа, подтверждающего совершение покупок, номер
  BookPurchasesReportPayers_v1_t001_ric5,
  BookPurchasesReportPayers_v1_t001_ric6,
  BookPurchasesReportPayers_v1_t001_ric7_1,
  BookPurchasesReportPayers_v1_t001_ric7_2,
  BookPurchasesReportPayers_v1_t001_ric7_3,
  BookPurchasesReportPayers_v1_t001_ric7a,
  BookPurchasesReportPayers_v1_t001_ric7b,
  BookPurchasesReportPayers_v1_t001_ric8,
  BookPurchasesReportPayers_v1_t001_ric9,
  BookPurchasesReportPayers_v1_t001_ric10,
  BookPurchasesReportPayers_v1_t001_ric11,
  BookPurchasesReportPayers_v1_t001_ric12,
  BookPurchasesReportPayers_v1_t001_ric13
  : Comp;

  sNumOpl,
  sNumOplNDS,
  sNameOrg
  : String;

  dOpl,
  dDocOplNDS,
  dOplNDS,
  dOpr
  : Date;

  bIsRasch_Stavka,
  IsRussia
  : Boolean;
{
  npp++;
  sNumOpl := '';
  sNumOplNDS := '';
  dOpr := ZeroDate;

  dOpl := GetDate_NumOplXMLBel(sNumOpl);
  dDocOplNDS := GetDate_NumOplNDSBel(sNumOplNDS);
  dOplNDS := GetDateOplNDSXMLBel;

  if ((g_KodOpBel <> cb_KodOp_NDS_TamOrg) and  (g_KodOpBel <> cb_KodOp_NeverNDS))
  {
    if (IsValid(tnSchFact1))
      dOpr := KatSopr_OtgrSF.dOpr; // дата оприходования связанного с записью книги сопрдока
    else
    {
      // СФ нет, регистрация ГТД в бюджет, раз код <> cb_KodOp_NDS_TamOrg
      if (BookPrZk.TipUser = cwTypeBK_Buy_RegGTD)
        dOpr := BookPrZk.dOpr;
      else //для ручной записи - дата оплаты записи регистрации
        if (BookPrZk.SubTip = cwTotal_TypeBK_HandCorr)
          dOpr := BookPrZk.dOpl;
    }
  }

  sNameOrg := gen_OrgName;

  IsRussia := False;

  if (GetFirst KatState = tsOk)
  {
    sNameOrg := AddDopStr(sNameOrg, if (not (trim(KatState.KOD) = sKod_Bel), if (IsValid(tnKatState), KatState.Name, ''), ''));

    if (BookPrZk.SubTip <> cwTotal_TypeBK_RegGTD)
      IsRussia  := trim(KatState.KOD) = sKod_Russ;
  }

  bIsRasch_Stavka := False;

  if (IsValid(tnSchFact2))
   if (SchFact2.TipUser = cwTypeSF_Buy_Bel_PlatCalcStavka) // Платеж по расчетной ставке, налоги не стандартные
     bIsRasch_Stavka := True;

  if (IsValid(tnSchFact1))
    if (SchFact1.TipUser = cwTypeSF_Buy_Bel_OtgrCalcStavka) // Накладная поставщика по расчетной ставке, налоги не стандартные
      bIsRasch_Stavka := True;

  if bIsRasch_Stavka
  {
    if (wTune_MajorPayerBel = 1)
      if (GetFirst tmpListKodOp where ((g_cVal == tmpListKodOp.cVal and g_KodOpBel == tmpListKodOp.bKodOp)) = tsOk)
      {
        // перевод в тыс. руб. производится при печати
        tmpListKodOp.Sum[3] += arrSum[3] + arrSum[6];  // расчетная ставка
        tmpListKodOp.Sum[1] -= arrSum[3];           // вычитаем ранее добавленные расчетные ставки из сумм НДС по операциям
        tmpListKodOp.Sum[2] -= arrSum[6];
        Update current tmpListKodOp;
      }

    ItogDopNds += arrSum[3] + arrSum[6];
    tmpListVal.Sum[cnstDelta_Total_Sums + 2] -= arrSum[3]; // вычитаем ранее добавленные расчетные ставки из общих сумм НДС
    tmpListVal.Sum[cnstDelta_Total_Sums + 5] -= arrSum[6];
    Update current tmpListVal;
  }

  BookPurchasesReportPayers_v1_t001_ri     := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_ri', '');  // включает в себя все по текущей записи книги

  BookPurchasesReportPayers_v1_t001_ric2   := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric2'  , if (wTune_MajorPayerBel = 0, '', String(g_KodOpBel)));

  BookPurchasesReportPayers_v1_t001_ric3   := AddNode_DateTime_XML(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric3'  , dOpr, ZeroTime);
//BookPurchasesReportPayers_v1_t001_ric3_2 := AddNode_DateTime_XML(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric3_2'  , dOpl, ZeroTime); // вторая дата совершения покупок
  BookPurchasesReportPayers_v1_t001_ric4_1 := AddNode_DateTime_XML(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric4_1', dOpl, ZeroTime);
  BookPurchasesReportPayers_v1_t001_ric4_2 := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric4_2'  , sNumOpl);
  BookPurchasesReportPayers_v1_t001_ric5   := AddNode_DateTime_XML(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric5'  , if (g_KodOpBel = cb_KodOp_NDS_TamOrg, BookPrZk.DReg, ZeroDate), ZeroTime);
  BookPurchasesReportPayers_v1_t001_ric6   := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric6'  , if (g_KodOpBel = cb_KodOp_NDS_TamOrg, BookPrZk.Num, ''));
  BookPurchasesReportPayers_v1_t001_ric7_1 := AddNode_DateTime_XML(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric7_1', dDocOplNDS, ZeroTime);
  BookPurchasesReportPayers_v1_t001_ric7_2 := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric7_2', String(sNumOplNDS));
  BookPurchasesReportPayers_v1_t001_ric7_3 := AddNode_DateTime_XML(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric7_3', dOplNDS, ZeroTime);

  // определение даты и номера ЭСФ
  var dDateElectrSF : Date;
  var sNumElectrSF: String;
  var bIsExistElectrSF : boolean;

  dDateElectrSF := ZeroDate;
  sNumElectrSF  := '';
  bIsExistElectrSF := False;
  _ElectrSF := 0;

  if (bIsExistElectrSF := IsValid(tnSchFact1))
    Set _ElectrSF := SchFact1.NRec;
  else
    if (bIsExistElectrSF := IsValid(tnSchFact2))
      Set _ElectrSF := SchFact2.NRec;

  if (bIsExistElectrSF)
    if (GetFirst StatusEDO where (( coSchFact == StatusEDO.wTable
                                and _ElectrSF == StatusEDO.cRec   )) = tsOk)
      if (StatusEDO.Status = st_COMPLETED or StatusEDO.Status = st_COMPLETED_SIGNED)
        if (GetFirst SchFactEl = tsOk)
        {
          dDateElectrSF := _GetDate(StatusEDO.Changed);
          sNumElectrSF := TUNP(KatOrgEl.UNN) + '-' + String(Year(SchFactEl.dPost)) + '-' + LPadCh(SchFactEl.Num, '0', 10);
        }

  BookPurchasesReportPayers_v1_t001_ric7a  := AddNode_DateTime_XML(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric7a', dDateElectrSF, ZeroTime);
  BookPurchasesReportPayers_v1_t001_ric7b  := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric7b' , sNumElectrSF);
  BookPurchasesReportPayers_v1_t001_ric8   := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric8'  , String(sNameOrg));
  BookPurchasesReportPayers_v1_t001_ric9   := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric9'  , gen_UNN);
  BookPurchasesReportPayers_v1_t001_ric10  := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric10' , Num_17_2(arrSum[1]));

  var sZeroSum17_2: String;
  sZeroSum17_2 := Num_17_2(0);

  if bIsRasch_Stavka
  {
    BookPurchasesReportPayers_v1_t001_ric11  := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric11' , sZeroSum17_2);
    BookPurchasesReportPayers_v1_t001_ric12  := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric12' , sZeroSum17_2);
    BookPurchasesReportPayers_v1_t001_ric13  := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric13' , Num_17_2(arrSum[3] + arrSum[6]));
  }
  else
  {
    BookPurchasesReportPayers_v1_t001_ric11  := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric11' , Num_17_2(arrSum[3]));
    BookPurchasesReportPayers_v1_t001_ric12  := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric12' , Num_17_2(arrSum[6]));
    BookPurchasesReportPayers_v1_t001_ric13  := AddNode(BookPurchasesReportPayers_v1_t001_ri, 'BookPurchasesReportPayers_v1_t001_ric13' , sZeroSum17_2);
  }
}

procedure PrintCurrentBookPrZkXMLRus(iZnak : Integer);
{
  #__UnUsed__(iZnak)

  // Сведения о покупке\продаже
  SvPokProd(refDoc);
}

procedure PrintCurrentBookPrZkXML(iZnak : Integer);
{
  case TuneCountry of
    ccBel:
      PrintCurrentBookPrZkXMLBel(iZnak);

    ccRus:
      PrintCurrentBookPrZkXMLRus(iZnak);
  end;
}

// Печать текущей записи книги (общая для всех типов отчета)
procedure PrintCurrentBookPrZk(aRec : Comp; iZnak : Integer);
{
  if (not #_getFast_nRec(BookPrZk, aRec))
    Exit;

  // Корректирующие записи с нулевыми суммами не выводятся.
  if ((Abs(BookPrZk.Summa) <= cnstNullDouble) and (BookPrZk.Subtip = cwTotal_TypeBK_Correcting))
    Exit;

  if (ExistFilial) // Проверка - является ли база филиальной
  {
    TuneMyOrg_CurrBK :=
      coGetTuneEx('MyOrg', OfficeFilialTune(GetCurrOffice, FilialNo(BookPrZk.Atl_Branch)), Comp(0));
  }

  if (TuneCountry = ccRus)
    _SF_Dop := tmpBook.SF_Dop;
  else
    if (bIsReport2015Bel)
      g_KodOpBel := GetKodOpBel;

  SetDateNumSF;           // установка значений глобальных переменных номеров и дат СФ
  SetDateOpl;             // установка значений глобальных переменных даты оплаты
  SetKatOrgInfo(False);   // установка организации, КПП и ИНН

  SetSumsByCurrentBookPrZk(iZnak);

  gen_IsNDS20 := IsNDS20(BookPrZk.Sum[1], BookPrZk.Sum[2],
                        if (BookPrZk.dOpr = ZeroDate, BookPrZk.dReg, BookPrZk.dOpr));

  if (NeedGTD_From2017)
    LoadGTD;

  LoadTNVED(gen_NRecKatOrg);

  case toc of
    cw_Text  : PrintCurrentBookPrZkFCom(iZnak);  // Печать текущей записи книги в бизнес-тексте;
    cw_Excel : PrintCurrentBookPrZkXL(iZnak);    // Печать текущей записи книги в Excel;
    cw_XML   : PrintCurrentBookPrZkXML(iZnak);   // Печать текущей записи книги в XML;
  end;
}

// Печать данных по текущей валюте
procedure PrintByCurrentVal;
var
  iZnak, iNumGr   : Integer;
  lErrCnt, lCount : LongInt;
{
  if (toc = cw_Text)
  {
    frmBkPrZkF.PutEventById(feDoLoop, fcBkPrZkVal);
    WriteKlValInfo(g_cVal);
  }
  else
    if (toc = cw_Excel)
    {
      if (VidReport = 18)
      {
        pXL.ClearTblBuffer;
        if (#_getFast_nRec(KlVal, g_cVal))
          pXL.SetTblStringFldValue('ДатаНомер', 'Регистрация в ' + KlVal.Dollarah + if (not g_isNDEEqual, '', '(НДЕ-эквивалент)'));
        else
          pXL.SetTblStringFldValue('ДатаНомер', 'Регистрация в ' + sTune_NameRublah);
        pXL.InsTblRow;
      }
      else
        if ((VidReport > 36) and (VidReport <> 45) and (VidReport <> 53) and (VidReport <> 54) and (VidReport <> 55))
        {
          pXL.ClearTblBuffer;
          if (#_getFast_nRec(KlVal, g_cVal))
            pXL.SetTblStringFldValue('ДатаНомер', '   Регистрация счетов-фактур в ' + KlVal.Dollarah + if (not g_isNDEEqual, if (VidReport = 42 or VidReport = 44, '(в рублях и копейках)', ''), '(НДЕ-эквивалент)'));
          else
            pXL.SetTblStringFldValue('ДатаНомер', '   Регистрация счетов-фактур в ' + sTune_NameRublah);
          pXL.InsTblRow;
        }
    }

  strTipUsersName := '';
  strPodrName     := '';
  strObjectName   := '';
  strDesGr        := '';
  strKatOrgName   := '';

  for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
  {
    arrGr[iNumGr] := 0.0;
    arrCO[iNumGr] := 0.0;
  }

  cNPrintNoteBook := 0;
  lErrCnt         := 0;

  StartNewVisual(vtNumericVisual + vfScreenBottom, vfTimer, 'Подсчет итераций по валюте', 1);

  lCount := 0;
  bIsPrint_Corrected := False;

  _loop tmpBook where ((tmpListVal.cVal == tmpBook.cVal  and
                        prMain          == tmpBook.TypeRec))
  {
    NextVisual;
    lCount++;
  }

  StopVisual;

  StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать данных по валюте', lCount);

  _loop tmpBook where ((tmpListVal.cVal == tmpBook.cVal  and
                        prMain          == tmpBook.TypeRec))
                      ordered by index tmpBook01
  {
    NextVisual;

    // Печать корректируемых СФ, привязанных к текущей записи BookPrZk
    if (bIsOnlyCorrectBK)
    {
      _loop tmpBook_Corrected where ((tmpListVal.cVal   == tmpBook_Corrected.cVal     and
                                      prCorrected       == tmpBook_Corrected.TypeRec  and
                                      tmpBook.cBookPrZk == tmpBook_Corrected.cCorrected_BookPrZk))
      {
        if ( RecordExists BookPrZk where (( tmpBook_Corrected.cBookPrZk == BookPrZk.nRec )) <> tsOk )
        {
          lErrCnt++;

          frmProt.Write(String(tmpBook_Corrected.cBookPrZk));
          Continue;
        }

        // Аннулируемые записи с '-'
        iZnak := -1;

        // В PrintCurrentBookPrZk использую tmpBook, а не tmpBook_Corrected, т.к. корректирующие записи всегда попадают туда же, куда и основные.
        bIsPrint_Corrected := True;
        PrintCurrentBookPrZk(tmpBook_Corrected.cBookPrZk, iZnak); // Печать текущей записи книги
        bIsPrint_Corrected := False;
      }
    }

    // Доп.лист книги продаж - корректирующие записи с '+'
    // Доп.лист книги покупок, выводятся или аннулируемые записи с '-'
    // или спецкорректирующие и непривязанные с '+'
    iZnak := if (not bIsDopBook, 1,
               if (g_Direct = cwDirect_Sell, 1,
                 if ((tmpBook.wCorrZk_Dop = 1) or (tmpBook.wNotLink = 1), 1, -1)));

    if ( RecordExists BookPrZk where (( tmpBook.cBookPrZk == BookPrZk.nRec )) = tsOk )
      PrintCurrentBookPrZk(tmpBook.cBookPrZk, iZnak) // Печать текущей записи книги
    else
    {
      lErrCnt++;

      frmProt.Write(String(tmpBook.cBookPrZk));
    }
  }

  StopVisual;

  if (lErrCnt > 0)
  {
    frmProt.PutEvent(feBreak);

    if (not frmProt.Error)
      frmProt.ShowFile('Список записей, не попавших в отчет (BookPrZk.NRec)');
    else
      frmProt.AbortForm;
  }

  if (toc = cw_Excel)
  {
    if (bIsReport2015Bel)
    {
      if (g_isGroupOtvPodr)
        if (strPodrName <> '')
        {
          if (bIsReport2015Bel)
          {
            ClearBuffer(#tmpListPodr);

            tmpListPodr.sPodrName := strPodrName;
            tmpListPodr.sum[1]    := arrCO[3];
            tmpListPodr.sum[2]    := arrCO[7];
            tmpListPodr.sum[3]    := arrCO[5];
            tmpListPodr.sum[4]    := arrCO[4];

            Insert current tmpListPodr;
          }

          for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
            arrCO[iNumGr] := 0.0
        }
    }

    if ((VidReport > 36) and (VidReport < 51) and (VidReport <> 45))
    {
      if (g_isGroupOtvPodr)
        if (strPodrName <> '')
        {
          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('ДатаНомер','   Итого по подразделению ' + strPodrName + ':');

          if (VidReport <> 42) or (VidReport <> 44)
            pXL.SetTblNumberFldValue('Сумма', arrCO[1]);

          pXL.SetTblNumberFldValue('Сум1'   , arrCO[2]);
          pXL.SetTblNumberFldValue('Сум2'   , arrCO[3]);
          pXL.SetTblNumberFldValue('Сум4'   , arrCO[6]);
          pXL.SetTblNumberFldValue('Сум5'   , arrCO[7]);
          pXL.SetTblNumberFldValue('Сум9'   , arrCO[9]);
          pXL.SetTblNumberFldValue('Сум1Доп', arrCO[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', arrCO[5]);
          pXL.SetTblNumberFldValue('Сум7'   , arrCO[8]);
          pXL.SetTblNumberFldValue('НДС'    , arrCO[10]);

          pXL.InsTblRow;

          for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
            arrCO[iNumGr] := 0.0
        }

      if (strTipUsersName <> '')
        if NeedPrintItogGroup
        {
          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('ДатаНомер','   Итого по типу записей: ' + strTipUsersName);

          if (VidReport <> 42)  or (VidReport <> 44)
            pXL.SetTblNumberFldValue('Сумма', arrGr[1]);

          pXL.SetTblNumberFldValue('Сум1'   , arrGr[2]);
          pXL.SetTblNumberFldValue('Сум2'   , arrGr[3]);
          pXL.SetTblNumberFldValue('Сум4'   , arrGr[6]);
          pXL.SetTblNumberFldValue('Сум5'   , arrGr[7]);
          pXL.SetTblNumberFldValue('Сум9'   , arrGr[9]);
          pXL.SetTblNumberFldValue('Сум1Доп', arrGr[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', arrGr[5]);
          pXL.SetTblNumberFldValue('Сум7'   , arrGr[8]);
          pXL.SetTblNumberFldValue('НДС'    , arrGr[10]);

          pXL.InsTblRow;

          for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
            arrGr[iNumGr] := 0.0;
        }

      if (strDesGr <> '')
        if NeedPrintItogGroup
        {
          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('ДатаНомер','   Итого по группе дескрипторов: ' + strDesGr);

          if (VidReport <> 42)   or (VidReport <> 44)
            pXL.SetTblNumberFldValue('Сумма', arrGr[1]);

          pXL.SetTblNumberFldValue('Сум1'   , arrGr[2]);
          pXL.SetTblNumberFldValue('Сум2'   , arrGr[3]);
          pXL.SetTblNumberFldValue('Сум4'   , arrGr[6]);
          pXL.SetTblNumberFldValue('Сум5'   , arrGr[7]);
          pXL.SetTblNumberFldValue('Сум9'   , arrGr[9]);
          pXL.SetTblNumberFldValue('Сум1Доп', arrGr[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', arrGr[5]);
          pXL.SetTblNumberFldValue('Сум7'   , arrGr[8]);
          pXL.SetTblNumberFldValue('НДС'    , arrGr[10]);

          pXL.InsTblRow;

          for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
            arrGr[iNumGr] := 0.0;
        }

      if (strKatOrgName <> '')
        if NeedPrintItogGroup
        {
          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('ДатаНомер','   Итого по контрагенту: ' + strKatOrgName);

          if (VidReport <> 42)  or (VidReport <> 44)
            pXL.SetTblNumberFldValue('Сумма', arrGr[1]);

          pXL.SetTblNumberFldValue('Сум1'   , arrGr[2]);
          pXL.SetTblNumberFldValue('Сум2'   , arrGr[3]);
          pXL.SetTblNumberFldValue('Сум4'   , arrGr[6]);
          pXL.SetTblNumberFldValue('Сум5'   , arrGr[7]);
          pXL.SetTblNumberFldValue('Сум9'   , arrGr[9]);
          pXL.SetTblNumberFldValue('Сум1Доп', arrGr[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', arrGr[5]);
          pXL.SetTblNumberFldValue('Сум7'   , arrGr[8]);
          pXL.SetTblNumberFldValue('НДС'    , arrGr[10]);

          pXL.InsTblRow;

          for (iNumGr := 1; iNumGr <= iGr; iNumGr++)
            arrGr[iNumGr] := 0.0;
        }

      pXL.ClearTblBuffer;

      if (VidReport = 18)
        if (#_getFast_nRec(KlVal, tmpListVal.cVal))
          pXL.SetTblStringFldValue('ДатаНомер', 'ВСЕГО в ' + KlVal.Dollarah + if (not g_isNDEEqual, '', '(НДЕ-эквивалент)'));
        else
          pXL.SetTblStringFldValue('ДатаНомер', 'ВСЕГО в ' + sTune_NameRublah);
      else
        if (#_getFast_nRec(KlVal, tmpListVal.cVal))
          pXL.SetTblStringFldValue('ДатаНомер', 'Итого по счетам-фактурам в ' + KlVal.Dollarah + if (not g_isNDEEqual, if (VidReport = 42 or VidReport = 44, '(в рублях и копейках)', ''), '(НДЕ-эквивалент)'));
        else
          pXL.SetTblStringFldValue('ДатаНомер', 'Итого по счетам-фактурам в ' + sTune_NameRublah);

      if (VidReport <> 42) or (VidReport <> 44)
        pXL.SetTblNumberFldValue('Сумма', tmpListVal.Sum[cnstDelta_Total_Sums + 20]);

      if (IsLastExcelForms)
      {
        pXL.SetTblNumberFldValue('Сум1',    tmpListVal.Sum[cnstDelta_Total_Sums + 16]);
        pXL.SetTblNumberFldValue('Сум2',    tmpListVal.Sum[cnstDelta_Total_Sums + 17]);

        pXL.SetTblNumberFldValue('Сум1_20', tmpListVal.Sum[cnstDelta_Total_Sums + 18]);
        pXL.SetTblNumberFldValue('Сум2_20', tmpListVal.Sum[cnstDelta_Total_Sums + 19]);
      }
      else
      {
        pXL.SetTblNumberFldValue('Сум1', tmpListVal.Sum[cnstDelta_Total_Sums + 1]);
        pXL.SetTblNumberFldValue('Сум2', tmpListVal.Sum[cnstDelta_Total_Sums + 2]);
      }

      pXL.SetTblNumberFldValue('Сум3'   , tmpListVal.Sum[cnstDelta_Total_Sums + 3]);
      pXL.SetTblNumberFldValue('Сум4'   , tmpListVal.Sum[cnstDelta_Total_Sums + 4]);
      pXL.SetTblNumberFldValue('Сум5'   , tmpListVal.Sum[cnstDelta_Total_Sums + 5]);
      pXL.SetTblNumberFldValue('Сум6'   , tmpListVal.Sum[cnstDelta_Total_Sums + 6]);
      pXL.SetTblNumberFldValue('Сум7'   , if (VidReport > 29, tmpListVal.Sum[cnstDelta_Total_Sums + 7],
                                                              tmpListVal.Sum[cnstDelta_Total_Sums + 7] + tmpListVal.Sum[cnstDelta_Total_Sums + 15]));
      pXL.SetTblNumberFldValue('Сум8'   , tmpListVal.Sum[cnstDelta_Total_Sums + 8]);
      pXL.SetTblNumberFldValue('Сум9'   , tmpListVal.Sum[cnstDelta_Total_Sums + 9]);
      pXL.SetTblNumberFldValue('Сум10'  , tmpListVal.Sum[cnstDelta_Total_Sums + 10]);
      pXL.SetTblNumberFldValue('СумИн1' , tmpListVal.Sum[cnstDelta_Total_Sums + 11]);
      pXL.SetTblNumberFldValue('СумИн2' , tmpListVal.Sum[cnstDelta_Total_Sums + 12]);
      pXL.SetTblNumberFldValue('СумИн3' , tmpListVal.Sum[cnstDelta_Total_Sums + 13]);
      pXL.SetTblNumberFldValue('СумИн4' , tmpListVal.Sum[cnstDelta_Total_Sums + 14]);
      pXL.SetTblNumberFldValue('Сум23'  , tmpListVal.Sum[cnstDelta_Total_Sums + 15]);
      pXL.SetTblNumberFldValue('Сум1Доп', tmpListVal.Sum[cnstDelta_Total_Sums + 1] - tmpListVal.Sum[cnstDelta_Total_Sums + 16]);
      pXL.SetTblNumberFldValue('Сум2Доп', tmpListVal.Sum[cnstDelta_Total_Sums + 2] - tmpListVal.Sum[cnstDelta_Total_Sums + 17]);
      pXL.SetTblNumberFldValue('НДС'    , tmpListVal.Sum[cnstDelta_Total_Sums + 2] + tmpListVal.Sum[cnstDelta_Total_Sums + 5]);

      if (not NoData)
        pXL.InsTblRow;
    }
  }
}

// Расчет сумм по книге по текущей валюте
procedure CalcBookForCurrentVal;
{
  PushPos(#BookPrZk);

  if (bIsDopBook)
  {
    // Доп.книга по корректирующим СФ. Сохраняю под другим номером для последующего использования
    Update tmpBook where((g_cVal == tmpBook.cVal))
      Set tmpBook.TypeRec := prPred;
  }

  // Создание записи во временной таблице валют
  if (GetFirst tmpListVal where ((g_cVal == tmpListVal.cVal)) <> tsOk)
  {
    ClearBuffer(#tmpListVal);
    tmpListVal.cVal := g_cVal;
    Insert current tmpListVal;
  }

  // Формирование выгрузки в таблицу tmpBook
  BuildTmpBook;

  PopPos(#BookPrZk);
}

procedure CalcBookForCurrentVal_AllVal;
{
  g_cVal := 0;
  AddBounds(tbbyDateBookPrZk);

  CalcBookForCurrentVal;

  SubBounds(tbbyDateBookPrZk);
}

// Расчет сумм по книге по всем валютам
procedure CalcBook_Total;
{
  // Законодательство РФ c 2014г., в книгу попадают и рублевые и валютные записи
  if (VidReport = 35 or VidReport = 53 or VidReport = 36 or VidReport = 45 or VidReport = 54 or VidReport = 55 or ((toc = cw_XML) and (TuneCountry = ccRus)))
  {
    CalcBookForCurrentVal_AllVal;
    Exit;
  }

  if (g_isFiltVal)
  {
    AddBounds(tbbyValBookPrZk);  // Ограничение BookPrZk по валюте
    AddBounds(tbbyDateBookPrZk);

    g_cVal := dataProvider.getCompFieldValue(#FIELD_VAL_REPORT);
    CalcBookForCurrentVal;  // Расчет сумм по книге по текущей валюте

    SubBounds(tbbyDateBookPrZk);
    SubBounds(tbbyValBookPrZk);
  }
  else
  {
    if (g_isGroupVal)
    {
      // Записи в НДЕ
      g_cVal := 0;
      AddBounds(tbbyValBookPrZk);   // Ограничение BookPrZk по валюте
      AddBounds(tbbyDateBookPrZk);

      CalcBookForCurrentVal;  // Расчет сумм по книге по текущей валюте

      // Записи в валюте
      _loop KlVal
      {
        g_cVal := KlVal.NRec;

        CalcBookForCurrentVal;  // Расчет сумм по книге по текущей валюте
      }

      SubBounds(tbbyDateBookPrZk);
      SubBounds(tbbyValBookPrZk);
    }
    else
    {
      CalcBookForCurrentVal_AllVal;
    }
  }
}

// Окончание процесса расчета начальных сумм. Переношу итоги в tmpListVal.Sum для доп.листа
procedure FinalizeBeginCalc;
var
  i : Integer;
{
  _loop tmpListVal
  {
    for (i := 1; i <= cnstDelta_Begin_Sums; i++)
      tmpListVal.Sum[cnstDelta_Begin_Sums + i] := tmpListVal.Sum[i];

    Update current tmpListVal;
  }
}

// Убираю из tmpListVal "нулевые" записи.
procedure ScrubListVal;
var
  mrkDelVal : TPtr;
  i         : LongInt;
  aRec      : Comp;
{
  mrkDelVal := InitMarker('', 8, 10, 10);
  ClearMarker(mrkDelVal);

  _loop tmpListVal
  {
    // По валюте нет записей в книге, валюту удаляю.
    if (GetFirst tmpBook where((tmpListVal.cVal == tmpBook.cVal)) <> tsOk)
      InsertMarker(mrkDelVal, tmpListVal.cVal);
  }

  for (i := 0; i < GetMarkerCount(mrkDelVal); i++)
  {
    GetMarker(mrkDelVal, i, aRec);

    if (GetFirst tmpListVal where((aRec == tmpListVal.cVal)) = tsOk)
      Delete current tmpListVal;
  }

  DoneMarker(mrkDelVal, '');
}

// Поиск номера листа книги, Лист 1 из _____
function GetNomerPage : LongInt;  // GetNumPage лучше не называть - в Атлантисе есть такая функция
{
  Result := 1;

  if (g_RegDoc = cwBook_Dop)
    Result := dataProvider.getLongFieldValue(#FIELD_NUM_PAGE_BK_DOP);
  else
    Result := dataProvider.getLongFieldValue(#FIELD_NUM_PAGE_BK);

  if (Result <= 0)
    Result := 1;
}

// Поиск номера дополнительного листа книги,  ДОПОЛНИТЕЛЬНЫЙ ЛИСТ КНИГИ ПРОДАЖ № 3
function GetNumDopList(bIsExistData: boolean) : LongInt;
var
  sRes, sMainPeriod, sDopPeriod, sLastDateToDop : String;
  dLastDateToDop : Date;
  bIsNeedUpdate  : Boolean;
  wTipBK         : Word;
{
  Result := 1;

  if (g_RegDoc <> cwBook_Dop)
    Exit;

  // Для дополнительных книг номер хранится в таблице LastNumD
  sRes          := '';
  wTipBK        := if (g_Direct = cwDirect_Sell, cwGlobalCodeBK_Sell, cwGlobalCodeBK_Buy);
  sMainPeriod   := DateToStr(g_DateFrom   , 'YYYYMMDD') + '-' + DateToStr(g_DateTo   , 'YYYYMMDD');
  sDopPeriod    := DateToStr(g_DateFromDop, 'YYYYMMDD')       + DateToStr(g_DateToDop, 'YYYYMMDD');
  bIsNeedUpdate := False;

  // В LastNumD.LNDNrec хранится доп.период
  if (GetFirst LastNumD where((wTipBK      == LastNumD.LNDtype  and
                               sMainPeriod == LastNumD.LNDsubt)) = tsOk)
  {
    // Поиск сохраненной даты окончания доп.периода
    sLastDateToDop := SubStr(String(LastNumD.LNDNrec), 9, 8);
    dLastDateToDop := StrToDate(sLastDateToDop, 'YYYYMMDD');

    if (dLastDateToDop = ZeroDate)
      Exit;

    // Номера предыдущих периодов не сохраняются
    // Текущий доп.период, номер уже есть
    if (dLastDateToDop = g_DateToDop)
      sRes := LastNumD.LNDnum;
    else
      if (dLastDateToDop < g_DateToDop) and (bIsExistData)  // Следующий период, вычисляю новый номер
      {
        sRes := GetLastNumD_(wTipBK, sMainPeriod);
        bIsNeedUpdate := True;
      }
  }
  else
  {
    if (bIsExistData)
    {
      sRes := GetLastNumD_(wTipBK, sMainPeriod);
      bIsNeedUpdate := True;
    }
  }

  if (bIsNeedUpdate)
    if (GetFirst LastNumD where ((wTipBK      == LastNumD.LNDtype  and
                                  sMainPeriod == LastNumD.LNDsubt)) = tsOk)
    {
      Update current LastNumD Set LastNumD.LNDNrec := Comp(sDopPeriod);
    }

  Result := if (Trim(sRes) = '', 1, LongInt(sRes));
}

// Печать итоговых сумм
procedure PrintItogo(aDelta : Word);
// aDelta = cnstDelta_Total_Sums - итоговые суммы по валюте
// aDelta = cnstDelta_Begin_Sums - начальные итоговые суммы по валюте для доп.листа
{
  if ((aDelta <> cnstDelta_Total_Sums) and (aDelta <> cnstDelta_Begin_Sums))
    Exit;

  StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать итоговых сумм', RecordsInTable(tntmpListVal));

  _loop tmpListVal
  {
    NextVisual;

    frmBkPrZkF.PutEventById(feDoLoop, fcBkPrZkAllVal);
    WriteKlValInfo(tmpListVal.cVal);

    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 20]); //  4  SummAll
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  1]); //  5  Summ1
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  2]); //  6  Summ2
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  3]); //  7  Summ3
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  4]); //  8  Summ4
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  5]); //  9  Summ5
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  6]); // 10  Summ6
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  7]); // 11  Summ7
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  8]); // 11a Summ8
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  9]); // 11b Summ9
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 10]); // 12  Summ10
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 11]); // 13  SumIn1
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 12]); // 14  SumIn2
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 13]); // 14a SumIn3
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 14]); // 14b SumIn4
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 15]); // 14c Sum23
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 18]); // 15  Summ1_20
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 16]); // 15  Summ1_18  
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 19]); // 15a Summ2_20
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta + 17]); // 15a Summ2_18
    frmBkPrZkF.Write(tmpListVal.Sum[aDelta +  2] + tmpListVal.Sum[aDelta + 5]);
  }

  StopVisual;
}

procedure BriefPrintFiltBookPrZk;
var
  i, lCountMrk : LongInt;
  cFiltOrg, cFiltKatPodr, cFiltMediator  : Comp;
  wFiltUsersDoc, wDescrFilter, wContFilt : Word;
  sKontrTxt, sTipZapTxt, sCentrOtvTxt, sDescrTxt, sMediatorTxt, sCodeOpTxt : String;
{
  sKontrTxt    := '';
  sTipZapTxt   := '';
  sCentrOtvTxt := '';
  sDescrTxt    := '';
  sMediatorTxt := '';
  sCodeOpTxt   := '';
  wContFilt    := 0;

  // Организация
  if (g_isFiltOrg)
  {
    lCountMrk := GetMarkerCount(MrkGetSomeKatOrg);

    case lCountMrk of
      0 : sKontrTxt := '';

      1 :
      {
        if (GetMarker(MrkGetSomeKatOrg, 0, cFiltOrg))
          if (GetFirst FiltKatOrg where ((cFiltOrg == FiltKatOrg.Nrec)) = tsOk)
          {
            sKontrTxt := FiltKatOrg.Name;
            wContFilt++;
          }
      }

      else
      {
        sKontrTxt := 'множественный выбор';
        wContFilt++;
      }
    end;
  }

  // Тип записи регистрации
  if (g_isFiltTypeBK)
  {
    lCountMrk := GetMarkerCount(MrkGetSomeUsersDoc);

    case lCountMrk of
      0 : sTipZapTxt := '';

      1 :
      {
        if (GetMarker(MrkGetSomeUsersDoc, 0,  wFiltUsersDoc))
          if (GetFirst FiltUsersDoc where ((wFiltUsersDoc == FiltUsersDoc.TipUsers)) = tsOk)
          {
            sTipZapTxt := FiltUsersDoc.Name;
            wContFilt++;
         }
      }

      else
      {
        sTipZapTxt := 'множественный выбор';
        wContFilt++;
      }
    end;
  }

  // Центр ответственности
  if (g_isFiltOtvPodr)
  {
    lCountMrk := GetMarkerCount(MrkGetSomeKatPodr);

    case lCountMrk of
      0 : sCentrOtvTxt := '';

      1 :
      {
        if (GetMarker(MrkGetSomeKatPodr, 0, cFiltKatPodr))
          if (GetFirst FiltFpCO where ((cFiltKatPodr == FiltFpCO.NRec)) = tsOk)
          {
            sCentrOtvTxt := FiltFpCO.Name;
            wContFilt++;
          }
      }

      else
      {
        sCentrOtvTxt := 'множественный выбор';
        wContFilt++;
      }
    end;
  }

  // Дескриптор
  lCountMrk := GetMarkerCount (mrkDescrFilter);

  case lCountMrk of
    0 : sDescrTxt := '';

    1 :
    {
      sDescrTxt := iDescr.GetFullNameFltDescr ;
      wContFilt++;
    }

    else
    {
      sDescrTxt := 'множественный выбор';
      wContFilt++;
    }
  end;

  // Посредник
  if (g_isFiltMediator)
  {
    lCountMrk := GetMarkerCount(mrkGetSomeMediator);

    case lCountMrk of
      0 : sMediatorTxt := '';

      1 :
      {
        if (GetMarker(mrkGetSomeMediator, 0, cFiltMediator))
          if (GetFirst FiltKatOrg where ((cFiltKatPodr == FiltKatOrg.NRec)) = tsOk)
          {
            sMediatorTxt := FiltKatOrg.Name;
            wContFilt++;
          }
      }

      else
      {
        sMediatorTxt := 'множественный выбор';
        wContFilt++;
      }
    end;
  }

  // Код операции
  if (g_isFiltCodeOp)
  {
    lCountMrk := RecordsInTable(tntmpCodeOp_ForBK);

    case lCountMrk of
      0 : sCodeOpTxt := '';

      1 :
      {
        if (GetFirst tmpCodeOp_ForBK = tsOK)
        {
          sCodeOpTxt := tmpCodeOp_ForBK.Value;
          wContFilt++;
        }
      }

      else
      {
        sCodeOpTxt := 'множественный выбор';
        wContFilt++;
      }
    end;
  }

  // Если задан хоть один фильтр, то учитываем строку-разделитель в отчете (перед фильтрами)
  if wContFilt <> 0
    wContFilt++;

  pXL.SetStringVar('Фильтр_по_контрагентам',            sKontrTxt);
  pXL.SetStringVar('Фильтр_по_типам_записей',           sTipZapTxt);
  pXL.SetStringVar('Фильтр_по_центрам_ответственности', sCentrOtvTxt);
  pXL.SetStringVar('Фильтр_по_дескриптору',             sDescrTxt);
  pXL.SetStringVar('Фильтр_по_посредникам',             sMediatorTxt);
  pXL.SetStringVar('Фильтр_по_коду_операций',           sCodeOpTxt);
  pXL.SetNumberVar('Кол_доп_строк',                     wContFilt);
}

function PrintFiltBookPrZk(var wKol: Word) : boolean;
var
  i,
  lCountMrk       : LongInt;

  cFiltOrg,
  cFiltKatPodr,
  cFiltDescr,
  cFiltMediator   : Comp;

  wFiltUsersDoc   : Word;

  sFiltOrg,
  sFiltDescr      : String;

  bIsFirstStrFilt : Boolean;
{
  wKol := 0;
  bIsFirstStrFilt := False;
  result := True;

  if (bZak2014 and ((toc <> cw_Excel) or (not g_isFormatExcel)))
    Exit;

  // Контрагент
  if (g_isFiltOrg)
  {
    bIsFirstStrFilt := True;
    lCountMrk := GetMarkerCount(MrkGetSomeKatOrg);
    StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать значений фильтра по контрагентам', lCountMrk);
    for(i := 0; i < lCountMrk; i++)
    {
      NextVisual;
      if (GetMarker(MrkGetSomeKatOrg, i, cFiltOrg))
        if (GetFirst FiltKatOrg where ((cFiltOrg == FiltKatOrg.Nrec)) = tsOk)
        {
          wKol++;

          if (toc = cw_Text)
          {
            frmBkPrZkF.PutEventById(feDoLoop, fcFiltKontr);
            frmBkPrZkF.Write(FiltKatOrg.Name);
          }
          else
          {
            pXL.ClearTblBuffer;
            pXL.SetTblStringFldValue('СтрНалФильтр', if (wKol = 1, 'Наложен фильтр по', ''));
            pXL.SetTblStringFldValue('ФильтрНаим'  , if (bIsFirstStrFilt, 'контрагентам:', ''));
            pXL.SetTblStringFldValue('ФильтрЗнач'  , FiltKatOrg.Name);
            pXL.InsTblRow;
          }

          bIsFirstStrFilt := False;
        }
    }

    StopVisual;
  }

  // Тип записи
  if (g_isFiltTypeBK)
  {
    bIsFirstStrFilt := True;
    lCountMrk := GetMarkerCount(MrkGetSomeUsersDoc);
    StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать значений фильтра по типам записей', lCountMrk);
    for(i := 0; i < lCountMrk; i++)
    {
      NextVisual;
      if (GetMarker(MrkGetSomeUsersDoc, i, wFiltUsersDoc))
        if (GetFirst FiltUsersDoc where ((wFiltUsersDoc == FiltUsersDoc.TipUsers)) = tsOk)
        {
          wKol++;

          if (toc = cw_Text)
          {
            frmBkPrZkF.PutEventById(feDoLoop, fcFiltTip);
            frmBkPrZkF.Write(FiltUsersDoc.Name);
          }
          else
          {
            pXL.ClearTblBuffer;
            pXL.SetTblStringFldValue('СтрНалФильтр', if (wKol = 1, 'Наложен фильтр по', ''));
            pXL.SetTblStringFldValue('ФильтрНаим', if (bIsFirstStrFilt, 'типам записей:', ''));
            pXL.SetTblStringFldValue('ФильтрЗнач', FiltUsersDoc.Name);
            pXL.InsTblRow;
          }

          bIsFirstStrFilt := False;
        }
    }

    StopVisual;
  }

  // Центр ответственности
  if (g_isFiltOtvPodr)
  {
    bIsFirstStrFilt := True;
    lCountMrk := GetMarkerCount(MrkGetSomeKatPodr);
    StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать значений фильтра по подразделениям', lCountMrk);
    for(i := 0; i < lCountMrk; i++)
    {
      NextVisual;
      if (GetMarker(MrkGetSomeKatPodr, i, cFiltKatPodr))
        if (GetFirst FiltFpCO where ((cFiltKatPodr == FiltFpCO.NRec)) = tsOk)
        {
          wKol++;

          if (toc = cw_Text)
          {
            frmBkPrZkF.PutEventById(feDoLoop, fcFiltPodr);
            frmBkPrZkF.Write(FiltFpCO.Name);
          }
          else
          {
            pXL.ClearTblBuffer;
            pXL.SetTblStringFldValue('СтрНалФильтр', if (wKol = 1, 'Наложен фильтр по', ''));
            pXL.SetTblStringFldValue('ФильтрНаим'  , if (bIsFirstStrFilt, 'подразделениям:', ''));
            pXL.SetTblStringFldValue('ФильтрЗнач'  , FiltFpCO.Name);
            pXL.InsTblRow;
          }

          bIsFirstStrFilt := False;
        }
    }

    StopVisual;
  }

  if (toc <> cw_Excel)
    Exit;

  // Дескриптор
  bIsFirstStrFilt := True;
  sFiltDescr := '';
  lCountMrk := GetMarkerCount(mrkDescrFilter);
  StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать значений фильтра по дескриптору', lCountMrk);
  for(i := 0; i < lCountMrk; i++)
  {
    NextVisual;
    if (GetMarker(mrkDescrFilter, i, cFiltDescr))
    {
      sFiltDescr := sGetTuneEx('User.Descr', UserOfficeFilial(cFiltDescr), cFiltDescr);

      if (sFiltDescr = '')
        continue;

      wKol++;

      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('СтрНалФильтр', if (wKol = 1, 'Наложен фильтр по', ''));
      pXL.SetTblStringFldValue('ФильтрНаим'  , if (bIsFirstStrFilt, 'дескрипторам:', ''));
      pXL.SetTblStringFldValue('ФильтрЗнач'  , sFiltDescr);
      pXL.InsTblRow;

      bIsFirstStrFilt := False;
    }
  }

  StopVisual; // Дескриптор

  // Посредник
  if (g_isFiltMediator)
  {
    bIsFirstStrFilt := True;
    lCountMrk := GetMarkerCount(mrkGetSomeMediator);
    StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать значений фильтра по посредникам', lCountMrk);
    for(i := 0; i < lCountMrk; i++)
    {
      NextVisual;
      if (GetMarker(mrkGetSomeMediator, i, cFiltMediator))
        if (GetFirst FiltMediator where ((cFiltMediator == FiltMediator.NRec)) = tsOk)
        {
          wKol++;

          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('СтрНалФильтр', if (wKol = 1, 'Наложен фильтр по', ''));
          pXL.SetTblStringFldValue('ФильтрНаим'  , if (bIsFirstStrFilt, 'посредникам:', ''));
          pXL.SetTblStringFldValue('ФильтрЗнач'  , FiltMediator.Name);
          pXL.InsTblRow;

          bIsFirstStrFilt := False;
        }
    }

    StopVisual;
  }

  // Код операции
  if (g_isFiltCodeOp)
  {
    bIsFirstStrFilt := True;
    StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать значений фильтра по коду операции', lCountMrk);
    _loop tmpCodeOp_ForBK
    {
      wKol++;

      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('СтрНалФильтр', if (wKol = 1, 'Наложен фильтр по', ''));
      pXL.SetTblStringFldValue('ФильтрНаим'  , if (bIsFirstStrFilt, 'коду операции:', ''));
      pXL.SetTblStringFldValue('ФильтрЗнач'  , tmpCodeOp_ForBK.Value);
      pXL.InsTblRow;

      bIsFirstStrFilt := False;
    }

    StopVisual;
  }

  result := (wKol = 0);
}

// Проверка временных таблиц с результатами, убирание ненужных данных доп.листа и нулевых валют
function CheckTempRes : Boolean;
{
  Result := (GetFirst tmpBook = tsOk);

  if (not Result)
    Exit;

  // Убираю из tmpListVal "нулевые" записи.
  ScrubListVal;

  if (g_RegDoc <> cwBK_Not_Reg)  // Проверка при печати регистрируемых записей
    if (bBkZk_ForRussia)
    {
      StartNewVisual(vtIndicatorVisual, vfTimer, 'Преобразование книги покупок', RecordsInTable(tntmpListVal));

      _loop tmpListVal
      {
        NextVisual;

        Transform_tmpBook_Zk;
      }

      // Убираю из tmpListVal "нулевые" записи после преобразования. Двойной запуск полезен и не замедлителен, т.к. валют не много.
      ScrubListVal;
      StopVisual;

      Result := (GetFirst tmpBook = tsOk);
    }
}


// Печать всего отчета по рассчитанным данным во временных таблицах
procedure PrintReportTotal;
{
  var bIsExistDataDopL : boolean = false;
  // Есть ли данные в доп.листе
  _loop tmpListVal
    if (RecordExists tmpBook where ((tmpListVal.cVal == tmpBook.cVal and
                                     prMain          == tmpBook.TypeRec)) = tsOk)
    {
      bIsExistDataDopL := true;
      Break;
    }

  // Установка группы отчетов, в зависимости от страны и т.п.
  if (not SetReportGroups)
    Exit;

  mrkKatParty := InitMarker('', 8, 10, 10);

  frmBkPrZkF.Write(if (g_isFiltOrg,     0, 1));
  frmBkPrZkF.Write(if (g_isFiltTypeBK,  0, 1));
  frmBkPrZkF.Write(if (g_isFiltOtvPodr, 0, 1));

  frmBkPrZkF.Write(g_RegDoc);
  frmBkPrZkF.Write(g_isPrintZero);
  frmBkPrZkF.Write(bZak2014);
  frmBkPrZkF.Write(g_isPrintDash);
  SetKatOrgInfo(True);
  frmBkPrZkF.Write(gen_OrgName);

  if (oFuncsSF.IsRussiaINN(gen_UNN, gen_NRecKatOrg_BK))
  {
    frmBkPrZkF.Write(gen_UNN);
    frmBkPrZkF.Write(gen_KPP);
  }
  else
  {
    frmBkPrZkF.Write('-');
    frmBkPrZkF.Write('-');
  }

  // ОКОНX ОКПО
  frmBkPrZkF.Write(KatOrg.OKONH); //??
  frmBkPrZkF.Write(KatOrg.OKPO);  //??

  frmBkPrZkF.Write(g_DateFrom);
  frmBkPrZkF.Write(g_DateTo);
  frmBkPrZkF.Write(if ((Month(g_DateTo) - Month(g_DateFrom) = 2) and (Year(g_DateTo) = Year(g_DateFrom)),
                      String((((Month(g_DateFrom) - 1) div 3) + 1)) + ' квартал ' + String(Year(g_DateFrom)) + ' года',
                      'с ' + DateToStr(g_DateFrom, dtFormat) + ' по ' + DateToStr(g_DateTo, dtFormat)));
  frmBkPrZkF.Write(DateToStr(dDopList_InReport, dtFormat));
  frmBkPrZkF.Write(doTune_Stav1);
  frmBkPrZkF.Write(doTune_Stav2);
  frmBkPrZkF.Write(doTune_StavExp);
  frmBkPrZkF.Write(g_NumParam);

  if ((g_RegDoc = cwBook_Dop) and (TuneCountry = ccRus))
    frmBkPrZkF.Write(1);  // Доп. книга, нумерация строк с 1.
  else
    frmBkPrZkF.Write(dataProvider.getLongFieldValue(#FIELD_FIRST_NUM));

  frmBkPrZkF.Write(GetNomerPage);
  frmBkPrZkF.Write(GetNumDopList(bIsExistDataDopL));
  frmBkPrZkF.Write(sTune_Boss);
  frmBkPrZkF.Write(sTune_MainBuh);
  frmBkPrZkF.Write(sSigner);
  frmBkPrZkF.Write(sSignerDover);

  if (g_isFiltVal)
    frmBkPrZkF.Write(if (#_getFast_nRec(KlVal, g_cVal), KlVal.Dollar + if (not g_isNDEEqual, '', '(НДЕ-эквивалент)'), sTune_NameRubl));
  else
    frmBkPrZkF.SkipFormat(1);

  var wKolStrFilt : Word = 0;
  PrintFiltBookPrZk(wKolStrFilt);

  IsBelZakon2007 := False;

  if (g_RegDoc = cwBook_Dop)
    PrintItogo(cnstDelta_Begin_Sums); // Печать итоговых начальных сумм по валютам для доп.листа

  StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать данных по валютам', RecordsInTable(tntmpListVal));

  // Печать данных по валютам
  _loop tmpListVal
  {
    NextVisual;

    // Если в книге нет "основных" записей, то в отчете для информации отображаются только суммы по валюте
    if (RecordExists tmpBook where ((tmpListVal.cVal == tmpBook.cVal and
                                     prMain          == tmpBook.TypeRec)) <> tsOk)
      Continue;

    g_cVal := if (RecordExists KlVal where ((tmpListVal.cVal == KlVal.NRec)) = tsOk, tmpListVal.cVal, Comp(0));

    PrintByCurrentVal; // Печать данных по текущей валюте
  }

  PrintItogo(cnstDelta_Total_Sums); // Печать итоговых сумм по валютам

  StopVisual;

  frmBkPrZkF.PutEvent(feBreak);

  g_isPrinted := not frmBkPrZkF.Error;
}

// Печать отчета в Excel
procedure PrintReportTotalXL;
var
  lNumPage    : LongInt;
  sNumDopBook : String;
  bIsExistDataDopL : boolean;
{
  if (not pxlRepSetup.CheckParam(0, ID, sXLTFileName))
  {
    RunInterface('xlRepSetup', 2, ID, sXLTFileName);
    ReadMyDsk(sXLTFileName, ID, True);
  }

  NoData        := True;
  ItogNds24     := 0;
  ItogOsnNds    := 0;
  ItogOsnNds_18 := 0;
  ItogDopNds    := 0;
  ItogNds10     := 0;

  Set sXLSFileName := pXL.CreateReport(sXLTFileName, True);

  if (bIsPrintNumPP_FromOne)
    npp := 0;  // Доп. книга, нумерация строк с 1.
  else
    npp := dataProvider.getLongFieldValue(#FIELD_FIRST_NUM) - 1;

  mrkKatParty := InitMarker('', 8, 10, 10);

  pXL.CreateTbls(sXLSFileName);

  pXL.CreateTbl('BookPrZkPrint');

  pXL.CreateTblFld('КодОперации');
  pXL.CreateTblFld('ДатаПост');
  pXL.CreateTblFld('ДатаОпл');
  pXL.CreateTblFld('ДатаНомер');
  pXL.CreateTblFld('ДатаНомИспр');
  pXL.CreateTblFld('ДатаНомК');
  pXL.CreateTblFld('ДатаНомИспрК');
  pXL.CreateTblFld('ДатаОтгрНомер');
  pXL.CreateTblFld('НомерДО');
  pXL.CreateTblFld('ДатаОплНомер');
  pXL.CreateTblFld('ДатаОпрНомер');
  pXL.CreateTblFld('НаименованиеОрг');
  pXL.CreateTblFld('Примечание');
  pXL.CreateTblFld('УНН');
  pXL.CreateTblFld('КПП');
  pXL.CreateTblFld('УНН_КПП');
  pXL.CreateTblFld('Наимен_Посредника');
  pXL.CreateTblFld('УНН_КПП_Посредника');
  pXL.CreateTblFld('Код_Наимен_Валюты');
  pXL.CreateTblFld('ДатаОпр');
  pXL.CreateTblFld('Сумма');
  pXL.CreateTblFld('Сумма_Вал');
  pXL.CreateTblFld('Сумма_ВалСФ');
  pXL.CreateTblFld('НДС');  // Общий НДС, основная и дополнительная ставка
  pXL.CreateTblFld('Сум1_20');
  pXL.CreateTblFld('Сум1');
  pXL.CreateTblFld('Сум2_20');
  pXL.CreateTblFld('Сум2');
  pXL.CreateTblFld('Сум3');
  pXL.CreateTblFld('Сум4');
  pXL.CreateTblFld('Сум5');
  pXL.CreateTblFld('Сум6');
  pXL.CreateTblFld('Сум7');
  pXL.CreateTblFld('Сум8');
  pXL.CreateTblFld('Сум9');
  pXL.CreateTblFld('Сум10');
  pXL.CreateTblFld('Сум24');
  pXL.CreateTblFld('Сум24_НДС');
  pXL.CreateTblFld('СумОсн');
  pXL.CreateTblFld('СумОсн_НДС');
  pXL.CreateTblFld('СумИн1');
  pXL.CreateTblFld('СумИн2');
  pXL.CreateTblFld('СумИн3');
  pXL.CreateTblFld('СумИн4');
  pXL.CreateTblFld('Сум23');
  pXL.CreateTblFld('НомКнигиПокупок');
  pXL.CreateTblFld('НомПП');
  pXL.CreateTblFld('ТипЗап');
  pXL.CreateTblFld('ПодтипЗап');
  pXL.CreateTblFld('Сум1Доп');
  pXL.CreateTblFld('Сум2Доп');
  pXL.CreateTblFld('SF_BarCode');   // Штрих-код СФ
  pXL.CreateTblFld('Prim_BarCode'); // Штрих-код первичного документа
  pXL.CreateTblFld('СтранаГТД');    // Ном30
  pXL.CreateTblFld('Пор_ном_ГТД');  // Задается увеличением на 1 при печати последующей записи книги
  pXL.CreateTblFld('КодТНВЭД');
  pXL.CreateTblFld('Дата_записи');
  pXL.CreateTblFld('Номер_записи');
  pXL.CreateTblFld('ДатаОплНомер_ДатаОплНДС');
  pXL.CreateTblFld('ДатаЭлектронногоСФ');
  pXL.CreateTblFld('НомерЭлектронногоСФ');
  pXL.CreateTblFld('НаименованиеНазначенияСопрдока');
  pXL.CreateTblFld('СсылкаНазначенияСопрдока');
  pXL.CreateTblFld('ЦентрОтветственности');
  pXL.CreateTblFld('Дескриптор');
  pXL.CreateTblFld('ГруппаДескрипторов');

  // Печать итоговых начальных сумм по валютам для доп.листа
  if (g_RegDoc = cwBook_Dop) and (VidReport = 51 or VidReport = 52 or VidReport = 53 or VidReport = 54 or VidReport = 55)
  {
    StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать итоговых начальных сумм по валютам для доп.листа', RecordsInTable(tntmpListVal));

    _loop tmpListVal
    {
      NextVisual;

      pXL.ClearTblBuffer;
      pXL.SetTblStringFldValue('ДатаНомер', 'Итого');

      if (VidReport <> 53 and VidReport <> 54 and VidReport <> 55)
        pXL.SetTblNumberFldValue('Сумма',  tmpListVal.Sum[cnstDelta_Begin_Sums + 20]);

      // ИТОГО
      if (VidReport = 55)
      {
        pXL.SetTblNumberFldValue('Сум1' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 16]); 
        pXL.SetTblNumberFldValue('Сум2' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 17]);

        pXL.SetTblNumberFldValue('Сум1_20', tmpListVal.Sum[cnstDelta_Begin_Sums + 18]);
        pXL.SetTblNumberFldValue('Сум2_20', tmpListVal.Sum[cnstDelta_Begin_Sums + 19]);
      }
      else
      {
      pXL.SetTblNumberFldValue('Сум1' ,   if (not gen_IsNDS20, tmpListVal.Sum[cnstDelta_Begin_Sums + 16], 0));
      pXL.SetTblNumberFldValue('Сум2' ,   if (not gen_IsNDS20, tmpListVal.Sum[cnstDelta_Begin_Sums + 17], 0));
      }

      pXL.SetTblNumberFldValue('Сум3' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 3]);
      pXL.SetTblNumberFldValue('Сум4' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 4]);
      pXL.SetTblNumberFldValue('Сум5' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 5]);
      pXL.SetTblNumberFldValue('Сум6' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 6]);
      pXL.SetTblNumberFldValue('Сум7' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 7]);
      pXL.SetTblNumberFldValue('Сум8' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 8]);
      pXL.SetTblNumberFldValue('Сум9' ,  tmpListVal.Sum[cnstDelta_Begin_Sums + 9]);
      pXL.SetTblNumberFldValue('Сум10'  ,tmpListVal.Sum[cnstDelta_Begin_Sums + 10]);
      pXL.SetTblNumberFldValue('СумИн1' ,tmpListVal.Sum[cnstDelta_Begin_Sums + 11]);
      pXL.SetTblNumberFldValue('СумИн2' ,tmpListVal.Sum[cnstDelta_Begin_Sums + 12]);
      pXL.SetTblNumberFldValue('СумИн3' ,tmpListVal.Sum[cnstDelta_Begin_Sums + 13]);
      pXL.SetTblNumberFldValue('СумИн4' ,tmpListVal.Sum[cnstDelta_Begin_Sums + 14]);
      pXL.SetTblNumberFldValue('Сум23'  ,tmpListVal.Sum[cnstDelta_Begin_Sums + 15]);
      pXL.SetTblNumberFldValue('Сум1Доп',tmpListVal.Sum[cnstDelta_Begin_Sums + 1] - tmpListVal.Sum[cnstDelta_Begin_Sums + 16]);
      pXL.SetTblNumberFldValue('Сум2Доп',tmpListVal.Sum[cnstDelta_Begin_Sums + 2] - tmpListVal.Sum[cnstDelta_Begin_Sums + 17]);
      pXL.SetTblNumberFldValue('НДС',    tmpListVal.Sum[cnstDelta_Begin_Sums + 2] + tmpListVal.Sum[cnstDelta_Begin_Sums +  5]);

      pXL.InsTblRow;
    }

    StopVisual;
  }

  StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать данных по валютам', RecordsInTable(tntmpListVal));

  bIsExistDataDopL := false;

  // Печать данных по валютам
  _loop tmpListVal
  {
    NextVisual;

    // Если в книге нет "основных" записей, то в отчете для информации отображаются только суммы по валюте
    if (RecordExists tmpBook where ((tmpListVal.cVal == tmpBook.cVal and
                                     prMain          == tmpBook.TypeRec)) <> tsOk)
      Continue;

    bIsExistDataDopL := true;

    g_cVal := if (RecordExists KlVal where ((tmpListVal.cVal == KlVal.NRec)) = tsOk, tmpListVal.cVal, Comp(0));

    PrintByCurrentVal; // Печать данных по текущей валюте
  }

  StopVisual;

  pXL.ClearTblBuffer;

  if ((VidReport <> 11) and (VidReport <> 12) and (VidReport <> 13))
    pXL.InsTblRow;

  var
    dNDESum1AllVal,
    dNDESum4AllVal,
    dNDESum9AllVal,
    dNDESum2AllVal,
    dNDESum5AllVal,
    dNDESum7AllVal,
    dNDE_NDS_AllVal : Double;

  dNDESum1AllVal := dNDESum4AllVal := dNDESum9AllVal := dNDESum2AllVal := dNDESum5AllVal := dNDESum7AllVal := dNDE_NDS_AllVal := 0;

  StartNewVisual(vtIndicatorVisual, vfTimer, 'Формирование отчета', RecordsInTable(tntmpListVal));

  _loop tmpListVal
  {
    NextVisual;

    pXL.ClearTblBuffer;

    Case VidReport of
      2,3,4,5,6,8,9,10 : pXL.SetTblStringFldValue('ДатаОпрНомер', 'ВСЕГО ');

      0,1 : pXL.SetTblStringFldValue('ДатаНомер', 'ВСЕГО ');

      7 :
      {
        if (g_Direct <> cwDirect_Sell)
          pXL.SetTblStringFldValue('ДатаОпрНомер', 'ВСЕГО ');
        else
          pXL.SetTblStringFldValue('ДатаНомер', 'ВСЕГО ');
      }

      11, 12, 13:
      {
        if (g_isGroupOtvPodr)
          pXL.SetTblStringFldValue('НомПП', '2. Перенесено всего из отдельных книг покупок, в том числе:');
        else
        {
          if (wTune_MajorPayerBel = 1)
            pXL.SetTblStringFldValue('НомПП', '1. Всего, в том числе:');
          else
            pXL.SetTblStringFldValue('НомПП', 'Всего:');
        }
      }

      18 :
      {
        if (#_getFast_nRec(KlVal, tmpListVal.cVal))
          pXL.SetTblStringFldValue('ДатаНомер', 'ВСЕГО в ' + KlVal.Dollarah + if (not g_isNDEEqual, '', '(НДЕ-эквивалент)'));
        else
          pXL.SetTblStringFldValue('ДатаНомер', 'ВСЕГО в ' + sTune_NameRublah);
      }

      37,38,39,40,41 :
      {
        if (#_getFast_nRec(KlVal, tmpListVal.cVal))
          pXL.SetTblStringFldValue('ДатаНомер', 'Итого по счетам-фактурам в ' + KlVal.Dollarah + if (not g_isNDEEqual, '', '(НДЕ-эквивалент)'));
        else
          pXL.SetTblStringFldValue('ДатаНомер', 'Итого по счетам-фактурам в ' + sTune_NameRublah);
      }

      42,44 :
      {
         // т.к. данные суммы в этом отчете указываются в НДЕ, то суммируем их для дальнейшего вывода одной строкой
         dNDESum1AllVal  += tmpListVal.Sum[cnstDelta_Total_Sums + 16];
         dNDESum4AllVal  += tmpListVal.Sum[cnstDelta_Total_Sums +  4];
         dNDESum9AllVal  += tmpListVal.Sum[cnstDelta_Total_Sums +  9];
         dNDESum2AllVal  += tmpListVal.Sum[cnstDelta_Total_Sums + 17];
         dNDESum5AllVal  += tmpListVal.Sum[cnstDelta_Total_Sums +  5];
         dNDESum7AllVal  += tmpListVal.Sum[cnstDelta_Total_Sums +  7];
         dNDE_NDS_AllVal += tmpListVal.Sum[cnstDelta_Total_Sums +  2] + tmpListVal.Sum[cnstDelta_Total_Sums+ 5];

         Continue;
      }

      51, 52, 53, 54, 55 : pXL.SetTblStringFldValue('ДатаНомер', 'Всего');

      else
        pXL.SetTblStringFldValue('ДатаНомер', 'ВСЕГО ');
    end;

    if ((VidReport > 2) and (VidReport < 18)) and (g_Direct <> cwDirect_Sell)
    {
      if ((VidReport <> 11) and (VidReport <> 12) and (VidReport <> 13))
        pXL.SetTblNumberFldValue('Сумма', if (VidReport = 3 or VidReport = 5 or VidReport = 7 or VidReport = 8 or VidReport = 9
                                            , tmpListVal.Sum[cnstDelta_Total_Sums + 20]
                                            , tmpListVal.Sum[cnstDelta_Total_Sums + 20]/1000));
      pXL.SetTblNumberFldValue('Сум2',    if (VidReport = 3 or VidReport = 8 or VidReport = 9
                                           , (tmpListVal.Sum[cnstDelta_Total_Sums + 2] - ISRusNds20)
                                           , (tmpListVal.Sum[cnstDelta_Total_Sums + 2] - ISRusNds20) / wKoefThous - ItogNds25));
      pXL.SetTblNumberFldValue('Сум5',    if (VidReport = 8
                                           , ItogNds10
                                           , if (VidReport = 3 or VidReport = 5 or VidReport = 7 or VidReport = 9
                                           , (tmpListVal.Sum[cnstDelta_Total_Sums + 5] - ISRusNds10)
                                           , (tmpListVal.Sum[cnstDelta_Total_Sums + 5] - ISRusNds10) / wKoefThous)));
      pXL.SetTblNumberFldValue('Сум8',  if (VidReport = 3
                                           , (ISRusNds20 + ISRusNds10)
                                           , (ISRusNds20 + ISRusNds10)/1000));

      pXL.SetTblNumberFldValue('Сум24_НДС' , if (VidReport = 5 or VidReport = 7 or VidReport = 8, ItogNds24,  ItogNds24/1000));
      pXL.SetTblNumberFldValue('СумОсн_НДС', if (VidReport = 5 or VidReport = 7 or VidReport = 8, ItogOsnNds, ItogOsnNds/1000));

      if (VidReport = 12)
        pXL.SetTblNumberFldValue('Сум1Доп', ItogNds25);

      pXL.SetTblNumberFldValue('Сум2Доп', if ((VidReport = 8) or (bIsReport2015Bel), ItogDopNds, ItogOsnNds_18));
    }
    else
    {
      if (VidReport <> 35) and (VidReport <> 53) and (VidReport <> 36) and (VidReport <> 45) and (VidReport <> 54)  and (VidReport <> 55)
        pXL.SetTblNumberFldValue('Сумма', tmpListVal.Sum[cnstDelta_Total_Sums + 20]);

      if (IsLastExcelForms) // ВСЕГО
      {
        pXL.SetTblNumberFldValue('Сум1',    tmpListVal.Sum[cnstDelta_Total_Sums + 16]);  
        pXL.SetTblNumberFldValue('Сум2',    tmpListVal.Sum[cnstDelta_Total_Sums + 17]);

        pXL.SetTblNumberFldValue('Сум1_20', tmpListVal.Sum[cnstDelta_Total_Sums + 18]);
        pXL.SetTblNumberFldValue('Сум2_20', tmpListVal.Sum[cnstDelta_Total_Sums + 19]);
      }
      else
      {
        pXL.SetTblNumberFldValue('Сум1',  tmpListVal.Sum[cnstDelta_Total_Sums + 1]);
        pXL.SetTblNumberFldValue('Сум2',  tmpListVal.Sum[cnstDelta_Total_Sums + 2]);
      }

      pXL.SetTblNumberFldValue('Сум3',tmpListVal.Sum[cnstDelta_Total_Sums + 3]);
      pXL.SetTblNumberFldValue('Сум4',tmpListVal.Sum[cnstDelta_Total_Sums + 4]);
      pXL.SetTblNumberFldValue('Сум5',tmpListVal.Sum[cnstDelta_Total_Sums + 5]);
      pXL.SetTblNumberFldValue('Сум6',tmpListVal.Sum[cnstDelta_Total_Sums + 6]);
      pXL.SetTblNumberFldValue('Сум7',if (VidReport > 29, tmpListVal.Sum[cnstDelta_Total_Sums + 7],
                                            tmpListVal.Sum[cnstDelta_Total_Sums + 7] + tmpListVal.Sum[cnstDelta_Total_Sums + 15]));
      pXL.SetTblNumberFldValue('Сум8',tmpListVal.Sum[cnstDelta_Total_Sums + 8]);
      pXL.SetTblNumberFldValue('Сум9',tmpListVal.Sum[cnstDelta_Total_Sums + 9]);
      pXL.SetTblNumberFldValue('Сум10',tmpListVal.Sum[cnstDelta_Total_Sums + 10]);
      pXL.SetTblNumberFldValue('СумИн1',tmpListVal.Sum[cnstDelta_Total_Sums + 11]);
      pXL.SetTblNumberFldValue('СумИн2',tmpListVal.Sum[cnstDelta_Total_Sums + 12]);
      pXL.SetTblNumberFldValue('СумИн3',tmpListVal.Sum[cnstDelta_Total_Sums + 13]);
      pXL.SetTblNumberFldValue('СумИн4',tmpListVal.Sum[cnstDelta_Total_Sums + 14]);
      pXL.SetTblNumberFldValue('Сум23',tmpListVal.Sum[cnstDelta_Total_Sums + 15]);
      pXL.SetTblNumberFldValue('Сум1Доп',tmpListVal.Sum[cnstDelta_Total_Sums + 1] - tmpListVal.Sum[cnstDelta_Total_Sums + 16]);
      pXL.SetTblNumberFldValue('Сум2Доп',tmpListVal.Sum[cnstDelta_Total_Sums + 2] - tmpListVal.Sum[cnstDelta_Total_Sums + 17]);
      pXL.SetTblNumberFldValue('НДС', tmpListVal.Sum[cnstDelta_Total_Sums + 2] + tmpListVal.Sum[cnstDelta_Total_Sums+ 5]);
    }

    pXL.InsTblRow;

    if (bIsReport2015Bel)
    {
      if (g_isGroupOtvPodr)
      {
        var i : integer;

        i := 0;

        _loop tmpListPodr
        {
          i++;
          pXL.ClearTblBuffer;
          pXL.SetTblStringFldValue('НомПП', '2.' + String(i) + ' из книги покупок № ' + String(i) + '(Центр ответственности - ' + tmpListPodr.sPodrName + ')');
          pXL.SetTblNumberFldValue('Сум2',    tmpListPodr.Sum[1]);
          pXL.SetTblNumberFldValue('Сум5',    tmpListPodr.Sum[2]);
          pXL.SetTblNumberFldValue('Сум1Доп', tmpListPodr.Sum[4]);
          pXL.SetTblNumberFldValue('Сум2Доп', tmpListPodr.Sum[3]);
          pXL.InsTblRow;
        }
      }
      else
      {
        if (wTune_MajorPayerBel = 1)
        {
          var bKodOp, bKolKodOp : Byte;

          bKolKodOp := 5;

          for(bKodOp := 1; bKodOp <= bKolKodOp; bKodOp++)
          {
            pXL.ClearTblBuffer;

            pXL.SetTblStringFldValue('НомПП', '1.' + String(bKodOp) + '. по операциям с кодом ' + String(bKodOp));

            if (GetFirst tmpListKodOp where ((g_cVal == tmpListKodOp.cVal and bKodOp == tmpListKodOp.bKodOp)) = tsOk)
            {
              pXL.SetTblNumberFldValue('Сум2',    tmpListKodOp.Sum[1]/wKoefThous);
              pXL.SetTblNumberFldValue('Сум5',    tmpListKodOp.Sum[2]/wKoefThous);
              pXL.SetTblNumberFldValue('Сум1Доп', tmpListKodOp.Sum[4]/wKoefThous);
              pXL.SetTblNumberFldValue('Сум2Доп', tmpListKodOp.Sum[3]/wKoefThous);
            }
            else
            {
              pXL.SetTblNumberFldValue('Сум2',    0);
              pXL.SetTblNumberFldValue('Сум5',    0);
              pXL.SetTblNumberFldValue('Сум1Доп', 0);
              pXL.SetTblNumberFldValue('Сум2Доп', 0);
            }

            pXL.InsTblRow;
          }
        }
      }
    }
  }

  StopVisual;

  StartNewVisual(vtRotateVisual, vfTimer, 'Печать переменных отчета', 1);

  if (VidReport = 42) or  (VidReport = 44)
  {
    pXL.ClearTblBuffer;

    pXL.SetTblStringFldValue('ДатаНомер', 'ВСЕГО ');
    pXL.SetTblNumberFldValue('Сум1', dNDESum1AllVal);
    pXL.SetTblNumberFldValue('Сум4', dNDESum4AllVal);
    pXL.SetTblNumberFldValue('Сум9', dNDESum9AllVal);
    pXL.SetTblNumberFldValue('Сум2', dNDESum2AllVal);
    pXL.SetTblNumberFldValue('Сум5', dNDESum5AllVal);
    pXL.SetTblNumberFldValue('Сум7', dNDESum7AllVal);
    pXL.SetTblNumberFldValue('НДС' , dNDE_NDS_AllVal);

    pXL.InsTblRow;
  }

  pXL.PublishTbl('BookPrZkPrint');

  pXL.CreateTbl('FilterBookPrZk');
  pXL.CreateTblFld('СтрНалФильтр');
  pXL.CreateTblFld('ФильтрНаим');
  pXL.CreateTblFld('ФильтрЗнач');

// печать фильтров по контрагентам, типам записей и центрам ответственности
  var wKolStrFilt : Word = 0;
  if (not NoData)
    PrintFiltBookPrZk(wKolStrFilt);

  pXL.PublishTbl('FilterBookPrZk');

  pXL.CreateVar(sXLSFileName);

  pXL.SetStringVar('CFH', CommonFormHeader);
  pXL.SetNumberVar('Вид', VidReport);
  pXL.SetNumberVar('Продажа', if (g_Direct = cwDirect_Sell, 1, 0));
  pXL.SetNumberVar('РБ', if (TuneCountry = ccBel,1,0));

  lNumPage    := GetNomerPage;
  sNumDopBook := String(GetNumDopList(bIsExistDataDopL));

  if (g_Direct = cwDirect_Sell)
  {
    if (VidReport <> 18) and (VidReport <= 36 or VidReport = 45)
    {
      XLHeader  := if (g_RegDoc = cwBK_Reg, 'КНИГА ПРОДАЖ' , 'РЕЕСТР ЗАПИСЕЙ (ПРОДАЖИ)');
      XLHeader1 := if (g_RegDoc = cwBK_Reg, 'Книга продаж ', 'Реестр записей (продажи)');
    }
    else
      if (VidReport < 51)
      {
        XLHeader  := if (g_RegDoc = cwBK_Reg ,'СВОДНАЯ КНИГА ПРОДАЖ ПО ВАЛЮТАМ'    , 'РЕЕСТР ЗАПИСЕЙ (ПРОДАЖИ) ПО ВАЛЮТАМ');
        XLHeader1 := if (g_RegDoc = cwBK_Reg, 'Сводная книга продаж по валютам    ', 'Реестр записей (продажи) по валютам');
      }
      else
      {
        XLHeader  := 'ДОПОЛНИТЕЛЬНЫЙ ЛИСТ КНИГИ ПРОДАЖ № ' + sNumDopBook;
        XLHeader1 := 'Дополнительный лист книги продаж № ' + sNumDopBook;
      }
  }
  else
  {
    if (VidReport <> 18) and ((VidReport <= 36) or (VidReport = 45))
    {
      XLHeader  := If (g_RegDoc = cwBK_Reg, 'КНИГА ПОКУПОК', 'РЕЕСТР ЗАПИСЕЙ (ПОКУПКИ)');
      XLHeader1 := If (g_RegDoc = cwBK_Reg, 'Книга покупок', 'Реестр записей (покупки)');
    }
    else
      if (VidReport < 51)
      {
        XLHeader  := If (g_RegDoc = cwBK_Reg, 'СВОДНАЯ КНИГА ПОКУПОК ПО ВАЛЮТАМ'   , 'РЕЕСТР ЗАПИСЕЙ (ПОКУПКИ) ПО ВАЛЮТАМ');
        XLHeader1 := If (g_RegDoc = cwBK_Reg, 'Сводная книга покупок по валютам   ', 'Реестр записей (покупки) по валютам');
      }
      else
      {
        XLHeader  := 'ДОПОЛНИТЕЛЬНЫЙ ЛИСТ КНИГИ ПОКУПОК № ' + sNumDopBook;
        XLHeader1 := 'Дополнительный лист книги покупок № ' + sNumDopBook;
      }
  }

  KolFiltr := 0;

  Filt := 'Наложен фильтр по: ';

  if (if (g_isFiltOrg, 0, 1) = 0)
  {
    if (++KolFiltr > 1)
      Filt += ',';

    Filt += ' контрагентам';
  }

  if (if (g_isFiltTypeBK, 0, 1) = 0)
  {
    if (++KolFiltr > 1)
      Filt += ',';

    Filt += ' типам записей';
  }

  if (if (g_isFiltOtvPodr, 0, 1) = 0)
  {
    if (++KolFiltr > 1)
      Filt += ',';

    Filt += ' подразделениям';
  }

  if (KolFiltr = 0)
    Filt := '';

  pXL.SetStringVar('Заголовок', XLHeader);

  pXL.SetStringVar('ФильтрОрг'  , if (g_isFiltOrg,     '0', '1'));
  pXL.SetStringVar('ФильтрТип'  , if (g_isFiltTypeBK,  '0', '1'));
  pXL.SetStringVar('ФильтрЦентр', if (g_isFiltOtvPodr, '0', '1'));

  if (TuneCountry = ccRus)
    BriefPrintFiltBookPrZk;

  pXL.SetNumberVar('РегДок'   , g_RegDoc);
  pXL.SetNumberVar('НетДанных', if (NoData,1,0));
  pXL.SetNumberVar('Точность' , if (g_Direct = cwDirect_Sell, 2, g_NumParam));

  SetKatOrgInfo(True);

  pXL.SetStringVar('Орг', gen_OrgName);

  if (not bIsNewBook)
    pXL.SetStringVar('ИНН', gen_UNN);
  else
  {
    if (oFuncsSF.IsRussiaINN(gen_UNN, gen_NRecKatOrg_BK))
    {
      pXL.SetStringVar('ИНН', if (LTrim(Trim(gen_UNN + gen_KPP), '-') = '', '-', gen_UNN + '/' + gen_KPP));
    }
    else
    {
      pXL.SetStringVar('ИНН', '-');
      gen_KPP := '-';
    }
  }

  pXL.SetStringVar('КПП', gen_KPP);

  pXL.SetStringVar('Фильтр', filt);
  pXL.SetStringVar('Заголовок', XLHeader);

  if (bIsReport2015Bel)
    pXL.SetStringVar('Заголовок1',  '')
  else
    pXL.SetStringVar('Заголовок1', XLHeader1 + ' за период с ' + DateToStr(g_DateFrom, dtFormat) +
                                '  по ' + DateToStr(g_DateTo, dtFormat) +
                                '  ' + sGetTune('KatOrg.FldView.UNN') + ' ' + gen_UNN + ' ' + filt);

  if (#_getFast_nRec(KlVal, g_cVal))
  {
    pXL.SetStringVar('Вал1', KlVal.Dollar   + if (not g_isNDEEqual, '', '(НДЕ-эквивалент)'));
    pXL.SetStringVar('Вал2', KlVal.Dollarah + if (not g_isNDEEqual, '', '(НДЕ-эквивалент)'));
    pXL.SetStringVar('Вал3', KlVal.SimvolV);
  }
  else
  {
    pXL.SetStringVar('Вал1', sTune_NameRubl);
    pXL.SetStringVar('Вал2', sTune_NameRublah);
    pXL.SetStringVar('Вал3', oValFunc.GetValSymbol(0));
  }

  if (bIsReport2015Bel)
  {
    pXL.SetStringVar('Дата1', if ((Month(g_DateFrom) = Month(g_DateTo)),
                                 String(Month(g_DateFrom)),                                   // вывод месяца(ев) периода
                                 String(Month(g_DateFrom)) + '-' + String(Month(g_DateTo)))); // вывод года периода
    pXL.SetStringVar('Дата2', String(Year(g_DateFrom)));
  }
  else
  {
    pXL.SetStringVar('Дата1', DateToStr(g_DateFrom, dtFormat));
    pXL.SetStringVar('Дата2', DateToStr(g_DateTo  , dtFormat));
  }

  pXL.SetStringVar('Период', if ((Month(g_DateTo) - Month(g_DateFrom) = 2) and (Year(g_DateTo) = Year(g_DateFrom)),
                                String((((Month(g_DateFrom) - 1) div 3) + 1)) + ' квартал ' + String(Year(g_DateFrom)) + ' года',
                                'с ' + DateToStr(g_DateFrom, dtFormat) + ' по ' + DateToStr(g_DateTo, dtFormat)));

  if (bIsReport2015Bel)
  {
    pXL.SetStringVar('процСтавка1', DoubleToStr(doTune_Stav1, '\2p[|-]3666') + ' %'#10 + '(' + DoubleToStr(doTune_Stav1*100/(100 + doTune_Stav1), '\2p[|-]3666,88') + ' %)' + if (VidReport = 13, ','#10 + '25 %', ''));
    pXL.SetStringVar('процСтавка2', DoubleToStr(doTune_Stav2, '\2p[|-]3666') + ' %'#10 + '(' + DoubleToStr(doTune_Stav2*100/(100 + doTune_Stav2), '\2p[|-]3666,88') + ' %)');
  }
  else
  {
    pXL.SetStringVar('процСтавка1', DoubleToStr(doTune_Stav1, '\2p[|-]3666') + ' %');
    pXL.SetStringVar('процСтавка2', DoubleToStr(doTune_Stav2, '\2p[|-]3666') + ' %');
  }

  pXL.SetStringVar('процСтавкаДоп', if (VidReport = 8, 'Расчетная ставка', '18 %'));

  pXL.SetStringVar('процНДС', DoubleToStr(doTune_StavExp, '\2p[|-]3666') + ' %');

  if (g_Direct <> cwDirect_Sell) and (VidReport > 35)
  {
    pXL.SetStringVar('процСт1', DoubleToStr(doTune_Stav1, '\2p[|-]3666') + ' процентов ' +
                                if (bIsNewBook, '', if (VidReport = 37,' (7)','(8)')));
    pXL.SetStringVar('процСт2', DoubleToStr(doTune_Stav2, '\2p[|-]3666') + ' процентов ' +
                                if (bIsNewBook, '', if (VidReport = 37,' (8)','(9)')));
  }
  else
    if (VidReport > 30) and ((VidReport <= 36) or (VidReport = 45)) and (g_Direct <> cwDirect_Sell)
    {
       pXL.SetStringVar('процСт1', DoubleToStr(doTune_Stav1, '\2p[|-]3666') + ' процентов ' + if (bIsNewBook, '', '(8)'));
       pXL.SetStringVar('процСт2', DoubleToStr(doTune_Stav2, '\2p[|-]3666') + ' процентов ' + if (bIsNewBook, '', '(9)'));
    }
    else
    {
       pXL.SetStringVar('процСт1', DoubleToStr(doTune_Stav1, '\2p[|-]3666') + ' процентов ' + if (bIsNewBook, '', if (VidReport = 7, '(6)', '(5)')));
       pXL.SetStringVar('процСт2', DoubleToStr(doTune_Stav2, '\2p[|-]3666') + ' процентов ' + if (bIsNewBook, '', if (VidReport = 7, '(7)', '(6)')));
    }

  if ((VidReport >= 31) and ((VidReport <= 36) or (VidReport = 45)) or (VidReport = 52))
  {
    pXL.SetNumberVar('1Лист', lNumPage);
    pXL.SetStringVar('Лист', 'Лист ' + String(lNumPage) + ' из');
  }
  else
  {
    pXL.SetNumberVar('1Лист', 1);
    pXL.SetStringVar('Лист', 'Лист 1 из');
  }

  pXL.SetStringVar('Босс',      sTune_Boss);
  pXL.SetStringVar('ГлавБух',   sTune_MainBuh);
  pXL.SetStringVar('Подписант', sSigner);
  pXL.SetStringVar('ПодпДовер', sSignerDover);
  pXL.SetStringVar('ДатаДопЛ', DateToStr(dDopList_InReport, dtFormat));
  pXL.SetNumberVar('ПослЛист', 0);
  pXL.SetNumberVar('КолСтрФильтр', wKolStrFilt);

  pXL.SetNumberVar('IsUseBarCode', if (IsExistArchive, 1, 0));
  pXL.SetStringVar('BarCode', Ean13ToEanGnivcTTF(GetAbstractBarCode));
  pXL.SetNumberVar('МетодУчетаРеализации', wTune_UchPolicy);

  pXL.SetStringVar('КодИнспекции', if ((wTune_MajorPayerBel = 1), sTune_InsNomer, ''));

  pXL.SetStringVar('МестоположениеИнспекции', if ((wTune_MajorPayerBel = 1), sTune_InsPosition, ''));

  pXL.SetNumberVar('ДопФорматированиеОтчета', if (g_isFormatExcel, 1, 0) );

  pXL.SetNumberVar('ПрочеркиПриОтсутствииДанных', if (g_isPrintDash, 1, 0) );

  // вывод в Excel итоговых строк
  var KolStrItog : LongInt;

  KolStrItog := 0;

  if (bIsReport2015Bel)
  {
    if (g_isGroupOtvPodr)
      KolStrItog := RecordsInTable(tntmpListPodr);
    else
      KolStrItog := 5;
  }

  pXL.SetNumberVar('КолСтрокИтогов', KolStrItog);
  pXL.SetNumberVar('Отчет_в_тысячах', if (g_isPrintThous, 1, 0));

  pXL.PublishVar;

  pXL.LoadReport(sXLSFileName);

  if (bZak2014)
  {
    var aFileBas : String;
    var XlRes    : Boolean;
    aFileBas := TranslatePath('%ClientStartPath%') + 'Macro\' + 'BookPrZkDop.bas';

    if (FileExist(aFileBas))
    {
      XlRes := xlImportModule(aFileBas);
      if (XlRes)
      {
        XlRes := xlRunMacro('NumDateCol');
      }
    }
  }

  if ((VidReport >= 31) and ((VidReport <= 36) or (VidReport = 45)) or (VidReport = 52))
    SaveLastList_XL;

  pXL.DisConnectExcel;
  xlKillExcel;

  StopVisual;
}

//************************************************************************************************************
// Функции экспорта в xml

/*
Комментарии к сложным элементам идут в след. порядке:
1. Книга покупок
2. Книга продаж
3. Доп. лист книги покупок
4. Доп. лист книги продаж

В случае, если наименование структуры элемента совпадает - комментарий указывается одной строкой
*/

//------------------------------------------------------------------------------------------------------------
// [Таблица 4.1] Файл обмена (Файл)
function TheFile(_FileName: String) : Comp;
{
  Result := AddNode(0, 'Файл');

  AttribRequired(Result, 'ИдФайл'  , _FileName);           // Идентификатор файла
  AttribOptional(Result, 'ВерсПрог', 'Галактика ERP 9.1'); // [Н] Версия передающей программы
  AttribRequired(Result, 'ВерсФорм', if (VidReport = 0, '5.02', '5.03')); // Версия формата

  if (g_RegDoc <> cwBook_Dop)
  {
    // только при печати основного листа книги покупок\продаж
    AttribRequired(Result, 'ИдФайлИсх', _FileName);          // Идентификатор исходного файла
    AttribRequired(Result, 'ИдФайлПерв', _FileName);         // Идентификатор первого файла, полученного в результате деления исходного файла
    AttribRequired(Result, 'КолФайл', '1');                  // Количество файлов, полученных в результате деления исходного файла
    AttribRequired(Result, 'НомФайл', '1');                  // Номер текущего файла
  }

  Document(Result, 'Документ');  // Корректировочный cчет-фактура, применяемый при расчетах по налогу на добавленную стоимость
}

// [Таблица 4.2] Книга покупок, применяемая при расчетах по налогу на добавленную стоимость (Документ)
// [Таблица 4.2] Книга продаж (Документ)
// [Таблица 4.2] Дополнительный лист книги покупок, применяемой при расчетах по налогу на добавленную стоимость (Документ)
// [Таблица 4.2] Дополнительный лист книги продаж, применяемой при расчетах по налогу на добавленную стоимость (Документ)
function Document(_Node: Comp; _NodeName: String) : Comp;
var
  sNameRefMyOrg, sNameRefSvBook : String;
  refSvKnPokProd                : Comp;
{

  refDoc := Result := AddNode(_Node, _NodeName);
  sNameRefMyOrg := sNameRefSvBook := '';

  // 1115102 - Книга покупок
  // 1115103 - Книга продаж
  // 1115105 - Дополнительный лист книги покупок
  // 1115106 - Дополнительный лист книги продаж
  AttribRequired(Result, 'КНД', oExpRepSF.fKND(wTypeRepXML)); // Код формы  по КНД

  if (g_Direct = cwDirect_Sell)
  {
    sNameRefMyOrg := 'СвПродав';
    sNameRefSvBook := if (g_RegDoc = cwBook_Dop, 'СвДопЛКнПрод', 'СвКнПрод');
  }
  else
  {
    sNameRefMyOrg := 'СвПокуп';
    sNameRefSvBook := if (g_RegDoc = cwBook_Dop, 'СвДопЛКнПок', 'СвКнПок');
  }

  SetKatOrgInfo(True);

  SvPokupProdav(Result, sNameRefMyOrg);
  refSvKnPokProd := SvKnPokProd(Result, sNameRefSvBook);

  //Сведения о покупке/продаже
  _loop tmpListVal
  {
    if (g_RegDoc = cwBook_Dop)
    {
      // Заполняем реквизиты по строке Итого [Таблица 4.6]
      Vsego(refSvKnPokProd, 'Итого', cnstDelta_Begin_Sums);
    }

    // Если в книге нет "основных" записей, то в отчете для информации отображаются только суммы по валюте
    if (RecordExists tmpBook where((tmpListVal.cVal == tmpBook.cVal  and
                                    prMain          == tmpBook.TypeRec)) <> tsOk)
      Continue;

    g_cVal := if (RecordExists KlVal where ((tmpListVal.cVal == KlVal.NRec)) = tsOk, tmpListVal.cVal, Comp(0));

    PrintByCurrentVal; // Печать данных по текущей валюте
  }

  // Заполняем Реквизиты по строке Всего (Всего) [Таблица 4.6]
  Vsego(refSvKnPokProd, 'Всего', cnstDelta_Total_Sums);

  // Сведения о лице, подписывающем документ в электронной форме
  Podpisant(Result, 'Подписант');
}

// [Таблица 4.3] Сведения о покупателе (СвПокуп)
// [Таблица 4.3] Сведения о продавце (СвПродав)
function SvPokupProdav(_Node: Comp; _NodeName: String) : Comp;
{
  Result := AddNode(_Node, _NodeName);

  if (length(gen_UNN) <> 12) // Исходим из предположения, что у предпринимателя ИНН 12-значный
    Result := SvUL(Result, 'СведЮЛ', gen_OrgName, gen_UNN, gen_KPP, gen_NRecKatOrg_BK);
  else
    Result := SvIP(Result, 'СведИП', gen_UNN);
}

// [Таблица 4.4] Сведения об организации (СведЮЛ)
function SvUL(_Node: Comp; _NodeName: String; _NaimOrg: String; _INNUL: TINNUL; _KPP: TKPP; _Org : Comp) : Comp;
{
  Result := AddNode(_Node, _NodeName);
  AttribRequired(Result, 'НаимОрг', _NaimOrg); // Наименование T(1-1000)

  if (oFuncsSF.IsRussiaINN(_INNUL, _Org))
  {
    AttribRequired(Result, 'ИННЮЛ', _INNUL);     // ИНН. Обязателен для лиц, состоящих на учете в налоговых органах.
    AttribRequired(Result, 'КПП',   _KPP);       // КПП. Обязателен для лиц, состоящих на учете в налоговых органах.
  }
}

// [Таблица 4.5] Сведения об индивидуальном предпринимателе (СведИП)
function SvIP(_Node: Comp; _NodeName: String; _INNFL: TINNFL) : Comp;
{
  Result := AddNode(_Node, _NodeName);
  AttribRequired(Result, 'ИННФЛ', _INNFL);           // ИНН - Типовой элемент <ИННФЛТип> T(=12). Обязателен для лиц, состоящих на учете в налоговых органах.
  AttribRequired(Result, 'СвГосРегИП', KatOrg.OGRN); // Реквизиты свидетельства о государственной регистрации ИП
  FIOTip(Result, 'ФИОИП', gen_OrgName);
}

// [Таблица 4.6] Сведения о книге покупок (СвКнПок)
// [Таблица 4.6] Сведения о книге продаж (СвКнПрод)
// [Таблица 4.6] Сведения о дополнительном листе книги покупок (СвДопЛКнПок)
// [Таблица 4.6] Сведения о дополнительном листе книги продаж (СвДопЛКнПрод)
function SvKnPokProd(_Node: Comp; _NodeName: String) : Comp;
var
  sNameRefNumDop, sNameRefDatDop : String;
{
  Result := AddNode(_Node, _NodeName);
  sNameRefNumDop := sNameRefDatDop := '';

  //Для доп.листов книг
  if (g_RegDoc = cwBook_Dop)
  {
    if (g_Direct = cwDirect_Sell)
    {
      sNameRefNumDop := 'НомерДопЛКнПрод';
      sNameRefDatDop := 'ДатаДопЛКнПрод';
    }
    else
    {
      sNameRefNumDop := 'НомерДопЛКнПок';
      sNameRefDatDop := 'ДатаДопЛКнПок';
    }

    var bIsExistDataDopL : boolean = false;
    _loop tmpListVal
      if (RecordExists tmpBook where((tmpListVal.cVal == tmpBook.cVal  and
                                      prMain          == tmpBook.TypeRec)) = tsOk)
      {
        bIsExistDataDopL := true;
        Break;
      }

    // Номер дополнительного листа книги покупок / продаж
    AttribRequired(Result, sNameRefNumDop, String(GetNumDopList(bIsExistDataDopL)));
  }

  AttribRequired(Result, 'Период', oExpRepSF.fKodPeriod(g_DateFrom, g_DateTo));
  AttribRequired(Result, 'ОтчетГод', String(Year(g_DateFrom)));

  if (g_RegDoc = cwBook_Dop)
  {
    // Дополнительный лист составлен (Дата)
    AttribRequired(Result, sNameRefDatDop, Dat(dDopList_InReport));
  }

  // Реквизиты по строке Всего (Всего)
  // Составной элемент заполняем после расчета (см. функцию Document)
}

// Номер таможенной декларации
procedure NumGTD_xml(_Node : Comp; sNameRefNumTD: string);
{
  if (Is_CorrV_BK(BookPrZk.TipUser))
    Exit;

  var lKolRec : longint = RecordsInTable(tntmpGTDN);
   if (lKolRec > 0)
   {
     _loop tmpGTDN
       if (tmpGTDN.sNum <> '')
         AddNode(_Node, sNameRefNumTD, tmpGTDN.sNum);
   }
   else
     if (gen_NumGTD <> '')
       AddNode(_Node, sNameRefNumTD, gen_NumGTD);
}

// [Таблица 4.7] Сведения о покупке (СвПокупка)
// [Таблица 4.7] Сведения о продаже (СвПродаж)
function SvPokProd(_Node : Comp) : Comp;
var
  sNameRefSvPokProd, sNameRefOrg, sNameAttrNumSF, sNameRefNumTD : String;
{
  sNameRefOrg := '';

  if (g_Direct = cwDirect_Sell)
  {
    sNameRefSvPokProd := 'СвПродаж';
    sNameRefOrg := 'НаимПок';
  }
  else
  {
    sNameRefSvPokProd := 'СвПокупка';
    sNameRefOrg := 'НаимПрод';
  }

  sNameAttrNumSF := 'НомерСчФ';
  sNameRefNumTD := 'НомерТД';

  if (g_Direct = cwDirect_Buy and g_RegDoc = cwBook_Dop)
  {
    sNameAttrNumSF := 'НомСчФ';
    sNameRefNumTD := 'НомТД';
  }

  Result := AddNode(_Node, sNameRefSvPokProd);

  npp++;

  // Номер по порядку (Графа 1)
  if (bIsPrintNumPP_FromOne)
    AttribRequired(Result, 'НомПП', String(npp));
  else
    AttribRequired(Result, 'НомПП', if (g_NumParam = 0, String(BookPrZk.ls[1]), String(npp)));

  AttribRequired(Result, sNameAttrNumSF, gen_NumSF);                                                  // Номер счета-фактуры продавца (Графа 3)
  AttribRequired(Result, 'ДатаСчФ'     , Dat(GetDateFact_ForPrint));                                          // Дата счета-фактуры продавца (Графа 3), формат 'DD.MM.YYYY'
  AttribOptional(Result, 'НомИспрСчФ'  , LTrim(Trim(gen_NumIsprSF), '0'));                            // Номер исправления счета-фактуры (Графа 4)
  AttribOptional(Result, 'ДатаИспрСчФ' , if (gen_DateIsprSF <> ZeroDate, Dat(gen_DateIsprSF), ''));   // Дата исправления счета-фактуры (Графа 4)
  AttribOptional(Result, 'НомерКСчФ'   , gen_NumKSF);                                                 // Номер корректировочного счета-фактуры (Графа 5)
  AttribOptional(Result, 'ДатаКСчФ'    , if (gen_DateKSF <> ZeroDate, Dat(gen_DateKSF), ''));         // Дата корректировочного счета-фактуры (Графа 5)
  AttribOptional(Result, 'НомИспрКСчФ' , LTrim(Trim(gen_NumKIsprSF), '0'));                           // Номер исправления корректировочного счета-фактуры (Графа 6)
  AttribOptional(Result, 'ДатаИспрКСчФ', if (gen_DateKIsprSF <> ZeroDate, Dat(gen_DateKIsprSF), '')); // Дата исправления корректировочного счета-фактуры  (Графа 6)

  // Наименование продавца   (Графа 9)
  // Наименование покупателя (Графа 7)
  AttribRequired(Result, sNameRefOrg, gen_OrgName);

  if (Length(gen_UNN) = 12) // ИП, 12-значный ИНН
  {
    // ИНН продавца   - индивидуального предпринимателя (Графа 10)
    // ИНН покупателя - индивидуального предпринимателя (Графа 8)
    if (oFuncsSF.IsRussiaINN(gen_UNN, gen_NRecKatOrg_BK))
      AttribOptional(Result, 'ИННФЛ', gen_UNN);
  }
  else  // Юр.лицо
  {
    // ИНН продавца   - организации (Графа 10)
    // ИНН покупателя - организации (Графа 8)
    if (oFuncsSF.IsRussiaINN(gen_UNN, gen_NRecKatOrg_BK))
    {
      AttribOptional(Result, 'ИННЮЛ', gen_UNN);

      // КПП продавца (Графа 10)
      // КПП покупателя (Графа 8)
      AttribOptional(Result, 'КПП',   gen_KPP);
    }
  }

  if ( IsValid(tnKlVal_BK) )
    AttribRequired(Result, 'КодОКВ', KlVal_BK.ISO);  // [Н] Код валюты (Графа 14)

  // Стоимость покупок по счету-фактуре, разница стоимости по корректировочному счету-фактуре (включая НДС) в валюте счета-фактуры (Графа 15)
  // Стоимость продаж  по счету-фактуре, разница стоимости по корректировочному счету-фактуре (включая НДС) в валюте счета-фактуры (Графа 13а)
  AttribRequired(Result, 'СтТовУчНалВсего', Num_17_2(arrSum[18]));

  if (g_Direct = cwDirect_Sell)
  {
    // Стоимость продаж по счету-фактуре, разница стоимости по корректировочному счету-фактуре (включая НДС) в рублях и копейках  (Графа 13б)
    AttribOptional(Result, 'СтТовУчНалРубКоп', Num_17_2(arrSum[1]));

    // Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без НДС) в рублях и копейках
    AttribOptional(Result, 'СтТовРубКоп18', Num_17_2(arrSum[2])); // по ставке 18 процентов (Графа 14)
    AttribOptional(Result, 'СтТовРубКоп10', Num_17_2(arrSum[5])); // по ставке 10 процентов (Графа 15)
    AttribOptional(Result, 'СтТовРубКоп0', Num_17_2(arrSum[10])); // по ставке  0 процентов (Графа 16)

    // Сумма НДС по счету-фактуре, разница стоимости по корректировочному счету-фактуре в рублях и копейках
    AttribOptional(Result, 'СумНДСРубКоп18', Num_17_2(arrSum[3])); // по ставке 18 процентов (Графа 17)
    AttribOptional(Result, 'СумНДСРубКоп10', Num_17_2(arrSum[6])); // по ставке 10 процентов (Графа 18)

    // Стоимость продаж, освобождаемых от налога, по счету-фактуре, разница стоимости по корректировочному счету-фактуре в рублях и копейках (Графа 19)
    AttribOptional(Result, 'СтПродОсвНДСРубКоп', Num_17_2(arrSum[8] - arrSum[10]));
  }

  // Код вида операции (Графа 2)
  AddNode(Result, 'КодВидОпер', tmpBook.sKodOp);

  if (g_Direct = cwDirect_Buy)
  {
    SvDocYplNal(Result, 'СвДокУплНал'); // [НМ] Сведения о документе, подтверждающем уплату налога (Графа 7)

    // [НМ] Дата принятия на учет товаров (работ, услуг), имущественных прав (Графа 8)
    if ((BookPrZk.dOpr <> ZeroDate) and
        not (isPrintDateOprForStornoVozvrAvans))
      AddNode(Result, 'ДатаПринУчет', Dat(BookPrZk.dOpr));
  }
  else
  {
    if (VidReport = 1)
    {
      // Номер таможенной декларации (Графа 3а)
      NumGTD_xml(Result, sNameRefNumTD);

      // Код вида товара (Графа 3б)
      var lKolRec : longint = RecordsInTable(tntmpTNVED);
      if (lKolRec > 0)
        _loop tmpTNVED
          if (tmpTNVED.sCode <> '')
            AddNode(Result, 'ВидТов', tmpTNVED.sCode);
    }
  }

  // Посредник
  if (IsExist_KO_Med)
    SvPosredn(Result, 'СвПосредн'); // Сведения о посреднике, (комиссионере, агенте. экспедиторе, застройщике) (Графы 11, 12)

  if (g_Direct = cwDirect_Buy)
  {
    // Номер таможенной декларации (Графа 13)
    NumGTD_xml(Result, sNameRefNumTD);

    SumNDSTip(Result, 'СумНДСВыч', arrSum[19], (abs(arrSum[19]) >= 0.001));
  }
  else
    SvDocYplNal(Result, 'СвДокПдтвОпл'); // [НМ] Сведения о документе, подтверждающем оплату (Графа 11)
}

// Вывод номера и даты оплаты
procedure Out_NumDateOpl_xml(aNode : Comp; aNum : String; aDate : Date);
{
  AttribOptional(aNode, 'НомерДокУплНал', aNum);         // [Н] Номер документа, подтверждающего уплату налога (Графа 7)

  if (aDate <> ZeroDate)
    AttribOptional(aNode, 'ДатаДокУплНал', Dat(aDate));  // [Н] Дата  документа, подтверждающего уплату налога (Графа 7)
}

// [Таблица 4.8 ] Сведения о документе, подтверждающем уплату налога (Графа 7 ) (СвДокУплНал)
// [Таблица 4.11] Сведения о документе, подтверждающем оплату        (Графа 11) (СвДокПдтвОпл)
function SvDocYplNal(_Node : Comp; _NodeName : String) : Comp;
var
  aSF          : Comp;
  bInitInfoPl  : Boolean;
  aRes         : Word;
  _Date        : Date;
  _Num, _Value : String;
{
  Result := 0;

  // Для некоторых записей оплата не печатается
  if (not IsPrintDateNumOpl)
    Exit;

  // Информация об оплате задается во внешнем атрибуте записи регистрации.
  _Value := Trim(sGetAttr(coBookPrZk, BookPrZk.NRec, csAttrNumDateOpl));

  if (_Value <> '')
  {
    ParseAttr_NumDate(_Value, _Num, _Date);
    Result := AddNode(_Node, _NodeName);
    Out_NumDateOpl_xml(Result, _Num, _Date);
    Exit;
  }

  aSF := 0;

  // Для авансов и авансов в момент отгрузки поиск идет по платежному СФ.
  if ((BookPrZk.SubTip = cwTotal_TypeBK_RegAvans) or (BookPrZk.SubTip = cwTotal_TypeBK_AvansInMomentOtgr))
    aSF := if (IsValid(tnSchFact2), SchFact2.NRec, 0);
  else // возврат оплаты здесь, т.к. SchFact1 - возвратный СФ.
    aSF := if (IsValid(tnSchFact1), SchFact1.NRec,
           if (IsValid(tnSchFact2), SchFact2.NRec, 0));

  bInitInfoPl := False;
  aRes := 0;

  if (BookPrZk.Subtip = cwTotal_TypeBK_RegGTD)
  {
    if (iInfoPl.InitBK(BookPrZk.NRec))
    {
      iInfoPl.FindPlatNo_DateBK;
      bInitInfoPl := True;
    }
  }
  else
    if (iInfoPl.Init(aSF))
    {
      aRes := iInfoPl.FindPlatNo_Date(BookPrZk.Direct, tmpBook.sKodOp, IsAlwaysPrintOpl);
      bInitInfoPl := True;
    }

  if (not bInitInfoPl)
    Exit;

  // Печать оплаты = по вн.атрибуту "Номер и дата оплаты НДС",по плат.кодам, для кода 23 - из графы 3
  if ((bIsPrintOpl_23) and (aRes <> 1))  // не внешний атрибут
  {
    Result := AddNode(_Node, _NodeName);
    Out_NumDateOpl_xml(Result, gen_NumSF, GetDateFact_ForPrint);
    Exit;
  }


  _loop tmpInfoPlat
  {
    Result := AddNode(_Node, _NodeName);

    _Num  := tmpInfoPlat.NoDoc;
    _Date := tmpInfoPlat.DateDoc;

    if (_Date = ZeroDate)
    {
      _Value := _Num;
      ParseAttr_NumDate(_Value, _Num, _Date);
    }

    if (g_Direct = cwDirect_Buy )
    {
      Out_NumDateOpl_xml(Result, _Num, _Date);
    }
    else
    {
      AttribRequired(Result, 'НомерДокПдтвОпл', _Num);         // Номер документа, подтверждающего оплату (Графа 11)

      if (_Date <> ZeroDate)
        AttribRequired(Result, 'ДатаДокПдтвОпл', Dat(_Date)); // Дата  документа, подтверждающего оплату (Графа 11)
    }
  }
}

// [Таблица 4.9] Сведения о посреднике, (комиссионере, агенте. экспедиторе, застройщике) (Графы 11, 12) (СвПосредн)
// [Таблица 4.8] Сведения о посреднике (комиссионере, агенте)  (Графы 9, 10) (СвПосредн)
function SvPosredn(_Node: Comp; _NodeName: String) : Comp;
{
  Result := AddNode(_Node, _NodeName);

  if (length(KatOrg_Med_Head.UNN) = 12) // Исходим из предположения, что у предпринимателя ИНН 12-значный
  { // Сведения о посреднике-индивидуальном предпринимателе
    Result := SvedIP(Result, 'СведИП', _TINNFL(KatOrg_Med_Head.UNN)); // KatOrg_Med_Head будет = KatOrg_Med, если никто не проставит головную организацию для ИП, что как-то маловероятно по сути
  }
  else
  { // Сведения о посреднике-организации
    Result := SvedUL(Result, 'СведЮЛ',         oHistory.sGetField(coKatOrg, KatOrg_Med_Head.NRec, 'REP.KATORGNAME', gen_DateFact_ForHistory)
                                     , _TINNUL(oHistory.sGetField(coKatOrg, KatOrg_Med_Head.NRec, 'UNN'           , gen_DateFact_ForHistory))
                                     , _TKPP  (oHistory.sGetField(coKatOrg, KatOrg_Med.NRec,      'KODPLATNDS'    , gen_DateFact_ForHistory))
                                     , KatOrg_Med_Head.NRec);
  }
}

// [Таблица 4.10] Сведения о посреднике-организации (СведЮЛ)
// [Таблица 4.9 ] Сведения о посреднике-организации (СведЮЛ)
function SvedUL(_Node: Comp; _NodeName: String; _NaimOrg: String; _INNUL: TINNUL; _KPP: TKPP; _Org : Comp) : Comp;
{
  Result := AddNode(_Node, _NodeName);
  AttribRequired(Result, 'НаимОрг', _NaimOrg); // Наименование T(1-1000)

  if (oFuncsSF.IsRussiaINN(_INNUL, _Org))
  {
    AttribRequired(Result, 'ИННЮЛ', _INNUL); // ИНН. Обязателен для лиц, состоящих на учете в налоговых органах.
    AttribRequired(Result, 'КПП'  , _KPP  ); // КПП. Обязателен для лиц, состоящих на учете в налоговых органах.
  }
}

// [Таблица 4.11] Сведения о посреднике-индивидуальном предпринимателе (СведИП)
// [Таблица 4.10] Сведения о посреднике-индивидуальном предпринимателе (СведИП)
function SvedIP(_Node: Comp; _NodeName: String; _INNFL: TINNFL) : Comp;
{
  Result := AddNode(_Node, _NodeName);
  AttribRequired(Result, 'ИННФЛ', _INNFL); // ИНН - Типовой элемент <ИННФЛТип> T(=12). Обязателен для лиц, состоящих на учете в налоговых органах.
  FIOTip(Result, 'ФИОИП', Trim(oKatOrg.GetKatOrgName(KatOrg_Med_Head.NRec, koOnTune)));
}

// [Таблица 4.12] Сведения о лице, подписывающем документ в электронном виде (Подписант)
function Podpisant(_Node: Comp; _NodeName: String) : Comp;
var
  isIP : Boolean;
{
  Result := AddNode(_Node, _NodeName);

  AttribRequired(Result, 'ПрПодп', sSignerPr); // Признак лица, подписывающего документ
  FIOTip(Result, 'ФИО', sSigner);              // Фамилия, Имя, Отчество

  if (sSignerPr = '2')
  {
    Result := AddNode(Result, 'СвПред');
    AttribRequired(Result, 'НаимДок', sSignerDover); // Доверенность подписанта
  }
}

// [Таблица 4.15] Реквизиты по строке Всего (Итого) (ВсегоТип)
function Vsego(_Node: Comp; _NodeName: String; _wDelta: Word) : Comp;
{
  Result := AddNode(_Node, _NodeName);

  if (g_Direct = cwDirect_Buy )
  {
    // Сумма НДС по счету-фактуре, разница суммы НДС по корректировочному счету-фактуре, принимаемая к вычету, в рублях и копейках (Графа 16)
    AttribRequired(Result, 'СумНДСВыч'         , Num_17_2(tmpListVal.Sum[_wDelta +  2] + tmpListVal.Sum[_wDelta + 5]));
  }
  else
  {
    // Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без НДС) в рублях и копейках
    AttribOptional(Result, 'СтТовРубКоп18'     , Num_17_2(tmpListVal.Sum[_wDelta + 16])); // по ставке 18 процентов (Графа 14)
    AttribOptional(Result, 'СтТовРубКоп10'     , Num_17_2(tmpListVal.Sum[_wDelta +  4])); // по ставке 10 процентов (Графа 15)
    AttribOptional(Result, 'СтТовРубКоп0'      , Num_17_2(tmpListVal.Sum[_wDelta +  9])); // по ставке  0 процентов (Графа 16)

    // Сумма НДС по счету-фактуре, разница стоимости по корректировочному счету-фактуре в рублях и копейках
    AttribOptional(Result, 'СумНДСРубКоп18'    , Num_17_2(tmpListVal.Sum[_wDelta + 17])); // по ставке 18 процентов (Графа 17)
    AttribOptional(Result, 'СумНДСРубКоп10'    , Num_17_2(tmpListVal.Sum[_wDelta +  5])); // по ставке 10 процентов (Графа 18)

    // Стоимость продаж, освобождаемых от налога, по счету-фактуре, разница стоимости по корректировочному счету-фактуре в рублях и копейках (Графа 19)
    AttribOptional(Result, 'СтПродОсвНДСРубКоп', Num_17_2(tmpListVal.Sum[_wDelta +  7]));
  }
}
//************************************************************************************************************

procedure PrintReportTotalXMLBel;
var
  refBookPurchasesReportPayers,
  refBookPurchasesReportPayers_v1_f000,  // Организация
  refBookPurchasesReportPayers_v1_f001,  // Наименование ИМНС района, города, района в городе
  refBookPurchasesReportPayers_v1_f002,  // Номер книги покупок
  refBookPurchasesReportPayers_v1_f003,  // Общее кол-во книг покупок
  refBookPurchasesReportPayers_v1_f004,  // Тип книги покупок

  refBookPurchasesReportPayers_v1_t001_5_ritogo_c11,
  refBookPurchasesReportPayers_v1_t001_5_ritogo_c12,
  refBookPurchasesReportPayers_v1_t001_5_ritogo_c13,

  refBookPurchasesReportPayers_v1_t001_perenos_vsego_c11,
  refBookPurchasesReportPayers_v1_t001_perenos_vsego_c12,
  refBookPurchasesReportPayers_v1_t001_perenos_vsego_c13,

  refBookPurchasesReportPayers_v1_chief
  : Comp;

  bItMessage
  : Boolean;
{
  ItogDopNds := 0;
  ISRusNds20 := 0;
  ISRusNds10 := 0;

  oXMLConverter.Init;
  oXMLConverter.SortAttrByName := False;

  StartNewVisual(vtRotateVisual, vfTimer, 'Формирование отчета', 1);

  SetKatOrgInfo(True);

  refBookPurchasesReportPayers := oXMLConverter.AddNode(0, 'BookPurchasesReportPayers', '', 0);

  AttribRequired(refBookPurchasesReportPayers, 'xmlns'    , 'http://mns/edeclaration/xml/bookpurchases/ver1');
  AttribRequired(refBookPurchasesReportPayers, 'version', '1');
  AttribRequired(refBookPurchasesReportPayers, 'type'   , 'BOOKPURCHASES');
  AttribRequired(refBookPurchasesReportPayers, 'UNP'    , gen_UNN);
  AttribRequired(refBookPurchasesReportPayers, 'term_type', '1');  // Книга покупок квартальная всегда
  AttribRequired(refBookPurchasesReportPayers, 'year'     , String(Year(g_DateFrom)));
  AttribRequired(refBookPurchasesReportPayers, 'period'   , String(Month(g_DateFrom)));
  AttribOptional(refBookPurchasesReportPayers, 'kodIMNS'  , if (wTune_MajorPayerBel = 1, sTune_InsNomer, ''));
  if (g_cVal = 0)
  {
    AttribOptional(refBookPurchasesReportPayers, 'currencyCode', if (g_DateTo >= Date(1, 7, 2016), '933', '974'));
    AttribOptional(refBookPurchasesReportPayers, 'currencyValuesDisplayFormat', 'RUBLE');
  }

  refBookPurchasesReportPayers_v1_f000 := AddNode(refBookPurchasesReportPayers, 'BookPurchasesReportPayers_v1_f000', gen_OrgName);
    AttribRequired(refBookPurchasesReportPayers_v1_f000, 'xmlns', '');
  refBookPurchasesReportPayers_v1_f001 := AddNode(refBookPurchasesReportPayers, 'BookPurchasesReportPayers_v1_f001', if ((wTune_MajorPayerBel = 1), sTune_InsPosition, ''));
    AttribRequired(refBookPurchasesReportPayers_v1_f001, 'xmlns', '');
  refBookPurchasesReportPayers_v1_f002 := AddNode(refBookPurchasesReportPayers, 'BookPurchasesReportPayers_v1_f002', '1');
    AttribRequired(refBookPurchasesReportPayers_v1_f002, 'xmlns', '');
  refBookPurchasesReportPayers_v1_f003 := AddNode(refBookPurchasesReportPayers, 'BookPurchasesReportPayers_v1_f003', '1');
    AttribRequired(refBookPurchasesReportPayers_v1_f003, 'xmlns', '');
  refBookPurchasesReportPayers_v1_f004 := AddNode(refBookPurchasesReportPayers, 'BookPurchasesReportPayers_v1_f004', '');
    AttribRequired(refBookPurchasesReportPayers_v1_f004, 'xmlns', '');
  refBookPurchasesReportPayers_v1_t001 := AddNode(refBookPurchasesReportPayers, 'BookPurchasesReportPayers_v1_t001', '');
    AttribRequired(refBookPurchasesReportPayers_v1_t001, 'xmlns', '');

  StartNewVisual(vtIndicatorVisual, vfTimer, 'Печать сведений о покупке/продаже', RecordsInTable(tntmpListVal));

   //Сведения о покупке/продаже
  _loop tmpListVal
  {
    NextVisual;

    // Если в книге нет "основных" записей, то в отчете для информации отображаются только суммы по валюте
    if (RecordExists tmpBook where((tmpListVal.cVal == tmpBook.cVal  and
                                    prMain          == tmpBook.TypeRec)) <> tsOk)
      Continue;

    g_cVal := if (RecordExists KlVal where ((tmpListVal.cVal == KlVal.NRec)) = tsOk, tmpListVal.cVal, Comp(0));

    PrintByCurrentVal; // Печать данных по текущей валюте
  }

  StopVisual;

  // вывод итогов по кодам операции
  if (wTune_MajorPayerBel = 1)
  {
    var bKodOp, bKolKodOp    : Byte;
    var aKodOp, sZeroSum17_2 : String;

    bKolKodOp := 5;
    sZeroSum17_2 := Num_17_2(0);

    for(bKodOp := 1; bKodOp <= bKolKodOp; bKodOp++)
    {
      pXL.ClearTblBuffer;

      aKodOp := String(bKodOp);

      if (GetFirst tmpListKodOp where ((g_cVal == tmpListKodOp.cVal and bKodOp == tmpListKodOp.bKodOp)) = tsOk)
      {
        refBookPurchasesReportPayers_v1_t001_5_ritogo_c11 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_ritogo' + aKodOp + '_c11', Num_17_2(tmpListKodOp.Sum[1]));
        refBookPurchasesReportPayers_v1_t001_5_ritogo_c12 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_ritogo' + aKodOp + '_c12', Num_17_2(tmpListKodOp.Sum[2]));
        refBookPurchasesReportPayers_v1_t001_5_ritogo_c13 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_ritogo' + aKodOp + '_c13', Num_17_2(tmpListKodOp.Sum[3]));
      }
      else
      {
        refBookPurchasesReportPayers_v1_t001_5_ritogo_c11 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_ritogo' + aKodOp + '_c11', sZeroSum17_2);
        refBookPurchasesReportPayers_v1_t001_5_ritogo_c12 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_ritogo' + aKodOp + '_c12', sZeroSum17_2);
        refBookPurchasesReportPayers_v1_t001_5_ritogo_c13 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_ritogo' + aKodOp + '_c13', sZeroSum17_2);
      }
    }
  }

  refBookPurchasesReportPayers_v1_t001_perenos_vsego_c11 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_perenos_vsego_c11', Num_17_2((tmpListVal.Sum[cnstDelta_Total_Sums + 2] - ISRusNds20)));
  refBookPurchasesReportPayers_v1_t001_perenos_vsego_c12 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_perenos_vsego_c12', Num_17_2((tmpListVal.Sum[cnstDelta_Total_Sums + 5] - ISRusNds10)));
  refBookPurchasesReportPayers_v1_t001_perenos_vsego_c13 := AddNode(refBookPurchasesReportPayers_v1_t001, 'BookPurchasesReportPayers_v1_t001_perenos_vsego_c13', Num_17_2(ItogDopNds));

  refBookPurchasesReportPayers_v1_chief := AddNode(refBookPurchasesReportPayers, 'BookPurchasesReportPayers_v1_chief', sTune_Boss);
    AttribRequired(refBookPurchasesReportPayers_v1_chief, 'xmlns', '');

  bItMessage := False;

  if (oXMLConverter.SaveTxmlTablesWithTabs(sXMLOutDir + sXMLFileName))
    bItMessage := True;

  StopVisual;

  if (bItMessage)
    Message('Данные выгружены в файл: ' + chr(13) + sXMLOutDir + sXMLFileName);
}

procedure PrintReportTotalXMLRus;
var
  bItMessage  : Boolean;
{
  bIsNewBook := True;
  bItMessage := False;

  oXMLConverter.Init;
  oXMLConverter.SortAttrByName := False;

  if (g_RegDoc = cwBook_Dop) or (bIsNPP_ForSell)
    npp := 0;  // Доп. книга, нумерация строк с 1.
  else
    npp := dataProvider.getLongFieldValue(#FIELD_FIRST_NUM) - 1;

  StartNewVisual(vtRotateVisual, vfTimer, 'Выгрузка данных в файл: ' + chr(13) + sXMLOutDir + sXMLFileName, 1);

  TheFile(sXMLTitle);

  if (oXMLConverter.SaveTxmlTables(sXMLOutDir + sXMLFileName))
    bItMessage := True;

  StopVisual;

  if (bItMessage)
    Message('Данные выгружены в файл: ' + chr(13) + sXMLOutDir + sXMLFileName);
}

// Создание папки, если такой нет
procedure MakeDir(sDirName : String);
{
  if ExistFile(sDirName)
    Exit;

  var str : String; str := sDirName;

  if (sDirName[length(str)] = '\')
    str := SubStr(str, 1, length(str) - 1);

  while (sDirName[length(str)] <> '\') and (length(str) <> 0)
    str := SubStr(str, 1, length(str) - 1);

  if (length(str) = 0)
    Exit;

  MakeDir(str);

  CreateDirectory(sDirName);
}

procedure PrintReportTotalXML;
{
  if (g_Direct = cwDirect_Sell)
    wTypeRepXML := if (g_RegDoc = cwBook_Dop, cwTypeRep_SellDop, cwTypeRep_Sell);
  else
    wTypeRepXML := if (g_RegDoc = cwBook_Dop, cwTypeRep_BuyDop , cwTypeRep_Buy);

  if bIsReport2015Bel
    sXMLTitle := 'BkPurchases_' + _DateTimeToStr(_CurDateTime, 'YYYY_MM_DD_HH_NN_SS_SSS');
  else
    sXMLTitle := oExpRepSF.fFileName(wTypeRepXML);

  sXMLFileName := sXMLTitle  + '.xml';

  MakeDir(sXMLOutDir);

  if (not ExistFile(sXMLOutDir))
  {
    Message('Невозможно создать директорию "' + sXMLOutDir + '"', Warning);
    Exit;
  }

  if (FileXML.OpenFile(sXMLOutDir + sXMLFileName, stOpenRead))
  {
    if (Message('Файл уже существует. Перезаписать?', Confirmation + YesNo) = cmYes)
    {
      FileXML.Close;

      if (not FileXML.OpenFile(sXMLOutDir + sXMLFileName, stCreate))
      {
        Message('Не удалось создать файл' + chr(13) + sXMLOutDir + sXMLFileName);
        Exit;
      }
    }
  }
  else
    if (not FileXML.OpenFile(sXMLOutDir + sXMLFileName, stCreate))
    {
      Message('Не удалось создать файл' + chr(13) + sXMLOutDir + sXMLFileName);
      Exit;
    }

  FileXML.Close;


  case TuneCountry of
    ccBel:
      PrintReportTotalXMLBel;

    ccRus:
      PrintReportTotalXMLRus;
  end;
}

// Печать всего отчета по рассчитанным данным во временных таблицах
procedure Print;
var
  d_Beg, d_End  : Date;
  g_RegDoc_Copy : Word;
  _bSaveValue   : Boolean;
{
  _try
  {
    g_isPrinted := False;

    ID := 'L_SF\BookPrZk';

    if (not ReadMyDsk(sXLTFileName, ID, True))
      sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\' + ID + '.xlt';

    toc := dataProvider.getWordFieldValue(#FIELD_TOC);

    Delete all tmpListVal;
    Delete all tmpListKodOp;
    Delete all tmpBook;
    Delete all tmpListPodr;

    InitGlobalParams;
    SetBounds4Print;

    g_RegDoc_Copy   := g_RegDoc;
    g_DateFrom_Copy := g_DateFrom;
    g_DateTo_Copy   := g_DateTo;

    if (g_FeeSigners <> '')
    {
      iFeeSigners.InitFeeSignersExt(cgReport_7302, False, False);
      iFeeSigners.FindFeeSignersByName(cgReport_7302, g_FeeSigners);
    }

    sSigner      := sTune_Boss;
    sSignerPr    := '1';
    sSignerDover := '';

    if (g_FeeSigners <> '' and iFeeSigners.FeeSignersIsValid)
      if (iFeeSigners.GetSignerFirst)
      {
        sSigner      := iFeeSigners.GetSignerFIOEx(1, False);
        sSignerPr    := '2';
        sSignerDover := iFeeSigners.GetSignerInfo(1);
      }

    bIsOnlyCorrectBK := False;
    bIsDopBook       := False;
    bIsBetweenPeriod := False;

    sAttrGTD      := sGetTune('Nalog.Rus.GTD.Attr_GTDNumber');
    sClassCountry := sGetTune('Nalog.Rus.GTD.Class_Country');

    // Общий признак книг покупок для России
    bBkZk_ForRussia := ((TuneCountry = ccRus) and (g_Direct = cwDirect_Buy));
    // Основная книга покупок для России печатается с корректирующими записями
    bMainBkZk_WithCorrecting := ((TuneCountry = ccRus) and (g_Direct = cwDirect_Buy) and
                                 ((g_RegDoc = cwBK_Reg) or (g_RegDoc = cwBK_Not_Reg)));

    bIsNewBook := ((TuneCountry = ccRus) and Year(g_DateFrom) >= 2012);

    // Установка группы отчетов, в зависимости от страны и т.п.
    if not ReadMyDsk(VidReport, ID + 'VidReport', True)
      VidReport := 0;

    bZak2014       := False;
    bIsNPP_ForSell := False; // Нумерация для книг продаж

    if (VidReport = 35 or VidReport = 44 or VidReport = 42 or VidReport = 53 or VidReport = 36 or VidReport = 45 or VidReport = 54 or VidReport = 55 or ((toc = cw_XML) and (TuneCountry = ccRus)))
    {
      bZak2014  := True;
      bIsNPP_ForSell := (g_Direct = cwDirect_Sell);
    }

    bIsReport2015Bel := False;

    if ((TuneCountry = ccBel) and (toc = cw_XML)) or (((VidReport = 11) or (VidReport = 12) or (VidReport = 13)) and (toc = cw_Excel))
      bIsReport2015Bel := True;

    bIsPrintNumPP_FromOne := (((g_RegDoc = cwBook_Dop) and (TuneCountry = ccRus)) or
                              (bIsNPP_ForSell) or bIsReport2015Bel);

    dDopL := ZeroDate;

    StartNewVisual(vtRotateVisual, vfTimer, 'Фильтрация и расчет сумм', 1);
   _bSaveValue := False;

    if (g_RegDoc = cwBook_Dop)
    {
      bIsDopBook := True;

      // Расчет сумм по основной книге
      Set g_RegDoc   := cwBK_Reg;
      Set g_DateFrom := g_DateFrom;
      Set g_DateTo   := g_DateTo;

      // В начальные суммы дополнительной книги покупок должны попадать
      // суммы по корректирующим записям предыдущих основных книг
      if (bBkZk_ForRussia)
      {
        _bSaveValue              := bMainBkZk_WithCorrecting;
        bMainBkZk_WithCorrecting := True;
      }

      CalcBook_Total; // Расчет сумм по книге

      if (bBkZk_ForRussia)
      {
        StartNewVisual(vtIndicatorVisual, vfTimer, 'Преобразование книги покупок', RecordsInTable(tntmpListVal));

        // Преобразование временных таблиц для книги покупок необходимо и для начальных сумм,
        _loop tmpListVal
        {
          NextVisual;

          Transform_tmpBook_Zk;
        }

        StopVisual;

        bMainBkZk_WithCorrecting := _bSaveValue;
      }

      // Промежуточный период. Проверка есть ли на нем корректирующие СФ
      // и перерасчет сумм первоначального итого с учетом этих СФ.
      d_Beg := Add_Day(g_DateTo, 1);
      d_End := Sub_Day(g_DateFromDop, 1);

      if (d_Beg <= d_End)
      {
        Set g_DateFrom   := d_Beg;
        Set g_DateTo     := d_End;

        bIsOnlyCorrectBK := True;
        bIsBetweenPeriod := True;

        CalcBook_Total; // Расчет сумм по книге

        bIsBetweenPeriod := False;
      }

      // Окончание процесса расчета начальных сумм. Переношу итоги в tmpListVal.Sum[cnstDelta_Begin_Sums + ...
      FinalizeBeginCalc;

      // Расчет сумм по дополнительной книге
      Set g_DateFrom := g_DateFromDop;
      Set g_DateTo   := g_DateToDop;

      bIsOnlyCorrectBK := True;
    }

    CalcBook_Total; // Расчет сумм по книге

    StopVisual;

    g_RegDoc   := g_RegDoc_Copy;
    g_DateFrom := g_DateFrom_Copy;
    g_DateTo   := g_DateTo_Copy;
    ZeroPrint  := g_isPrintZero;

    wKoefThous := if (g_isPrintThous, 1000, 1);

    bIsNewBook := ((VidReport = 34) or (VidReport = 35) or (VidReport = 36) or (VidReport = 45) or (VidReport = 41) or (VidReport = 42)or (VidReport = 44) or (VidReport = 52) or (VidReport = 53) or (VidReport = 54) or (VidReport = 55));

    if (not CheckTempRes)
      Message('Нет ни одной записи регистрации, удовлетворяющей фильтрам.', Information);
    else
    {
      case toc of
        cw_Text  : PrintReportTotal;    // Печать всего отчета по рассчитанным данным
        cw_Excel : PrintReportTotalXL;  // Печать всего отчета в Excel
        cw_XML   : PrintReportTotalXML; // Печать всего отчета в XML
      end;
    }

    Delete all tmpListVal;
    Delete all tmpBook;
  }
  _except

    on ExSchPrintInvalidField : Message(ExploreException);

    on ExDatabase:
    {
      Message('Ошибка при формировании данных для отчета! ' + ExploreException, Warning);
      Exit;
    }
}

/*
 * вывести сформированную функцией Print книгу на экран
 * реализует метод интерфейса ISchPrint
 */
procedure ShowFile;
{
  if (g_isPrinted) and (toc = cw_Text)
    frmBkPrZkF.ShowFile;
}

procedure PrepareOutFile;
{
  if (g_isPrinted) and (toc = cw_Text)
    frmBkPrZkF.PrepareOutFile;
}

end.
