#component "ATLANTIC"
#doc
CRPT_API используя функции Галактики
#end
#include CRPT_API_Native.vih

const
 coReadyToRequest = ' --ReadyToRequest--';
end;
Interface CRPT_API_Native 'CRPT_API' doaccept, Gray;

table struct tCisesList (
   requestedCis        : string
 , parent              : string
 , status              : string
 , extendedPackageType : string
)
with index (
   index0 = requestedCis
 , index1 = parent
 , index2 = status
)
;
Create view
 var


  _logFile : string;
from
  tCisesList
;

Function GenerateNewFile: string; {
 result := GetStringParameter('Files','OutputFilesDirectory',0)+ '\CISESLIST_'+DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS-SSS')+olegenerateguid;
}

function GetErrFile(subname : string = '') : string; {
  result := GenerateNewFile+if(subname = '','_ERROR','_'+subname)+'.log';
}

function GetLogFile : string; {
  if _logFile = '' then _logFile := GenerateNewFile+'.log';
  result := _logFile;
}

function curdatetimestr: string; {
  result := datetostr(Cur_date,'YYYY-MM-DD') + ' ' + timeToStr(Cur_time,'HH:MM:SS') + ' ';
}

Procedure MyLog(_str : string); {
   if _logFile = '' then _logFile := GetLogFile;
  logstrtofile(_logFile,curdatetimestr + _str)
}


Procedure ClearCisesList; {
  delete all tCisesList;
}

Procedure AddCisToList(_Cis : string); {
   if getfirst tCisesList where ((_Cis == tCisesList.requestedCis)) <> tsOK {
     insert tCisesList set
        tCisesList.requestedCis := _Cis
      , tCisesList.status       := coReadyToRequest
     ;
//     mylog('AddCisToList ' + tCisesList.requestedCis)
   }
}

Function RequestCisesListInfo(_CISESLIST: tptr;var _err : string) : tptr; {
   MyLog('GetCisesListInfo start');

   result := 0;
  var address : string = 'https://markirovka.crpt.ru';

  var httpCon: TPtr = HttpConnect_CreateEx(address, '', '', True);
  var lAddUrl: TPtr = HttpConnect_CreateLongString(httpCon);
  var lHeader: TPtr = HttpConnect_CreateLongString(httpCon);



  HttpConnect_AddValueToLongString(httpCon, '/api/v3/true-api/cises/short/list?pg=water', lAddUrl);

    HttpConnect_ResponseLogEnable(httpCon);
    HttpConnect_SetUserAgent(httpCon, 'Mozilla/5.0');

    HttpConnect_ResponseLogEnable(httpCon);


    HttpConnect_AddValueToLongString(httpCon, 'Content-Type: application/json' + chr(13), lHeader);
    HttpConnect_AddValueToLongString(httpCon, 'Accept: application/json' + chr(13), lHeader);

    var lToken: TPtr = HttpConnect_CreateLongString(httpCon);

    var _TokenFilePath : string = iCRPT_API_PowerShell.GetTokenPath;

    MyLog('GetCisesListInfo GetTokenPath OK');

    var lTokenValue : tptr = HttpConnect_LoadFromFile (httpCon, _TokenFilePath, cpUTF8);
    MyLog('GetCisesListInfo HttpConnect_LoadFromFile OK');

    HttpConnect_AddValueToLongString(httpCon, 'Authorization: Bearer ', lToken);
    HttpConnect_AddLongValueToLongString(httpCon, lTokenValue, lToken);
    MyLog('GetCisesListInfo HttpConnect_AddLongValueToLongString(httpCon, lTokenValue, lToken); OK');

    HttpConnect_SolidStringInLongString(httpCon, lToken);
    MyLog('GetCisesListInfo HttpConnect_SolidStringInLongString OK');

    HttpConnect_AddLongValueToLongString(httpCon, lToken, lHeader);
    MyLog('GetCisesListInfo HttpConnect_AddLongValueToLongString(httpCon, lToken, lHeader); OK');


    var _JSONBODY_CISESLISTSTRING : tptr = HttpConnect_JSONObjectToString(httpCon, _CISESLIST);


//    HttpConnect_SaveToFileEx(httpCon, _JSONBODY_CISESLISTSTRING, GetErrFile('JSONBODY_CISESLISTSTRING'), cpUTF8, false);
//    HttpConnect_SaveToFileEx(httpCon, lAddUrl, GetErrFile('lAddUrl'), cpUTF8, false);
//    HttpConnect_SaveToFileEx(httpCon, lHeader, GetErrFile('lHeader'), cpUTF8, false);

   var lResponse: TPtr;
    _try
    {
      _try
      {

         lResponse:= HttpConnect_SendRequestPostJSON(httpCon, lAddUrl, lHeader, _JSONBODY_CISESLISTSTRING, false);
         MyLog('GetCisesListInfo HttpConnect_SendRequestPostJSON OK');
         //HttpConnect_SaveToFileEx(httpCon, lResponse, GetErrFile, cpUTF8, false);
         //MyLog('GetCisesListInfo HttpConnect_SaveToFileEx(httpCon, lResponse, GetErrFile, cpUTF8, false); OK');
      }
      _except else {
        _err := 'GetCisesListInfo HttpConnect_SendRequestPostJSON ERROR' ;
        MyLog(_err);
        exit;
      }
      _finally {
        //HttpConnect_DestroyLongString(httpCon, lResponse);
      }
    }
    _finally
    {
      HttpConnect_DestroyLongString(httpCon, lHeader);
      HttpConnect_DestroyLongString(httpCon, lToken);
      HttpConnect_DestroyLongString(httpCon, lAddUrl);
    }

   if HttpConnect_LastError(httpCon) <> 0 then  {
     _err := 'ERROR Response ' + HttpConnect_LastErrorText(httpCon);
      mylog(_err);
      var _fileErr : string = GetErrFile('errResponse');
      HttpConnect_ResponseLogToFile(httpCon, _fileErr);
      exit;
    }
  result := lResponse;
}

Function GetCisesListInfo(var _err : string) : boolean; {
  result := true;
//  putTableToDBF(#tCisesList, GenerateNewFile+'_tCisesList.dbf', ptfFullTable);

  if(getfirst tCisesList where ((coReadyToRequest == tCisesList.status (noindex) ))) <> tsOK then exit;

  var httpCon : tptr= HttpConnect_CreateEx('ya.ru', '', '', True);

  result := false;
   var _CISESLIST : tptr = HttpConnect_JsonArrayCreate(httpCon);
   HttpConnect_JsonArrayAddString(httpCon, _CISESLIST, ' ');
   var _cisCount : word = 0;
    _loop tCisesList where ((coReadyToRequest == tCisesList.status)) {
       HttpConnect_JsonArrayAddString(httpCon, _CISESLIST, tCisesList.requestedCis);
       _cisCount++;
       if _cisCount > 900 then break;
     }

  var lResponse : tptr = RequestCisesListInfo(_CISESLIST, _err );
  HttpConnect_SaveToFileEx(httpCon, lResponse, GetErrFile('lResponse'), cpUTF8, false);
  var _responseJSON : tptr = HttpConnect_JSONObjectByLongString(httpCon, lResponse);

   mylog('HttpConnect_JSONObjectByLongString(httpCon, lResponse);');
  if _responseJSON = 0 {
      _err := 'не смогли преобразовать ответ в JSON';
      mylog(_err);
      exit;
    }

//  var _responseJSONStringAgain : tptr = HttpConnect_JSONObjectToJSON(httpCon, _responseJSON);
//    HttpConnect_SaveToFileEx(httpCon, _responseJSONStringAgain, GetErrFile, cpUTF8, false);


  var JSON_resultArray : TPTr = HttpConnect_JSONArrayByName(httpCon, _responseJSON,'Array');
    if JSON_resultArray = 0 {
      _err := 'Ошибка в структуре сообщения. Не найден объект Array';
       HttpConnect_SaveToFileEx(httpCon, lResponse, GetErrFile, cpUTF8, false);
       mylog(_err);
      exit;
    }

   var JSON_resultArrayCount : longint = HttpConnect_JsonCount(httpCon, JSON_resultArray);
     if JSON_resultArrayCount =  0 {
       _err := 'Ошибка в структуре сообщения. пустой массив возвращенных значений Array';
       HttpConnect_SaveToFileEx(httpCon, lResponse, GetErrFile, cpUTF8, false);
       mylog(_err);
      exit;

     }
    var i_JSON_resultArray : longint = 0;
    for (i_JSON_resultArray:= 0; i_JSON_resultArray <= JSON_resultArrayCount - 1; i_JSON_resultArray++) {
    //     MyLog('Идем по массиву QRY_TEMPLATE');
         var _JSON_ArrElement : TPtr = HttpConnect_JSONObjectByIndexOfArray(httpCon, JSON_resultArray, i_JSON_resultArray);
         var _JSON_ResultElement : TPTr = HttpConnect_JSONObjectByName(httpCon, _JSON_ArrElement,'result');
         clearbuffer(tntCisesList);
          var _requestedCis : string = HttpConnect_JsonObjectValueByName(httpCon, _JSON_ResultElement,'requestedCis');
          if trim(_requestedCis) = '' then continue;
          if getfirst tCisesList where ((_requestedCis == tCisesList.requestedCis)) = tsOK {
            tCisesList.status              := HttpConnect_JsonObjectValueByName(httpCon, _JSON_ResultElement,'status');
            tCisesList.extendedPackageType := HttpConnect_JsonObjectValueByName(httpCon, _JSON_ResultElement,'extendedPackageType');
            tCisesList.parent              := HttpConnect_JsonObjectValueByName(httpCon, _JSON_ResultElement,'parent');
            update current tCisesList;
          }
         // mylog('_requestedCis = '  + tCisesList.requestedCis +' _status = ' + tCisesList.status + ' _extendedPackageType ' + tCisesList.extendedPackageType + ' parent = ' + tCisesList.parent);
         //if tCisesList.extendedPackageType = 'BOX' or tCisesList.extendedPackageType = 'GROUP' {
           var _ChildrenArray : tptr = HttpConnect_JSONArrayByName(httpCon, _JSON_ResultElement,'children');

               if _ChildrenArray <> 0 {
                 var _ChildrenArrayCount : longint = HttpConnect_JsonCount(httpCon, _ChildrenArray);
                   if _ChildrenArrayCount <>  0 {

                      var i_ChildrenArray : longint = 0;
                      for (i_ChildrenArray:= 0; i_ChildrenArray <= _ChildrenArrayCount - 1; i_ChildrenArray++) {
                        var _cisChildren : string = HttpConnect_StringByIndexOfArray(httpCon, _ChildrenArray, i_ChildrenArray);
                         AddCisToList(replace(_cisChildren,'"',''));
                      }
                  }
               }

    }

  result := GetCisesListInfo(_err);
  //putTableToDBF(#tCisesList, GenerateNewFile+'_tCisesList.dbf', ptfFullTable);
}

Function GetCisStatus (_Cis : string) : string; {
   result := 'NOT FOUND';
  if getfirst tCisesList where ((_Cis == tCisesList.requestedCis)) = tsOK {
    result := tCisesList.status
  }
}

Function GetCisUtitCounts (_Cis : string) : longint; {

  var _result : longint = 0;
  if getfirst tCisesList where ((_Cis == tCisesList.requestedCis)) = tsOK {
    if tCisesList.extendedPackageType = 'UNIT' then  {
      _result := 1;
//        mylog('GetCisUtitCounts _Cis is UNIT');
      }
     else {
       _loop tCisesList where ((_Cis == tCisesList.parent)) {
         if tCisesList.extendedPackageType = 'UNIT' then {
           _result := _result + 1;
//            mylog('GetCisUtitCounts parent = _Cis, and under it cis ' + tCisesList.requestedCis  + 'is UNIT');
         } else {
           pushpos(tntCisesList);
           _result := _result + GetCisUtitCounts(tCisesList.requestedCis);
           poppos(tntCisesList);
         }
       }
     }
  }
//  mylog('_result = ' + _result) ;
 result := _result;
}


End. // Interface
