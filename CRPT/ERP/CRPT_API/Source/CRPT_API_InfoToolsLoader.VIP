#doc
 Загрузка каталога CRPT_API_InfoTools
#end
#include LoadOrder_CRPT.vih
Interface CRPT_API_InfoToolsLoader  'Загрузка каталога КИ CRPT_API'  Gray;
  Show at (, , 87, 27);

var
    Folder_input
  , File_input
  , Folder_output
  , Folder_log
  , _logStr
  , _LogFile   : string;


table struct tCodesFromTxt
(
   sCis         : string
 , sTxtFilePath : string
)
with index
(
 i_wType = sCis
);


Create view
from
//     CRPT_InfoList
     CRPT_Docs
   , CRPT_SpDocs
   , tCodesFromTxt
;

File gfFile;
Function curdatetimestr: string; {
  result := datetostr(Cur_date,'YYYY-MM-DD') + ' ' + timeToStr(Cur_time,'HH:MM:SS') + ' ';
}

procedure myLog(_log : string);
{
  logstrtofile(_LogFile,curdatetimestr + _log)
}

Procedure GetKituFromFile; {
  mylog('in procedure GetKituFromFile');
   delete all tCodesFromTxt;
   startnewvisual(vtRotateVisual,vftimer+vfbreak+vfconfirm,'Поиск файлов...',0);
   if FindFirstFile(Folder_input+'*.txt*', File_input) {
      do {
        mylog('find file ' + File_input);
         File_input:=upcase(File_input);
           if(MatchesMask(File_input,'*.txt') ) {
             mylog('  filename MatchesMask OK');
              if not IsDirectory(Folder_input+File_input) {
                 if (gfFile.OpenFile(Folder_input+File_input,stOpenRead ) ) {
                    var s: string = '';
                    var _cis: string ='';
                    while (not gfFile.EOF) do {
                      gfFile.ReadLn(s);
                      if s <> '' {
                          mylog('  readingfile ' + s);

                         //message(''+s);
                         _cis := s;// ExtractDelimitedWord(s,8,';');
                         if (_cis <> '' and getfirst tCodesFromTxt where (( _cis == tCodesFromTxt.sCis)) != tsOk) {
                          set tCodesFromTxt.sCis := _cis;
                          set tCodesFromTxt.sTxtFilePath := replace(File_input,'.TXT','');
                          insert current tCodesFromTxt;
                         }
                      }
                 }
                    gfFile.Close;
                     mylog('  closefile ');

                    CopyMoveFile(Folder_input+File_input,Folder_output+File_input, true, ecmfClientFrom  + ecmfClientTo ) ;
                    mylog('  move file  ' + Folder_input+File_input +'->'+ Folder_output+File_input);

              } else {
                       _logStr := 'Не удалось открыть файл '+Folder_input+File_input;
                       myLog(_logStr);
              };
            }
         }
       } while FindNextFile(File_input);
    }

    StopVisual('', 0);
   // RunInterface('ATLANTIC::CRPT_API_PowerShell', 'GetToken', '');
    _loop tCodesFromTxt {
       // message(String(tCodesFromTxt.sCis + ' from ' + tCodesFromTxt.sTxtFilePath)) ;
       /* 20211021 - Николай сказал не запрашивать , а просто генеирить пусто документ в  CRPT_Docs с содержимым = позициям файла
       RunInterface('ATLANTIC::CRPT_API_PowerShell', 'GetInformation', tCodesFromTxt.sCis);

       */

       if getfirst CRPT_Docs where ((sTxtFilePath == CRPT_Docs.declaration_number (noindex))) <> tsOK then {
         insert CRPT_Docs set CRPT_Docs.declaration_number := tCodesFromTxt.sTxtFilePath
         ;
          mylog('Insert CRPT_Docs '+ CRPT_Docs.declaration_number);
         }
        // SSCC; EAN штуки; EAN упаковки; дата производства
         var _SSCC      : string =  extractdelimitedword(tCodesFromTxt.sCis+';',1,';');
         var _EAN       : string =  extractdelimitedword(tCodesFromTxt.sCis+';',2,';');
         var _EANUPAK   : string =  extractdelimitedword(tCodesFromTxt.sCis+';',3,';');
         var _Prod_date : string =  extractdelimitedword(tCodesFromTxt.sCis+';',4,';');
         mylog('tCodesFromTxt.sCis = ' + tCodesFromTxt.sCis);
         mylog('_SSCC              = ' + _SSCC             );
         mylog('_EAN               = ' + _EAN              );
         mylog('_EANUPAK           = ' + _EANUPAK          );
         mylog('_Prod_date         = ' + _Prod_date        );
         mylog('strtodate(_Prod_date,YYYY-MM-DD) = '+ strtodate(_Prod_date,'YYYY-MM-DD'));

       insert CRPT_SpDocs set
          CRPT_SpDocs.cDoc            := CRPT_Docs.nrec
        , CRPT_SpDocs.kitu            := _SSCC
        , CRPT_SpDocs.PRODUCTION_DATE := strtodate(_Prod_date,'YYYY-MM-DD')
       ;
       _logStr :=  String('Insert row ' + tCodesFromTxt.sCis);

       _LoadOrder_CRPT.InsertSpec(  tCodesFromTxt.sTxtFilePath
                                  , _SSCC
                                  , _EAN
                                  , _EANUPAK
                                  , strtodate(_Prod_date,'YYYY-MM-DD')
                                 ) ;

       myLog(_logStr);
    }
}
/*
Screen scrCRPT_InfoList;
show at (,,,5);
  fields
    //_cis :[10], noPickButton, noProtect ;
  buttons
    cmGetInformation ,,,'Запрос списка КИ',,;
    cmGetRefreshRow  ,,,'Обновить текущую строку',,;
   // cmGetToken ,,,'Получить Токен',,;
<<

  <.    Запрос списка КИ    .>                 <.  Обновить текущую строку  .>

>>
end;


Browse brCRPT_InfoList (,,sci1Esc);
  Show at (,6,,);
Table CRPT_InfoList;
 Fields
  CRPT_InfoList.cis                  'SSCC-код паллеты'                     ('',,): [6], Protect;
  CRPT_InfoList.cparent              'Ссылка на вышестоящую позицию'        ('',,): [6], Protect;
  CRPT_InfoList.lastStatusChangeDate 'Дата последнего изменения статуса'    ('',,): [6], Protect;
  CRPT_InfoList.gtin                 'Код товара'                           ('',,): [6], Protect;
  CRPT_InfoList.lastDocId            'Последний док. в ГИС МТ по КИ'        ('',,): [6], Protect;
  CRPT_InfoList.emissionDate         'Дата эмиссии КИ'                      ('',,): [6], Protect;
  CRPT_InfoList.productGroup         'Товарная группа'                      ('',,): [6], Protect;
  CRPT_InfoList.ownerInn             'Текущий владелец КИТУ'                ('',,): [6], Protect;
  CRPT_InfoList.sgtin                'Код товара и серийный номер КИ'       ('',,): [6], Protect;
  CRPT_InfoList.participantInn       'Текущий владелец КИГУ'                ('',,): [6], Protect;
 end;
*/
handleevent
cminit:{
  Folder_log     := replace(sgettune('USERTUNE.CRPT_PRJ.INFOTOOLSLOADER_LogFolder')+'\','\\','\');//'C:\Galaktika_stend\FTP\Factory\in\Log\'; //sgettune('USERTUNE.imp.pathfrom');

  _LogFile := datetostr(Cur_date,'YYYY-MM-DD') + ' ' + timeToStr(Cur_time,'HHMMSS')+'.log';
  _LogFile := Folder_log+_LogFile;

  Folder_input   := Replace(sgettune('USERTUNE.CRPT_PRJ.INFOTOOLSLOADER_InputFolder')+'\','\\','\'); //'C:\Galaktika_stend\FTP\Factory\in\'; //sgettune('USERTUNE.imp.pathfrom');
  Folder_output  := Replace(sGettune('USERTUNE.CRPT_PRJ.INFOTOOLSLOADER_OutputFolder')+'\','\\','\');//'C:\Galaktika_stend\FTP\Factory\in\Arch //sgettune('USERTUNE.imp.pathto');
  Folder_output := Replace(Folder_output + '\'+Year(Cur_Date)+'\'+DateToStr(Cur_Date, 'MM')+'\'+DateToStr(Cur_Date, 'DD-MM-YYYY')+'\','\\','\') ;

  mylog('Folder_input = '+Folder_input);
  mylog('Folder_output = '+Folder_output);

  if not existfile(Folder_output) then
   {
      CreateDirectory(Folder_output);
      mylog(' Folder_output does not exist. Create =  '+      string(CreateDirectory(Folder_output)));
   }

  GetKituFromFile();
    mylog('close interface');
  CloseInterface(cmDone);
//  StartTimer(cmValue2,2,false);
}
/*
cmValue2: {
  StopTimer(cmValue2);
    mylog('close interface');
  CloseInterface(cmDone);
}
*/
end;

End. // Interface
