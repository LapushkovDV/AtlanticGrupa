procedure fillrecArray_GetBusinessEntity;
{
    var _npp: byte;
        _npp := 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);

  _recArray[_npp].def := coPS1_BissnEntity_uuid         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  _recArray[_npp].def := coPS1_BissnEntity_guid         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  _recArray[_npp].def := coPS1_BissnEntity_active       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  _recArray[_npp].def := coPS1_BissnEntity_name         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  _recArray[_npp].def := coPS1_BissnEntity_Fullname     ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  _recArray[_npp].def := coPS1_BissnEntity_inn          ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  _recArray[_npp].def := coPS1_BissnEntity_kpp          ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  _recArray[_npp].def := coPS1_BissnEntity_ogrn         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  _recArray[_npp].def := coPS1_BissnEntity_addressView  ;
}
Procedure InsertATL_BissnEntity;
{
  var _i: byte;

  clearBuffer(tntBissnEntity);
  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of

      Upcase(coPS1_BissnEntity_uuid             ) : tBissnEntity.uuid        := Trim(_recArray[_i].value);
      Upcase(coPS1_BissnEntity_guid             ) : tBissnEntity.guid        := Trim(_recArray[_i].value);
      Upcase(coPS1_BissnEntity_active           ) : tBissnEntity.active      := Trim(_recArray[_i].value);
      Upcase(coPS1_BissnEntity_name             ) : tBissnEntity.name        := Trim(_recArray[_i].value);
      Upcase(coPS1_BissnEntity_Fullname         ) : tBissnEntity.Fullname    := Trim(_recArray[_i].value);
      Upcase(coPS1_BissnEntity_inn              ) : tBissnEntity.inn         := Trim(_recArray[_i].value);
      Upcase(coPS1_BissnEntity_kpp              ) : tBissnEntity.kpp         := Trim(_recArray[_i].value);
      Upcase(coPS1_BissnEntity_ogrn             ) : tBissnEntity.ogrn        := Trim(_recArray[_i].value);
      Upcase(coPS1_BissnEntity_addressView      ) : tBissnEntity.addressView := Trim(_recArray[_i].value);
    end;
  }
     Insert Current tBissnEntity;
}  // tInsertSaldoMC
Procedure FillPS1_VetisAPI_GetBusinessEntity(_ExcelFileOut, _OleGenerateGUID: string; _INN : string);
{
  MyWriteLN('#Сначала надо импортировать модуль 1 раз для работы с EXCEL ');
  MyWriteLN('# Если есть инет, то запускаем оболочку от имени админа и запускаем');
  MyWriteLN('# [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12');
  MyWriteLN('# Install-Module -Name ImportExcel                                                                                                           ');
  MyWriteLN('# Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy ByPass                                                                             ');
  MyWriteLN('# Import-Module ImportExcel                                                                                                                  ');
  MyWriteLN('#                                                                                                                                            ');
  MyWriteLN('# если нет на машине инета, то идем https://www.powershellgallery.com/packages/ImportExcel/7.1.0 и качаем вручную все                        ');
  MyWriteLN('#                                                                        ');
  MyWriteLN('#name="test"                                                             ');
  MyWriteLN('#Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy ByPass          ');
  MyWriteLN('#Import-Module ImportExcel                                               ');
  MyWriteLN('                                                                         ');
  MyWriteLN('                                                                         ');
  MyWriteLN('Get-ChildItem -Path $PSScriptRoot -Include @("*.ps1","*.log", "*.xls*") -Recurse | Where-Object -Property CreationTime -lt (Get-Date).AddDays(-8) | Remove-Item -Force -ErrorAction SilentlyContinue');
  MyWriteLN('$circuitserviceID="'+coCircuit_serviceID+'"                              ');
  MyWriteLN('$circuitendpointUrl="'+coCircuit_endpointUrlGetBusinessEntity+'"                          ');
  MyWriteLN('$circuitlogin="'+coCircuit_login+'"                                      ');
  MyWriteLN('$circuitpassword="'+coCircuit_password+'"                                ');
  MyWriteLN('$circuitapiKey="'+coCircuit_apiKey+'"                            ');
  MyWriteLN('$circuitissureId="'+coCircuit_issureId+'"                                ');
  MyWriteLN('$circuitsysLogin="'+coCircuit_sysLogin+'"                                 ');
  MyWriteLN('$circuitenterpriseGuid="'+coCircuit_enterpriseGuid+'"                     ');
  MyWriteLN('$circuitbusinessEntityGuid ="'+coCircuit_businessEntityGuid+'"            ');
  MyWriteLN('                                                                           ');
  MyWriteLN('$circuitCountTry           = '+coCircuit_CountTry+'                        ');
  MyWriteLN('$circuitPause              = '+coCircuit_Pause+'                           ');
  MyWriteLN('                                                                                     ');
  MyWriteLN('$ReportPath = "'+_ExcelFileOut +'"                                         ');
  MyWriteLN('$INN = "'+_INN+'"                                                                                     ');
  MyWriteLN('[String]$GlobError                                                                   ');
  MyWriteLN('$GlobError = ""                                                                      ');
  MyWriteLN('$RQST_GUID = "'+_OleGenerateGUID+'"                                                                                     ');
  MyWriteLN('$conStrinGal  = '''+GetConnString+'''');
  MyWriteLN('function Invoke-DatabaseQuery {                                                         ');
  MyWriteLN('        [CmdletBinding()]                                                               ');
  MyWriteLN('        param (                                                                         ');
  MyWriteLN('                [string]$connectionString,                                              ');
  MyWriteLN('                [string]$query,                                                         ');
  MyWriteLN('                [switch]$isSQLServer                                                    ');
  MyWriteLN('        )                                                                               ');
  MyWriteLN('        if ($isSQLServer) {                                                             ');
  MyWriteLN('                Write-Verbose ''in SQL Server mode''                                    ');
  MyWriteLN('                $connection = New-Object -TypeName System.Data.SqlClient.SqlConnection  ');
  MyWriteLN('        } else {                                                                        ');
  MyWriteLN('                Write-Verbose ''in OleDB mode''                                         ');
  MyWriteLN('                $connection = New-Object -TypeName System.Data.OleDb.OleDbConnection    ');
  MyWriteLN('        }                                                                               ');
  MyWriteLN('        $connection.ConnectionString = $connectionString                                ');
  MyWriteLN('        $command = $connection.CreateCommand()                                          ');
  MyWriteLN('        $command.CommandText = $query                                                   ');
  MyWriteLN('        $connection.Open()                                                              ');
  MyWriteLN('        $command.ExecuteNonQuery()                                                      ');
  MyWriteLN('        $connection.close()                                                             ');
  MyWriteLN('}                                                                                       ');
  MyWriteLN('Function GetDataFromWeb([xml]$fnXML, [string]$URL)                                   ');
  MyWriteLN('{                                                                                    ');
  MyWriteLN('                                                                                     ');
  MyWriteLN('$headers = @{}                                                                       ');
  MyWriteLN('$headers.add("SOAPAction","GetResponse")                                             ');
  MyWriteLN('$headers.add("Accept","text/xml")                                                    ');
  MyWriteLN('$resultValue = $null                                                                 ');
  MyWriteLN('$credentials = New-Object System.Management.Automation.PSCredential -ArgumentList @($circuitlogin,(ConvertTo-SecureString -String $circuitpassword -AsPlainText -Force))');
  MyWriteLN('#write-host "try Invoke-WebRequest"  -ForegroundColor Green                                                                                                                                      ');
  MyWriteLN('   try                                                                                                                                                                  ');
  MyWriteLN('    {                                                                                                                                                                   ');
  MyWriteLN('     $resultValue = Invoke-WebRequest -URI $URL -Headers $headers -Method Post -Body $fnXML -ContentType ''text/xml;charset="utf-8"'' -Credential $credentials -UseBasicParsing');
  MyWriteLN('    # write-host "Invoke-WebRequest OK"  -ForegroundColor Green                                            ');
  MyWriteLN('    }                                                                             ');
  MyWriteLN('    catch                                                                         ');
  MyWriteLN('    {                                                                             ');
  MyWriteLN('     # write-host "Invoke-WebRequest error"                                       ');
  MyWriteLN('      $GlobError = $error[0].ToString()                                           ');
  MyWriteLN('      #write-host $error[0].ToString()                                            ');
  MyWriteLN('    }                                                                             ');
  MyWriteLN('    #write-host $resultValue                                                      ');
  MyWriteLN(' $resultValue                                                                     ');
  MyWriteLN('}                                                                                 ');
  MyWriteLN('Function GetResponse([string]$fnINN)                                                            ');
  MyWriteLN('{                                                                                 ');
  MyWriteLN(' $template = @''                                                                   ');
  MyWriteLN('<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"       ');
  MyWriteLN('  xmlns:ws="http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2"            ');
  MyWriteLN('  xmlns:bs="http://api.vetrf.ru/schema/cdm/base"                                  ');
  MyWriteLN('  xmlns:dt="http://api.vetrf.ru/schema/cdm/dictionary/v2">                        ');
  MyWriteLN('   <soapenv:Header/>                                                              ');
  MyWriteLN('   <soapenv:Body>                                                                 ');
  MyWriteLN('      <ws:getBusinessEntityListRequest>                                           ');
  MyWriteLN('         <dt:businessEntity>                                                      ');
  MyWriteLN('            <dt:inn>{0}</dt:inn>                                                  ');
  MyWriteLN('         </dt:businessEntity>                                                     ');
  MyWriteLN('      </ws:getBusinessEntityListRequest>                                          ');
  MyWriteLN('   </soapenv:Body>                                                                ');
  MyWriteLN('</soapenv:Envelope>                                                               ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('''@                                                                               ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('#            webRequest.Credentials = credentials;                                ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('$fnc_RqstBody = $template -f $fnINN                                                 ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('[xml] $XmlPrepare = $fnc_RqstBody                                                 ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('$response = GetDataFromWeb -fnXML $XmlPrepare -URL $circuitendpointUrl            ');
  MyWriteLN('     #write-host $response.content                                                ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('    If ( ($response.StatusCode -eq 200) -and ($response -ne $null))               ');
  MyWriteLN('    {                                                                             ');
  MyWriteLN('     #write-host $response.content                                                ');
  MyWriteLN('     $response.content                                                            ');
  MyWriteLN('    }                                                                             ');
  MyWriteLN('    else                                                                          ');
  MyWriteLN('    {                                                                             ');
  MyWriteLN('     $null                                                                        ');
  MyWriteLN('    }                                                                             ');
  MyWriteLN('}                                                                                 ');
  MyWriteLN(' Write-host "Запрос BusinessEntity. Обращение к API"   -ForegroundColor Green                                                                                 ');
  MyWriteLN('$Response = GetResponse -fnINN $INN                                      ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('if ($Response -ne $null)                                                          ');
  MyWriteLN('{                                                                                 ');
  MyWriteLN(' Write-host "Запрос BusinessEntity. Разбор XML"  -ForegroundColor Green                                                                                  ');
  MyWriteLN('[xml] $XmlResponse = $Response                                                    ');
  MyWriteLN('[System.Collections.ArrayList] $FinalReport = @();                                ');
  MyWriteLN('if ($XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.count -ne 0)  ');
  MyWriteLN('{                                                                                             ');
  MyWriteLN('foreach($businessEntity in $XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity)     ');
  MyWriteLN(' {                                                                                                                         ');
  MyWriteLN('    $item = New-Object PSObject                                                                                            ');
  MyWriteLN('    # для вставки в основную таблицу                                                                                       ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_uuid+'" -Value $businessEntity.uuid                                         ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_guid+'" -Value $businessEntity.guid                                         ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_active+'" -Value $businessEntity.active                                     ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_name+'" -Value $businessEntity.name                                         ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_Fullname+'" -Value $businessEntity.Fullname                                 ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_inn+'" -Value $businessEntity.inn                                           ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_kpp+'" -Value $businessEntity.kpp                                           ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_ogrn+'" -Value $businessEntity.ogrn                                         ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_BissnEntity_addressView+'" -Value $businessEntity.juridicalAddress.addressView          ');
  MyWriteLN('    $FinalReport +=,$item                                                                                                  ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.juridicalAddress.country.name  ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.juridicalAddress.region.name   ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.juridicalAddress.locality.name ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.juridicalAddress.street.name   ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.juridicalAddress.house         ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.juridicalAddress.building      ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.juridicalAddress.room          ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.juridicalAddress.postIndex     ');
  MyWriteLN('#$XmlResponse.Envelope.Body.getBusinessEntityListResponse.businessEntityList.businessEntity.incorporationForm.name         ');
  MyWriteLN('  }                                                                                                                        ');
  MyWriteLN('                                                                                                                           ');
  MyWriteLN(' write-host "Запрос BusinessEntity. Выгрузка в EXCEL" -ForegroundColor Green                                                        ');
  MyWriteLN('                                                                                                                           ');
  MyWriteLN(' #$FinalReport | Export-Excel -Path $ReportPath -AutoSize -WorksheetName "'+_Parameter+'"                                 ');
  MyWriteLN('}                                                                                                                                      ');
  MyWriteLN('[string]$sqlQuery = "" ');
  MyWriteLN(' [int]$npp = 1                                                                       ');
  MyWriteLN(' write-host "Запрос стока. Запись запроса " -ForegroundColor Green         ');
  MyWriteLN(' foreach($item in $FinalReport)                                                      ');
  MyWriteLN('  {                                                                                  ');
  MyWriteLN('   write-host "Запрос стока. Запись запроса " $npp.tostring()  -ForegroundColor Cyan       ');
  MyWriteLN('   if([math]::Truncate($npp/23) -eq $npp/23) ');
  MyWriteLN('    {                                       ');
  MyWriteLN('     write-host "Запись в буферную таблицу полученных результатов" -ForegroundColor Cyan       ');
  MyWriteLN('     $res = Invoke-DatabaseQuery -connectionString $conStrinGal -query $sqlQuery -isSQLServer ');
  MyWriteLN('     $sqlQuery = "" ');
  MyWriteLN('    }                                       ');

  MyWriteLN('   foreach( $property in $item.psobject.properties.name )                            ');
  MyWriteLN('    {                                                                                ');
  MyWriteLN('      if ($item.$property -eq $null)                                                 ');
  MyWriteLN('        {                                                                            ');
  MyWriteLN('         $itemproperty = ""                                                          ');
  MyWriteLN('        }                                                                            ');
  MyWriteLN('        else                                                                         ');
  MyWriteLN('         {                                                                           ');
  MyWriteLN('          $itemproperty = $item.$property                                            ');
  MyWriteLN('         }                                                                           ');
  MyWriteLN('      $sqlQuery = $sqlQuery + ''Insert t$ATL_RQSTAPIVALUES (f$RQST_GUID, f$RSQT_PROVIDER, f$NROW, f$COLUMNNAME, f$VALUE)    ');
  MyWriteLN('                   values (''''''+$RQST_GUID+'''''',''''''+$circuitserviceID+'''''',''+$npp.tostring()+'',''''''+$property.Replace("''","''''")+'''''',''''''+$itemproperty.Replace("''","''''")+'''''') ');
  MyWriteLN('                   '' ');
  MyWriteLN('                                                                                               ');
  MyWriteLN('    }                                                                                          ');
  MyWriteLN('    $npp = $npp + 1                                                                            ');
  MyWriteLN('  }                                                                                            ');
  MyWriteLN('   write-host "Запись в буферную таблицу полученных результатов" -ForegroundColor Cyan       ');
  MyWriteLN('      $res = Invoke-DatabaseQuery -connectionString $conStrinGal -query $sqlQuery -isSQLServer ');
  MyWriteLN('    $sqlQuery = ""                                                                            ');

  MyWriteLN('}                                                                                                                                      ');

}
Function GetRequestToAPIVetis_GetBusinessEntity(_INN : string; var _BissnEntity: string) : boolean;
{
  delete all tBissnEntity;
   #BodyProcedureGetRqst(GetBusinessEntity,_INN)

  IF (getfirst tBissnEntity where tBissnEntity.active = 'true') = tsOK
   {
     _BissnEntity := tBissnEntity.guid;
     MyLog('По ИНН '+_INN+' найден BusinessEntity ' +_BissnEntity);
     IF (getnext tBissnEntity where tBissnEntity.active = 'true') = tsOK
      {
         Result := false;
         _BissnEntity := 'Более одного активного BusinessEntity' + ''#13'' + 'Обратитесь в целевую организацию.';
         MyLog('По ИНН '+_INN+' Более одного активного BusinessEntity ');
      }
   }
   else
   {
     Result := false;
    _BissnEntity := 'Информация по организации не найдена';
     MyLog('По ИНН '+_INN+' нет ни одного активного BusinessEntity ');
   }
}
