Procedure fillrecArray_GetStockList;
{
      var _npp: byte;
        _npp := 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);

    _recArray[_npp].def := coPS1_stock_APPLICATIONID    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_REQUESTSTATUS    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_GUID             ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_ENTRYNUMBER      ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_NAME             ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_VOLUME           ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_DATEOFPRODUCTION ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_EXPIRYDATE       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_PERISHABLE       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_QUANTITY2        ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_QUANTITY4        ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_STATUS           ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_CREATEDATE       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_UPDATEDATE       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_PRODUCTTYPE      ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_PRODUCTGUID      ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_SUBPRODUCTGUID   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_GLOBALID         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_BATCHID          ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_LEVEL2           ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_PACKINGTYPEID_2  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_PRODUCTMARKSEAN_2; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_LEVEL4           ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_PACKINGTYPEID_4  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_PRODUCTMARKSEAN_4; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_PRODUCTMARKS_4   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_country_guid     ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_producer_guid    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_producer_role    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := coPS1_stock_lowGradeCargo



}
Procedure InsertATL_VETISRQSTSP;
{
  var _i: byte;
  var _APPLICATIONID : string = '';
  var _REQUESTSTATUS : string = '';

  clearBuffer(tnATL_VETISRQSTSP);
  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of
      Upcase(coPS1_stock_APPLICATIONID    ) : _APPLICATIONID := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_REQUESTSTATUS    ) : _REQUESTSTATUS := Trim(_recArray[_i].value);

      Upcase(coPS1_stock_GUID             ) : ATL_VETISRQSTSP.GUID             := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_ENTRYNUMBER      ) : ATL_VETISRQSTSP.ENTRYNUMBER      := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_NAME             ) : ATL_VETISRQSTSP.NAME             := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_VOLUME           ) : ATL_VETISRQSTSP.VOLUME           := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_DATEOFPRODUCTION ) : ATL_VETISRQSTSP.DATEOFPRODUCTION := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_EXPIRYDATE       ) : ATL_VETISRQSTSP.EXPIRYDATE       := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_PERISHABLE       ) : ATL_VETISRQSTSP.PERISHABLE       := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_QUANTITY2        ) : ATL_VETISRQSTSP.QUANTITY2        := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_QUANTITY4        ) : ATL_VETISRQSTSP.QUANTITY4        := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_STATUS           ) : ATL_VETISRQSTSP.STATUS           := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_CREATEDATE       ) : ATL_VETISRQSTSP.CREATEDATE       := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_UPDATEDATE       ) : ATL_VETISRQSTSP.UPDATEDATE       := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_PRODUCTTYPE      ) : ATL_VETISRQSTSP.PRODUCTTYPE      := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_PRODUCTGUID      ) : ATL_VETISRQSTSP.PRODUCTGUID      := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_SUBPRODUCTGUID   ) : ATL_VETISRQSTSP.SUBPRODUCTGUID   := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_GLOBALID         ) : ATL_VETISRQSTSP.GLOBALID         := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_BATCHID          ) : ATL_VETISRQSTSP.BATCHID          := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_LEVEL2           ) : ATL_VETISRQSTSP.LEVEL2           := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_PACKINGTYPEID_2  ) : ATL_VETISRQSTSP.PACKINGTYPEID_2  := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_PRODUCTMARKSEAN_2) : ATL_VETISRQSTSP.PRODUCTMARKSEAN_2:= Trim(_recArray[_i].value);
      Upcase(coPS1_stock_LEVEL4           ) : ATL_VETISRQSTSP.LEVEL4           := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_PACKINGTYPEID_4  ) : ATL_VETISRQSTSP.PACKINGTYPEID_4  := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_PRODUCTMARKSEAN_4) : ATL_VETISRQSTSP.PRODUCTMARKSEAN_4:= Trim(_recArray[_i].value);
      Upcase(coPS1_stock_PRODUCTMARKS_4   ) : ATL_VETISRQSTSP.PRODUCTMARKS_4   := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_country_guid     ) : ATL_VETISRQSTSP.country_guid     := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_producer_guid    ) : ATL_VETISRQSTSP.producer_guid    := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_producer_role    ) : ATL_VETISRQSTSP.producer_role    := Trim(_recArray[_i].value);
      Upcase(coPS1_stock_lowGradeCargo    ) : ATL_VETISRQSTSP.lowGradeCargo    := Trim(_recArray[_i].value);


    end;
  }
      ATL_VETISRQSTSP.REQUESTNREC := GetNrecATL_VETISRQST(_APPLICATIONID,_REQUESTSTATUS);
     Insert Current ATL_VETISRQSTSP;
    // MyLog('Вставляем запись');
}  // tInsertSaldoMC
Procedure FillPS1_VetisAPI_GetStockList(_ExcelFileOut, _OleGenerateGUID: string; _emptyValue : string);
{
  _emptyValue := '';
  MyWriteLN('#Сначала надо импортировать модуль 1 раз для работы с EXCEL ');
  MyWriteLN('# Если есть инет, то запускаем оболочку от имени админа и запускаем');
  MyWriteLN('# [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12');
  MyWriteLN('# Install-Module -Name ImportExcel                                                                                                           ');
  MyWriteLN('# Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy ByPass                                                                             ');
  MyWriteLN('# Import-Module ImportExcel                                                                                                                  ');
  MyWriteLN('#                                                                                                                                            ');
  MyWriteLN('# если нет на машине инета, то идем https://www.powershellgallery.com/packages/ImportExcel/7.1.0 и качаем вручную все                        ');
  MyWriteLN('#                                                                        ');
  MyWriteLN('#name="test"                                                             ');
  MyWriteLN('#Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy ByPass          ');
  MyWriteLN('#Import-Module ImportExcel                                               ');
  MyWriteLN('                                                                         ');
  MyWriteLN('Get-ChildItem -Path $PSScriptRoot -Include @("*.ps1","*.log", "*.xls*") -Recurse | Where-Object -Property CreationTime -lt (Get-Date).AddDays(-8) | Remove-Item -Force -ErrorAction SilentlyContinue');
  MyWriteLN('$circuitserviceID="'+coCircuit_serviceID+'"                              ');
  MyWriteLN('$circuitendpointUrl="'+coCircuit_endpointUrlGetSTOCKList+'"                          ');
  MyWriteLN('$circuitlogin="'+coCircuit_login+'"                                      ');
  MyWriteLN('$circuitpassword="'+coCircuit_password+'"                                ');
  MyWriteLN('$circuitapiKey="'+coCircuit_apiKey+'"                            ');
  MyWriteLN('$circuitissureId="'+coCircuit_issureId+'"                                ');
  MyWriteLN('$circuitsysLogin="'+coCircuit_sysLogin+'"                                 ');
  MyWriteLN('$circuitenterpriseGuid="'+coCircuit_enterpriseGuid+'"                     ');
  MyWriteLN('$circuitbusinessEntityGuid ="'+coCircuit_businessEntityGuid+'"            ');
  MyWriteLN('                                                                           ');
  MyWriteLN('$circuitCountTry           = '+coCircuit_CountTry+'                        ');
  MyWriteLN('$circuitPause              = '+coCircuit_Pause+'                           ');
  MyWriteLN('                                                                                     ');
  MyWriteLN('$ReportPath = "'+_ExcelFileOut +'"                                         ');
  MyWriteLN('$fileLog =    "'+_MylogFile+'" ');
  MyWriteLN('                                                                                     ');
  MyWriteLN('[String]$GlobError                                                                   ');
  MyWriteLN('$GlobError = ""                                                                      ');
  MyWriteLN('$RQST_GUID = "'+_OleGenerateGUID+'"                                                                                     ');
  MyWriteLN('$conStrinGal  = '''+GetConnString+'''');
  MyWriteLN('function Invoke-DatabaseQuery {                                                         ');
  MyWriteLN('        [CmdletBinding()]                                                               ');
  MyWriteLN('        param (                                                                         ');
  MyWriteLN('                [string]$connectionString,                                              ');
  MyWriteLN('                [string]$query,                                                         ');
  MyWriteLN('                [switch]$isSQLServer                                                    ');
  MyWriteLN('        )                                                                               ');
  MyWriteLN('        if ($isSQLServer) {                                                             ');
  MyWriteLN('                Write-Verbose ''in SQL Server mode''                                    ');
  MyWriteLN('                $connection = New-Object -TypeName System.Data.SqlClient.SqlConnection  ');
  MyWriteLN('        } else {                                                                        ');
  MyWriteLN('                Write-Verbose ''in OleDB mode''                                         ');
  MyWriteLN('                $connection = New-Object -TypeName System.Data.OleDb.OleDbConnection    ');
  MyWriteLN('        }                                                                               ');
  MyWriteLN('        $connection.ConnectionString = $connectionString                                ');
  MyWriteLN('        $command = $connection.CreateCommand()                                          ');
  MyWriteLN('        $command.CommandText = $query                                                   ');
  MyWriteLN('        $connection.Open()                                                              ');
  MyWriteLN('        $command.ExecuteNonQuery()                                                      ');
  MyWriteLN('        $connection.close()                                                             ');
  MyWriteLN('}                                                                                       ');
  MyWriteLN('Function GetDataFromWeb([xml]$fnXML, [string]$URL)                                   ');
  MyWriteLN('{                                                                                    ');
  MyWriteLN('                                                                                     ');
  MyWriteLN('$headers = @{}                                                                       ');
  MyWriteLN('$headers.add("SOAPAction","GetResponse")                                             ');
  MyWriteLN('$headers.add("Accept","text/xml")                                                    ');
  MyWriteLN('                                                                                     ');
  MyWriteLN('$credentials = New-Object System.Management.Automation.PSCredential -ArgumentList @($circuitlogin,(ConvertTo-SecureString -String $circuitpassword -AsPlainText -Force))');
  MyWriteLN('   try                                                                                                                                                        ');
  MyWriteLN('    {                                                                                                                                                         ');
  MyWriteLN('     Invoke-WebRequest -URI $URL -Headers $headers -Method Post -Body $fnXML -ContentType ''text/xml;charset="utf-8"'' -Credential $credentials -UseBasicParsing');
  MyWriteLN('    }                                                                                        ');
  MyWriteLN('    catch                                                                                    ');
  MyWriteLN('    {                                                                                        ');
  MyWriteLN('      $GlobError = $error[0]                                                                 ');
  MyWriteLN('      $null                                                                                  ');
  MyWriteLN('    }                                                                                        ');
  MyWriteLN('}                                                                                            ');
  MyWriteLN('Function GetResponse()                                                                       ');
  MyWriteLN('{                                                                                            ');
  MyWriteLN(' $template = @''                                                                              ');
  MyWriteLN('<soapenv:Envelope                                                                            ');
  MyWriteLN('                    xmlns:dt="http://api.vetrf.ru/schema/cdm/dictionary/v2"                  ');
  MyWriteLN('                    xmlns:bs="http://api.vetrf.ru/schema/cdm/base"                           ');
  MyWriteLN('                    xmlns:merc="http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2"  ');
  MyWriteLN('                    xmlns:apldef="http://api.vetrf.ru/schema/cdm/application/ws-definitions" ');
  MyWriteLN('                    xmlns:apl="http://api.vetrf.ru/schema/cdm/application"                   ');
  MyWriteLN('                    xmlns:vd="http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2"        ');
  MyWriteLN('                    xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">               ');
  MyWriteLN('                <soapenv:Header/>                                                            ');
  MyWriteLN('                <soapenv:Body>                                                               ');
  MyWriteLN('                    <apldef:submitApplicationRequest>                                        ');
  MyWriteLN('                      <apldef:apiKey>{0}</apldef:apiKey>                                     ');
  MyWriteLN('                        <apl:application>                                                    ');
  MyWriteLN('                            <apl:serviceId>{1}</apl:serviceId>                               ');
  MyWriteLN('                            <apl:issuerId>{2}</apl:issuerId>                                 ');
  MyWriteLN('                            <apl:issueDate>2019-12-12T09:00:00+03:00</apl:issueDate>         ');
  MyWriteLN('                            <apl:data>                                                       ');
  MyWriteLN('                                <merc:getStockEntryListRequest>                              ');
  MyWriteLN('                                    <merc:localTransactionId>a10f03</merc:localTransactionId>');
  MyWriteLN('                                    <merc:initiator>                                         ');
  MyWriteLN('                                        <vd:login>{3}</vd:login>                             ');
  MyWriteLN('                                        </merc:initiator>                                    ');
  MyWriteLN('                                        <dt:enterpriseGuid>{4}</dt:enterpriseGuid>           ');
  MyWriteLN('                                        <merc:searchPattern>                                 ');
  MyWriteLN('                                    <vd:blankFilter>NOT_BLANK</vd:blankFilter>               ');
  MyWriteLN('                                    </merc:searchPattern>                                    ');
  MyWriteLN('                                </merc:getStockEntryListRequest>                             ');
  MyWriteLN('                            </apl:data>                                                      ');
  MyWriteLN('                        </apl:application>                                                   ');
  MyWriteLN('                    </apldef:submitApplicationRequest>                                       ');
  MyWriteLN('                </soapenv:Body>                                                              ');
  MyWriteLN('</soapenv:Envelope>                                                                          ');
  MyWriteLN('''@                                                                                           ');
  MyWriteLN('                                                                                             ');
  MyWriteLN('#            webRequest.Credentials = credentials;                                           ');
  MyWriteLN('                                                                                             ');
  MyWriteLN('$fnc_RqstBody = $template -f $circuitapiKey, $circuitserviceID, $circuitissureId, $circuitsysLogin, $circuitenterpriseGuid                                    ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('[xml] $XmlPrepare = $fnc_RqstBody                                                 ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('$response = GetDataFromWeb -fnXML $XmlPrepare -URL $circuitendpointUrl            ');
  MyWriteLN('                                                                                  ');
  MyWriteLN('    If ( ($response.StatusCode -eq 200) -and ($response -ne $null))               ');
  MyWriteLN('    {                                                                             ');
  MyWriteLN('     [xml] $XmlResponse = $response.content                                       ');
  MyWriteLN('     #write-host $response.content                                                ');
  MyWriteLN('     $XmlResponse.GetElementsByTagName(''applicationId'').Item(0).FirstChild.data   ');
  MyWriteLN('    }                                                                             ');
  MyWriteLN('    else                                                                          ');
  MyWriteLN('    {                                                                             ');
  MyWriteLN('     $null                                                                                   ');
  MyWriteLN('    }                                                                                        ');
  MyWriteLN('}                                                                                            ');
  MyWriteLN('                                                                                             ');
  MyWriteLN('Function RecieveApplRqst([string]$requestAplId)                                              ');
  MyWriteLN('{                                                                                            ');
  MyWriteLN('$template=@''                                                                                 ');
  MyWriteLN('<SOAP-ENV:Envelope                                                                           ');
  MyWriteLN('                    xmlns:dt="http://api.vetrf.ru/schema/cdm/dictionary/v2"                  ');
  MyWriteLN('                    xmlns:bs="http://api.vetrf.ru/schema/cdm/base"                           ');
  MyWriteLN('                    xmlns:merc="http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2"  ');
  MyWriteLN('                    xmlns:apldef="http://api.vetrf.ru/schema/cdm/application/ws-definitions" ');
  MyWriteLN('                    xmlns:apl="http://api.vetrf.ru/schema/cdm/application"                   ');
  MyWriteLN('                    xmlns:vd="http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2"        ');
  MyWriteLN('                    xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"               ');
  MyWriteLN('                    xmlns:ws="http://api.vetrf.ru/schema/cdm/application/ws-definitions">    ');
  MyWriteLN('                <SOAP-ENV:Header/>                                                           ');
  MyWriteLN('                <SOAP-ENV:Body>                                                              ');
  MyWriteLN('                    <ws:receiveApplicationResultRequest>                                     ');
  MyWriteLN('                        <ws:apiKey>{0}</ws:apiKey>                                           ');
  MyWriteLN('                        <ws:issuerId>{1}</ws:issuerId>                                       ');
  MyWriteLN('                        <ws:applicationId>{2}</ws:applicationId>                             ');
  MyWriteLN('                    </ws:receiveApplicationResultRequest>                                    ');
  MyWriteLN('                </SOAP-ENV:Body>                                                             ');
  MyWriteLN('</SOAP-ENV:Envelope>                                                                         ');
  MyWriteLN('''@                                                                                           ');
  MyWriteLN('#            webRequest.Credentials = credentials;                                           ');
  MyWriteLN('                                                                                             ');
  MyWriteLN('$fnc_RqstBody = $template -f $circuitapiKey, $circuitissureId, $requestAplId                 ');
  MyWriteLN('  $isContinue = $true                                                                        ');
  MyWriteLN('  $CountTRy = 0                                                                              ');
  MyWriteLN('[xml] $XmlPrepare = $fnc_RqstBody                                                            ');
  MyWriteLN('[xml] $result = $null                                                                        ');
  MyWriteLN('                                                                                             ');
  MyWriteLN('                                                                                             ');
  MyWriteLN('  while ($isContinue -eq $true)                                                              ');
  MyWriteLN('  {                                                                                          ');
  MyWriteLN('    Wait-Event -Timeout $circuitPause                                                        ');
  MyWriteLN('   $CountTRy = $CountTRy + 1                                                                 ');
  MyWriteLN('   $response = GetDataFromWeb -fnXML $XmlPrepare -URL $circuitendpointUrl                    ');
  MyWriteLN('   [string] $currentStatus = ""                                                              ');
  MyWriteLN('    If ( ($response.StatusCode -eq 200) -and ($response -ne $null))                          ');
  MyWriteLN('    {                                                                                        ');
  MyWriteLN('     [xml] $XmlResponse = $response.content                                                  ');
  MyWriteLN('     $currentStatus = $XmlResponse.GetElementsByTagName(''status'').Item(0).FirstChild.data    ');
  MyWriteLN('     if ($currentStatus -eq ''COMPLETED'')                                                     ');
  MyWriteLN('      {                                                                                      ');
  MyWriteLN('       $isContinue = $false                                                                  ');
  MyWriteLN('       $result = $XmlResponse                                                                ');
  MyWriteLN('       # write-host $response.content                                                        ');
  MyWriteLN('      }                                                                                      ');
  MyWriteLN('     if ($currentStatus -eq "")                                                               ');
  MyWriteLN('     {                                                                                        ');
  MyWriteLN('      $isContinue = $false                                                                  ');
  MyWriteLN('      $result  = $null                                                                        ');
  MyWriteLN('     }                                                                                        ');
  MyWriteLN('    }                                                                                        ');
  MyWriteLN('    else                                                                                     ');
  MyWriteLN('    {                                                                                        ');
  MyWriteLN('     $isContinue = $false                                                                  ');
  MyWriteLN('     $result  = $null                                                                                   ');
  MyWriteLN('    }                                                                                        ');
  MyWriteLN('    #write-host "try number $CountTRy of $circuitCountTry | Curent state: $currentStatus"    ');
  MyWriteLN('    write-host "Запрос стока. Прослушивание ответа API. Запрос $CountTRy из $circuitCountTry. Получен ответ: $currentStatus"  -ForegroundColor Green          ');
  MyWriteLN('Add-Content -Path $fileLog -Value $($(Get-Date).ToString("yyyy-MM-dd HH:mm:ss") + " Запрос стока. Прослушивание ответа API. Запрос $CountTRy из $circuitCountTry. Получен ответ: $currentStatus") -Encoding Oem');
  MyWriteLN('    if ($circuitCountTry -lt $CountTRy )                                                               ');
  MyWriteLN('     {                                                                                                 ');
  MyWriteLN('      $isContinue = $false                                                                             ');
  MyWriteLN('     }                                                                                                 ');
  MyWriteLN('  }                                                                                                    ');
  MyWriteLN(' $result                                                                                               ');
  MyWriteLN('}                                                                                                      ');
  MyWriteLN('[xml]$stockEntryElementList = $null                                                                    ');

  MyWriteLN(' write-host "Запрос стока. Отправка запроса"  -ForegroundColor Green                                   ');
  MyWriteLN('    Add-Content -Path $fileLog -Value $($(Get-Date).ToString("yyyy-MM-dd HH:mm:ss") + " Запрос стока. Отправка запроса") -Encoding Oem');
  MyWriteLN('$requestAplId = GetResponse                                                                            ');
  MyWriteLN('if ($GlobError -eq '''')                                                                                 ');
  MyWriteLN('{                                                                                                      ');
  MyWriteLN(' write-host "Запрос стока. Прослушивание ответа API"  -ForegroundColor Green                           ');
  MyWriteLN('    Add-Content -Path $fileLog -Value $($(Get-Date).ToString("yyyy-MM-dd HH:mm:ss") + " Запрос стока. Прослушивание ответа API") -Encoding Oem');
  MyWriteLN(' $stockEntryElementList = RecieveApplRqst($requestAplId)                                               ');
  MyWriteLN('                                                                                                       ');
  MyWriteLN('}                                                                                                      ');
  MyWriteLN('else                                                                                                   ');
  MyWriteLN('{                                                                                                      ');
  MyWriteLN(' $GlobError                                                                                            ');
  MyWriteLN('}                                                                                                      ');
  MyWriteLN('                                                                                                       ');
  MyWriteLN('if ($stockEntryElementList -ne $null)                                                                  ');
  MyWriteLN('{                                                                                                      ');
  MyWriteLN('[System.Collections.ArrayList] $FinalReport = @();                                                     ');
  MyWriteLN('    #$stockEntryElementList.save("C:\Users\lapus\OneDrive\Desktop\_WORK\stockEntryElementList.xml")    ');
  MyWriteLN('                                                                                                       ');
  MyWriteLN('    #$stockEntryElementList.GetElementsByTagName(''application'')                                        ');
  MyWriteLN('    #$stockEntryElementList.GetElementsByTagName(''result'')                                             ');
  MyWriteLN('   write-host "Запрос стока. Разбор XML ответа"  -ForegroundColor Green                                ');
  MyWriteLN('    Add-Content -Path $fileLog -Value $($(Get-Date).ToString("yyyy-MM-dd HH:mm:ss") + " Запрос стока. Разбор XML ответа") -Encoding Oem');
  MyWriteLN('                                                                                                       ');
  MyWriteLN('#    $ns = new-object Xml.XmlNamespaceManager $stockEntryElementList.NameTable                         ');
  MyWriteLN('#    $ns.AddNamespace("soap", $stockEntryElementList.DocumentElement.NamespaceURI)                     ');
  MyWriteLN('#    $ns.AddNamespace("vd", $stockEntryElementList.DocumentElement.NamespaceURI)                       ');
  MyWriteLN('#    $ns.AddNamespace("ns1", $stockEntryElementList.DocumentElement.NamespaceURI)                      ');
  MyWriteLN('#    $ns.AddNamespace("dt", $stockEntryElementList.DocumentElement.NamespaceURI)                       ');
  MyWriteLN('#    $ns.AddNamespace("bs", $stockEntryElementList.DocumentElement.NamespaceURI)                       ');
  MyWriteLN('#    $stockEntryElementList.SelectNodes("//soap:Envelope/soap:Body", $ns)                              ');
  MyWriteLN('#    $stockEntryElementList.SelectNodes("//soap:Envelope/soap:Body/ns1:getStockEntryListResponse", $ns)');
  MyWriteLN('                                                                                                       ');
  MyWriteLN('                                                                                                       ');
  MyWriteLN('    # пошлда спецификация                                                                              ');
  MyWriteLN('    foreach($stockEntry in $stockEntryElementList.Envelope.Body.receiveApplicationResultResponse.application.result.getStockEntryListResponse.stockEntryList.stockEntry)');
  MyWriteLN('    {                                                                                                                                                                   ');
  MyWriteLN('    $item = New-Object PSObject                                                                                                                                         ');
  MyWriteLN('    # для вставки в основную таблицу                                                                                                                                    ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_APPLICATIONID+'" -Value $stockEntryElementList.Envelope.Body.receiveApplicationResultResponse.application.applicationId.ToString() #APPLICATIONID');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_REQUESTSTATUS+'" -Value $stockEntryElementList.Envelope.Body.receiveApplicationResultResponse.application.status.ToString()        #REQUESTSTATUS');
  MyWriteLN('                                                                                                                                                                       ');
  MyWriteLN('    #$stockEntry                                                                                                                                                       ');
  MyWriteLN('    #$stockEntry.batch                                                                                                                                                 ');
  MyWriteLN('    #$stockEntry.batch.product                                                                                                                                         ');
  MyWriteLN('                                                                                                                                                                       ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_GUID+'" -value $stockEntry.Guid                    #                                          ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_ENTRYNUMBER+'" -value $stockEntry.EntryNumber             # Номер записи складского журнала         ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_NAME+'" -value $stockEntry.Batch.ProductItem.Name  # Наименование продукции                           ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_VOLUME+'" -value $stockEntry.Batch.Volume            # Объём в КГ                                                   ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_STATUS+'" -value $stockEntry.Status                  # Статус версии записи журнала               ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_CREATEDATE+'" -value $stockEntry.CreateDate              # Дата создания записи журнала               ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_UPDATEDATE+'" -value $stockEntry.UpdateDate              # Дата изменения записи журнала             ');
  MyWriteLN('                                                                                                                                                                       ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PRODUCTTYPE+'" -value $stockEntry.Batch.ProductType          #Тип продукции                                           ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PRODUCTGUID+'" -value $stockEntry.Batch.Product.Guid         # GUID продукции                                        ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_SUBPRODUCTGUID+'" -value $stockEntry.Batch.SubProduct.Guid      # GUID вида продукции                              ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_GLOBALID+'" -value $stockEntry.Batch.ProductItem.GlobalID      # GTIN                                                       ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_BATCHID+'" -value $stockEntry.Batch.BatchID             # BatchNumber                                               ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_country_guid  + '" -value $stockEntry.batch.origin.country.guid                                                     ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_producer_guid + '" -value $stockEntry.batch.origin.producer.enterprise.guid                                         ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_producer_role + '" -value $stockEntry.batch.origin.producer.role                                                    ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_lowGradeCargo+ '" -value $stockEntry.batch.lowGradeCargo.ToString()                                                 ');





  MyWriteLN('    $DataProizv = Get-Date -Year $stockEntry.Batch.DateOfProduction.FirstDate.year -Month $stockEntry.Batch.DateOfProduction.FirstDate.month -Day $stockEntry.Batch.DateOfProduction.FirstDate.day -Hour 0 -Minute 0 -Second 0');
  MyWriteLN('                                                                                                                                       ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_DATEOFPRODUCTION+'" -value $($DataProizv.tostring("dd.MM.yyyy")) # Дата производства   ');
  MyWriteLN('#    $item | Add-Member -type NoteProperty -Name '' -value $stockEntry.Batch.DateOfProduction.FirstDate.month                          ');
  MyWriteLN('#    $item | Add-Member -type NoteProperty -Name '' -value $stockEntry.Batch.DateOfProduction.FirstDate.day                            ');
  MyWriteLN('    $SrokGodn = Get-Date -Year $stockEntry.Batch.ExpiryDate.FirstDate.year -month $stockEntry.Batch.ExpiryDate.FirstDate.month -Day $stockEntry.Batch.ExpiryDate.FirstDate.day -Hour 0 -Minute 0 -Second 0');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_EXPIRYDATE+'" -value $($SrokGodn.tostring("dd.MM.yyyy"))              # "Срок годности"');
  MyWriteLN('#    $item | Add-Member -type NoteProperty -Name '' -value $stockEntry.Batch.ExpiryDate.FirstDate.month                                   ');
  MyWriteLN('#    $item | Add-Member -type NoteProperty -Name '' -value $stockEntry.Batch.ExpiryDate.FirstDate.day                                     ');
  MyWriteLN('    #$stockEntry.Batch.Perishable                                                                                                         ');
  MyWriteLN('    if ($stockEntry.Batch.Perishable -eq $true ) #"true" ? "Скоропортящаяся" : "Не скоропортящаяся";                                      ');
  MyWriteLN('    {                                                                                                                                     ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PERISHABLE+'" -value   "Скоропортящаяся"                                                    ');
  MyWriteLN('    }                                                                                                                                     ');
  MyWriteLN('    else                                                                                                                                  ');
  MyWriteLN('    {                                                                                                                                     ');
  MyWriteLN('    $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PERISHABLE+'" -value  "Не скоропортящаяся"                                                  ');
  MyWriteLN('    }                                                                                                                                     ');
  MyWriteLN('                                                                                                                                          ');
  MyWriteLN('     foreach ($Package in  $stockEntry.Batch.PackageList.Package)                                                                         ');
  MyWriteLN('     {                                                                                                                                    ');
  MyWriteLN('        Switch ($Package.level) {                                                                                                          ');
  MyWriteLN('        2 {                                                                                                                                ');
  MyWriteLN('          $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_QUANTITY2+'" -value $Package.Quantity # "Количество штук"                      ');
  MyWriteLN('          $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_LEVEL2+'" -value $Package.Level    # "Уровень упаковки(2)"              ');
  MyWriteLN('          $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PACKINGTYPEID_2+'" -value $Package.PackingType.GlobalID # "Идентификатор упаковки"');
  MyWriteLN('           foreach ($ProductMarks in $Package.ProductMarks)                                                                                   ');
  MyWriteLN('           {                                                                                                                                  ');
  MyWriteLN('             #$ProductMarks                                                                                                                   ');
  MyWriteLN('             if ($ProductMarks.Class -eq "EAN13")                                                                                             ');
  MyWriteLN('              {                                                                                                                               ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PRODUCTMARKSEAN_2+'" -value $ProductMarks.''#text'' #"EAN13"] = pm.Text                           ');
  MyWriteLN('              }                                                                                                                               ');
  MyWriteLN('           }                                                                                                                                  ');
  MyWriteLN('         }                                                                                                                                    ');
  MyWriteLN('        4 {                                                                                                                                    ');
  MyWriteLN('                                                                                                                                              ');
  MyWriteLN('          $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_QUANTITY4+'" -value $Package.Quantity # "Количество коробок"                    ');
  MyWriteLN('          $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_LEVEL4+'" -value $Package.Level    # "Уровень упаковки(4)"                  ');
  MyWriteLN('          $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PACKINGTYPEID_4+'" -value $Package.PackingType.GlobalID # "Идентификатор упаковки по классификатору ЕК 013 - 2010(ред.1)"');
  MyWriteLN('           foreach ($ProductMarks in $Package.ProductMarks)                                                                               ');
  MyWriteLN('           {                                                                                                                              ');
  MyWriteLN('             #$ProductMarks                                                                                                               ');
  MyWriteLN('             if ($ProductMarks.Class -eq "EAN13")                                                                                         ');
  MyWriteLN('              {                                                                                                                           ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PRODUCTMARKSEAN_4+'" -value $ProductMarks.''#text'' #"EAN13(4)"                            ');
  MyWriteLN('              }                                                                                                                           ');
  MyWriteLN('             if ($ProductMarks.Class -eq "EAN128")                                                                                        ');
  MyWriteLN('              {                                                                                                                           ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PRODUCTMARKS_4+'" -value $ProductMarks.''#text'' #"EAN128(4)"                          ');
  MyWriteLN('              }                                                                                                                           ');
  MyWriteLN('           }                                                                                                                              ');
  MyWriteLN('         }                                                                                                                                ');
  MyWriteLN('        Default {                                                                                                                         ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_QUANTITY2+'" -value " " # "Количество штук"                      ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_LEVEL2+'" -value " "    # "Уровень упаковки(2)"              ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PACKINGTYPEID_2+'" -value " " # "Идентификатор упаковки"');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PRODUCTMARKSEAN_2+'" -value " " #"EAN13"] = pm.Text                           ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_QUANTITY4+'" -value " " # "Количество коробок"                    ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_LEVEL4+'" -value " "    # "Уровень упаковки(4)"                  ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PACKINGTYPEID_4+'" -value " " # "Идентификатор упаковки по классификатору ЕК 013 - 2010(ред.1)"');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PRODUCTMARKSEAN_4+'" -value " " #"EAN13(4)"                                                        ');
  MyWriteLN('               $item | Add-Member -type NoteProperty -Name "'+coPS1_stock_PRODUCTMARKS_4+'" -value " " #"EAN128(4)"                                                      ');
  MyWriteLN('                }                                                                                                                                                     ');
  MyWriteLN('      }                                                                                                                                                               ');
  MyWriteLN('      }                                                                                                                                                               ');
  MyWriteLN('    write-host $stockEntry.Batch.ProductItem.Name -ForegroundColor Cyan                                                                                               ');
  MyWriteLN('    Add-Content -Path $fileLog -Value $($(Get-Date).ToString("yyyy-MM-dd HH:mm:ss") + " "+ $stockEntry.Batch.ProductItem.Name) -Encoding Oem');
  MyWriteLN('    $FinalReport +=,$item                                                                                                                                             ');
  MyWriteLN('  }                                                                                                                                                                   ');
  MyWriteLN('                                                                                                                                                                      ');
  MyWriteLN(' write-host "Запрос стока. Выгрузка в EXCEL" -ForegroundColor Green                                                                                                   ');
  MyWriteLN(' $ReportPath = $ReportPath             ');
  MyWriteLN(' #$FinalReport | Export-Excel -Path $ReportPath -AutoSize -WorksheetName "'+_Parameter+'"                                 ');
  MyWriteLN('                                                                                                                                      ');
  MyWriteLN(' [int]$npp = 1                                                                       ');
  MyWriteLN(' write-host "Запрос стока. Запись в буферную таблицу" -ForegroundColor Green         ');
  MyWriteLN('[string]$sqlQuery = "" ');
  MyWriteLN(' foreach($item in $FinalReport)                                                      ');
  MyWriteLN('  {                                                                                  ');
  MyWriteLN('   if([math]::Truncate($npp/7) -eq $npp/7) ');
  MyWriteLN('    {                                       ');
  MyWriteLN('     write-host "Запись запроса " $npp.tostring() " из " $FinalReport.Count.toString()  -ForegroundColor Cyan       ');
  MyWriteLN('     Add-Content -Path $fileLog -Value $($(Get-Date).ToString("yyyy-MM-dd HH:mm:ss") + " Запись в буферную таблицу" +$npp.tostring() +" из " +$FinalReport.Count.toString()) -Encoding Oem');
  MyWriteLN('    }                                       ');
  MyWriteLN('   if([math]::Truncate($npp/23) -eq $npp/23) ');
  MyWriteLN('    {                                       ');
  MyWriteLN('     write-host "Запись в буферную таблицу полученных результатов" -ForegroundColor Cyan       ');
  MyWriteLN('     $res = Invoke-DatabaseQuery -connectionString $conStrinGal -query $sqlQuery -isSQLServer ');
  MyWriteLN('     $sqlQuery = "" ');
  MyWriteLN('    }                                       ');

  MyWriteLN('   foreach( $property in $item.psobject.properties.name )                            ');
  MyWriteLN('    {                                                                                ');
  MyWriteLN('      if ($item.$property -eq $null)                                                 ');
  MyWriteLN('        {                                                                            ');
  MyWriteLN('         $itemproperty = ""                                                          ');
  MyWriteLN('        }                                                                            ');
  MyWriteLN('        else                                                                         ');
  MyWriteLN('         {                                                                           ');
  MyWriteLN('          $itemproperty = $item.$property                                            ');
  MyWriteLN('         }                                                                           ');
  MyWriteLN('      $sqlQuery =  $sqlQuery + ''Insert t$ATL_RQSTAPIVALUES (f$RQST_GUID, f$RSQT_PROVIDER, f$NROW, f$COLUMNNAME, f$VALUE)    ');
  MyWriteLN('                   values (''''''+$RQST_GUID+'''''',''''''+$circuitserviceID+'''''',''+$npp.tostring()+'',''''''+$property.Replace("''","''''")+'''''',''''''+$itemproperty.Replace("''","''''")+'''''') ');
  MyWriteLN('            ''                                                                                    ');
  MyWriteLN('    }                                                                                          ');
  MyWriteLN('    $npp = $npp + 1                                                                            ');
  MyWriteLN('  }                                                                                            ');
  MyWriteLN('   write-host "Запись в буферную таблицу полученных результатов" -ForegroundColor Cyan       ');
  MyWriteLN('    $res = Invoke-DatabaseQuery -connectionString $conStrinGal -query $sqlQuery -isSQLServer ');
  MyWriteLN('    $sqlQuery = ""                                                                            ');

  MyWriteLN(' Add-Content -Path $fileLog -Value $($(Get-Date).ToString("yyyy-MM-dd HH:mm:ss") + " Запись в буферную таблицу" +$($npp-1).tostring() +" из " +$FinalReport.Count.toString()) -Encoding Oem');
  MyWriteLN('}                                                                                                                                      ');


}
Function GetRequestToAPIVetis_GetStockList : boolean;
{
  #BodyProcedureGetRqst(GetStockList,_emptyValue)

}
