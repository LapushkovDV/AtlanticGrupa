//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика - склад
// Объект для модификации сальдовых остатков из ордеров
//******************************************************************************

#include ModifSal.vih
#include ValFuncV2.vih
#include TekRun.vih
#include MtrCount.vih

#define __ModifSal_vip__

//******************************************************************************
#doc
Объект для модификации сальдовых остатков из ордеров
#end

Interface ModifSalV1;

//******************************************************************************

#include tekrun.var
#include ValFunc.var

//******************************************************************************

Create view MS
var
//------------------------------------------------------------------------------
  useOldSaldo
, multyVal
                :  boolean;
//------------------------------------------------------------------------------
  presision
, SpOrderPriceN
, vPriceN
                : double;
//------------------------------------------------------------------------------
  order_SP
                : word;
//------------------------------------------------------------------------------
  order_MC
, order_Podr
, order_MOL
, order_Party
                : comp;
//------------------------------------------------------------------------------
From
  SaldoMC
, SaldoMC SaldoMC2
, CursVal
, SpOrder(readOnly)
;
//******************************************************************************


//******************************************************************************

Function GetEqualSaldoMC2(
                           SP_     : word;
                           cMC_    : comp;
                           cPodr_  : comp;
                           cMOL_   : comp;
                           cParty_ : comp;
                           Date_   : date
                         ): word;
{
  GetEqualSaldoMC2 :=
    MS.GetFirst FastFirstRow SaldoMC2 where
      ((
         SP_     == SaldoMC2.SP     AND
         cMC_    == SaldoMC2.cMC    AND
         cPodr_  == SaldoMC2.cPodr  AND
         cMOL_   == SaldoMC2.cMOL   AND
         cParty_ == SaldoMC2.cParty AND
         Date_   == SaldoMC2.dSaldo
      ));
}

//******************************************************************************

Function GetLastLessOrEqualSaldoMC(
                                    SP_      : word;
                                    cMC_     : comp;
                                    cPodr_   : comp;
                                    cMOL_    : comp;
                                    cParty_  : comp;
                                    Date_    : date
                                  ): word;
{
  GetLastLessOrEqualSaldoMC :=
    MS.GetLast SaldoMC where
      ((
         SP_     == SaldoMC.SP      AND
         cMC_    == SaldoMC.cMC     AND
         cPodr_  == SaldoMC.cPodr   AND
         cMOL_   == SaldoMC.cMOL    AND
         cParty_ == SaldoMC.cParty  AND
         Date_  >>= SaldoMC.dSaldo
      ));
}

//******************************************************************************

Procedure FillNewSaldoMC(
                          SP_       : word;
                          cMC_      : comp;
                          cPodr_    : comp;
                          cMOL_     : comp;
                          cParty_   : comp;
                          cVal_     : comp;
                          Date_     : Date
                        );
{
  MS.SaldoMC.SP       := SP_;
  MS.SaldoMC.cMC      := cMC_;
  MS.SaldoMC.cPodr    := cPodr_
  MS.SaldoMC.cMOL     := cMOL_
  MS.SaldoMC.cParty   := cParty_
  MS.SaldoMC.dSaldo   := Date_
  MS.SaldoMC.kol      := 0;
  MS.SaldoMC.srPrice  := 0;
  MS.SaldoMC.vPrice   := 0;
  MS.SaldoMC.cVal     := cVal_;
  MS.SaldoMC.priceN   := 0;

  MS.SaldoMC.kolP     := 0;
  MS.SaldoMC.kolR     := 0;
  MS.SaldoMC.srP      := 0;
  MS.SaldoMC.srR      := 0;
  MS.SaldoMC.srPV     := 0;
  MS.SaldoMC.srRV     := 0;

  MS.SaldoMC.opers    := 0;
  MS.SaldoMC.NRec     := 0;
}

//******************************************************************************

Procedure FillNewSaldoMC2(
                           SP_      : word;
                           cMC_     : comp;
                           cPodr_   : comp;
                           cMOL_    : comp;
                           cParty_  : comp;
                           cVal_    : comp;
                           Date_    : date
                         );
{
  MS.SaldoMC2.SP        := SP_;
  MS.SaldoMC2.cMC       := cMC_;
  MS.SaldoMC2.cPodr     := cPodr_;
  MS.SaldoMC2.cMOL      := cMOL_
  MS.SaldoMC2.cParty    := cParty_;
  MS.SaldoMC2.dSaldo    := Date_
  MS.SaldoMC2.kol       := 0;
  MS.SaldoMC2.srPrice   := 0;
  MS.SaldoMC2.vPrice    := 0;
  MS.SaldoMC2.cVal      := cVal_;
  MS.SaldoMC2.priceN    := 0;

  MS.SaldoMC2.kolP      := 0;
  MS.SaldoMC2.kolR      := 0;
  MS.SaldoMC2.srP       := 0;
  MS.SaldoMC2.srR       := 0;
  MS.SaldoMC2.srPV      := 0;
  MS.SaldoMC2.srRV      := 0;

  MS.SaldoMC2.opers     := 0;
  MS.SaldoMC2.NRec      := 0;
}

//******************************************************************************

Function if_01(d_: double): double;
{
  if MS.presision = 0
    MS.presision := 0.0001;

  if_01 := if(ABS(d_) < MS.presision, 1, d_);
}

//******************************************************************************

function bofPereocen(v: word; t: word): boolean;
{
  bofPereocen := (v = 0)
                AND
                 (t >= 4) AND (t <= 7);
}

//******************************************************************************

function bofPereocenOrOst(v: word; t: word): boolean;
{
  bofPereocenOrOst := (v = 0)
                     AND
                      (
                       (t = 15)
                        OR
                       (t >= 4) AND (t <= 7)
                      )
}

//******************************************************************************

Function CountSrPriceN(
                        kolSal_    : double;
                        priceSal_  : double;
                        kolOrd_    : double;
                        priceOrd_  : double;
                        v          : word;
                        t          : word
                      ): double;
{
  var d: double;  d := if(bofPereocen(v, t), if_01(kolOrd_), kolOrd_ );      //для переоценки = 1

  CountSrPriceN := ( priceSal_ * if_01(kolSal_) + priceOrd_ * d ) / if_01(kolSal_ + kolOrd_);
}

//******************************************************************************

Function CntSrAdd(
                   kol1_    : double;
                   price1_  : double;
                   kol2_    : double;
                   price2_  : double;
                   v        : word;
                   t        : word
                 ): double;
{
  var d: double;
  d := if(bofPereocenOrOst(v, t), if_01(kol2_), kol2_);       //для переоценки = 1

  CntSrAdd := ( price1_ * if_01(kol1_) + price2_ * d ) / if_01(kol1_ + kol2_);
}

//******************************************************************************

Procedure CountSaldoMC(
                        kol_          : double;
                        price_        : double;
                        vPrice_       : double;
                        priceN_       : double;
                        cVal_         : comp;
                        Date_         : date;
                        prev_dSaldo_  : date;
                        wVidOrder     : word;
                        wTipOrd       : word;
                        wSP           : word
                      );
{
  var oldcVal_, saveSaldoVal: comp;

  date_        := sub_day(date_, 1); //для перевода валют, уже было +1 раньше
  prev_dSaldo_ := if(MS.SaldoMC.dSaldo = Date_, prev_dSaldo_, MS.SaldoMC.dSaldo); //для перевода валют м.б. только = или >
  prev_dSaldo_ := sub_day(prev_dSaldo_, 1); //для перевода валют

  //------------------------------- валюта ----------------------------------
  if (cVal_ = 0) AND NOT(bofPereocen(wVidOrder, wTipOrd))
    {
      vPrice_ := 0    //обнуляем
      if (oValFunc.valBase <> 0)
        {
          vPrice_ := oValFunc.GetBaseCurrency(comp(0), price_, Date_);
          cVal_  := oValFunc.valBase;
        }
    }

  oldcVal_ := cVal_; //здесь! -сейчас не используется

  if (MS.SaldoMC.cVal = 0)
    {
      MS.SaldoMC.vPrice := 0;  MS.SaldoMC.SrPV := 0;  MS.SaldoMC.SrRV := 0; //обнуляем
      MS.SaldoMC.cVal := cVal_;
      if (oValFunc.valBase <> 0)
        {
          MS.SaldoMC.vPrice := oValFunc.GetBaseCurrency(comp(0), MS.SaldoMC.srPrice, prev_dSaldo_);
          MS.SaldoMC.srPV  := oValFunc.GetBaseCurrency(comp(0), MS.SaldoMC.srP, prev_dSaldo_);
          MS.SaldoMC.srRV  := oValFunc.GetBaseCurrency(comp(0), MS.SaldoMC.srR, prev_dSaldo_);
          MS.SaldoMC.cVal  := oValFunc.valBase;
        }
    }

  saveSaldoVal := MS.SaldoMC.cVal; //здесь! -сейчас не используется

  //если валюты разные, приводим к базовой валюте:
  if (cVal_ <> MS.SaldoMC.cVal)
  OR
     NOT MS.multyVal         //при простом учете - всегда
    if (oValFunc.valBase = 0)
      {
        vPrice_ := oValFunc.GetAnyCurrency(cVal_, vPrice_, Date_, MS.SaldoMC.cVal);
        cVal_   := MS.SaldoMC.cVal;
      }
    else
      {
        vPrice_ := oValFunc.GetBaseCurrency(cVal_, vPrice_, Date_);
        cVal_   := oValFunc.valBase;
        MS.SaldoMC.vPrice := oValFunc.GetBaseCurrency(MS.SaldoMC.cVal, MS.SaldoMC.vPrice, prev_dSaldo_);
        MS.SaldoMC.srPV  := oValFunc.GetBaseCurrency(MS.SaldoMC.cVal, MS.SaldoMC.srPV, prev_dSaldo_);
        MS.SaldoMC.srRV  := oValFunc.GetBaseCurrency(MS.SaldoMC.cVal, MS.SaldoMC.srRV, prev_dSaldo_);
        MS.SaldoMC.cVal  := oValFunc.valBase;
      }

  //вычисляем среднюю валютную:
  MS.SaldoMC.vPrice := CntSrAdd(MS.SaldoMC.kol,
                                MS.SaldoMC.vPrice,
                                if(wVidOrder = 0, kol_, -kol_),
                                vPrice_,
                                wVidOrder,
                                wTipOrd);

  if (MS.SaldoMC.cVal = 0)
    MS.SaldoMC.vPrice := 0;

  //---------------для приходов и расходов----------------------------------
  case wVidOrder of
  //----------------------
    0:
      {
        MS.SaldoMC.srP  := CntSrAdd(MS.SaldoMC.kolP, MS.SaldoMC.srP,  kol_, price_,  wVidOrder, wTipOrd);
        MS.SaldoMC.srPV := CntSrAdd(MS.SaldoMC.kolP, MS.SaldoMC.srPV, kol_, vPrice_, wVidOrder, wTipOrd);
        MS.SaldoMC.kolP := MS.SaldoMC.kolP  + kol_
      }
  //----------------------
    1:
      {
        MS.SaldoMC.srR  := CntSrAdd(MS.SaldoMC.kolR, MS.SaldoMC.srR,  kol_, price_,  wVidOrder, wTipOrd);
        MS.SaldoMC.srRV := CntSrAdd(MS.SaldoMC.kolR, MS.SaldoMC.srRV, kol_, vPrice_, wVidOrder, wTipOrd);
        MS.SaldoMC.kolR := MS.SaldoMC.kolR  + kol_
      }
  //----------------------
  end;//c

  //------------------------------ рубли -----------------------------
  MS.SaldoMC.srPrice := CntSrAdd(MS.SaldoMC.kol,
                                 MS.SaldoMC.srPrice,
                                 if(wVidOrder = 0, kol_, -kol_),
                                 price_,
                                 wVidOrder,
                                 wTipOrd
                                );

  //-- налоговая цена рубли ------------------------------------------
  if (wVidOrder = 1) OR (wTipOrd = 3)
    priceN_ := MS.SaldoMC.priceN;

  if ABS(MS.SaldoMC.kol) < MS.presision
    MS.SaldoMC.priceN := 0;

  MS.SaldoMC.priceN := CntSrAdd(MS.SaldoMC.kol,
                                MS.SaldoMC.priceN,
                                if(wVidOrder = 0, kol_, -kol_),
                                priceN_,
                                wVidOrder,
                                wTipOrd
                               );

  //------------------------------ кол-во -----------------------------
  MS.SaldoMC.kol := MS.SaldoMC.kol + if(wVidOrder = 0, kol_, -kol_);
  //-------------------------------------------------------------------
  if (ABS(MS.SaldoMC.kol) < MS.presision)
    MS.SaldoMC.priceN := priceN_;

  //-------------------------------------------------------------------
  //округляем для исключения знаков в младших разрядах double
  if (ABS(MS.SaldoMC.kol) < MS.presision)
    MS.SaldoMC.kol := 0;

  if (ABS(MS.SaldoMC.kolP) < MS.presision)
    MS.SaldoMC.kolP := 0;

  if (ABS(MS.SaldoMC.kolR) < MS.presision)
    MS.SaldoMC.kolR := 0;

  if (MS.SaldoMC.kol = 0)
    if (wGetTune('Round.Order') <> 0)  //округление в ордерах
       AND
         (
           (wSP <> 0)
           or
           ((wSP = 0) AND NOT boGetTune('Oper.Period'))
         )
      {
        if (ABS(MS.SaldoMC.srPrice) < doGetTune('Round.OrderRub'))
          MS.SaldoMC.srPrice := 0;

        if (ABS(MS.SaldoMC.vPrice) < doGetTune('Round.OrderVal'))
          MS.SaldoMC.vPrice := 0;
      }
}

//******************************************************************************

Procedure SetPrices_If_OldSaldo(minKol_: double);
{
  MS.SaldoMC.vPrice := if(MS.SaldoMC.cVal<>0, MS.SaldoMC.vPrice, 0);//подстрах.
  if (MS.SaldoMC.opers = 0) //старое сальдо
    {
      MS.SaldoMC.kolP := if( ABS(MS.SaldoMC.kol)<minKol_, 0, MS.SaldoMC.kol);
      MS.SaldoMC.kolR := if( ABS(MS.SaldoMC.kol)<minKol_, 0, MS.SaldoMC.kol);
      MS.SaldoMC.srP  := MS.SaldoMC.srPrice;
      MS.SaldoMC.srR  := MS.SaldoMC.srPrice;
      MS.SaldoMC.srPV := if(MS.SaldoMC.cVal<>0, MS.SaldoMC.vPrice, 0);
      MS.SaldoMC.srRV := if(MS.SaldoMC.cVal<>0, MS.SaldoMC.vPrice, 0);
    }
}

//******************************************************************************

Procedure UpdateSaldos(
                        SP_      : word;
                        cMC_     : comp;
                        cPodr_   : comp;
                        cMOL_    : comp;
                        cParty_  : comp;
                        kol_     : double;
                        price_   : double;
                        vPrice_  : double;
                        priceN_  : double;
                        cVal_    : comp;
                        Date_    : date;
                        minKol_  : double;
                        del_     : boolean;
                        wVidOrder: word;
                        wTipOrd  : word
                      );
var
  del_NRec: comp;
  need_DelSaldo: boolean;
  prev_dSaldo: Date;
{
  //находим сальдо, если нет то создаем
  MS.useOldSaldo := FALSE;
  prev_dSaldo := Date_; //потом вычтем 1

  if (GetLastLessOrEqualSaldoMC( SP_, cMC_, cPodr_, cMOL_, cParty_, Date_ ) <> tsOk)
    {
      FillNewSaldoMC( SP_, cMC_, cPodr_, cMOL_, cParty_, cVal_, Date_ );
      if MS.insert current SaldoMC <> tsOk
        {
          Message('Ошибка добавления записи в таблицу SaldoMC');
          Exit;
        }
    }
  else//сальдо найдено
    if (date_ = MS.SaldoMC.dSaldo)
      MS.useOldSaldo := (MS.SaldoMC.opers = 0);//сальдо за сегодня
    else                                       //найдено сальдо предыдущее, не за сегодня
      {
        prev_dSaldo := MS.SaldoMC.dSaldo; //потом вычтем 1

        SetPrices_If_OldSaldo(minKol_);   //перед opers
        MS.SaldoMC.dSaldo := Date_;
        MS.SaldoMC.opers := 0;
        MS.SaldoMC.NRec  := 0;
        if MS.insert current SaldoMC <> tsOk
          {
            Message('Ошибка добавления записи в таблицу SaldoMC(2)');
            Exit;
          }
      }

  //идем по сальдо вперед и модифицируем начиная с нашей даты
  del_NRec := 0;
  need_DelSaldo := FALSE;

  StartNewVisual(vtDownVisual, 0, 'Модификация сальдовых остатков', 1);
  MS._LOOP SaldoMC where
        ((
           SP_     == SaldoMC.SP      AND
           cMC_    == SaldoMC.cMC     AND
           cPodr_  == SaldoMC.cPodr   AND
           cMOL_   == SaldoMC.cMOL    AND
           cParty_ == SaldoMC.cParty  AND
           Date_  <<= SaldoMC.dSaldo
        ))
    {
      NextVisual;

      CountSaldoMC(kol_, price_, vPrice_, priceN_, cVal_, Date_, prev_dSaldo, wVidOrder, wTipOrd, SP_);

      if (date_ = MS.SaldoMC.dSaldo) AND (NOT MS.useOldSaldo)//не старое сальдо
        MS.SaldoMC.opers := MS.SaldoMC.opers +if(del_, -1, 1);

      SetPrices_If_OldSaldo(minKol_);
      if (MS.update current SaldoMC <> tsOk)
        {
          Message('Ошибка модификации записи в таблице SaldoMC');
          StopVisual('', 0);
          Exit;
        }

      //запомнить запись за сегодня
      if (date_ = MS.SaldoMC.dSaldo)
        if (del_NRec = 0)
          del_NRec := MS.SaldoMC.NRec;
        else
          Message('Ошибка в сальдовых остатках'#13'Необходимо сделать их пересчет c '+
                     DateToStr(sub_day(MS.SaldoMC.dSaldo, 1), 'DD/MM/YYYY'));

      //удалить запись за сегодня, если нет операций:
      if (MS.SaldoMC.opers = 0) AND
          (date_ = MS.SaldoMC.dSaldo) AND
           (NOT MS.useOldSaldo)//не старое сальдо
        need_DelSaldo := TRUE;

      //если была вставка перед старым сальдо, удаляем эту вставку(запись за сегодня):
      if (MS.SaldoMC.dSaldo > Date_) AND  //это следующее по датам сальдо
          (MS.SaldoMC.opers = 0)          //это обновляемое сальдо - старое сальдо
        {
          if (NOT MS.useOldSaldo) //если мы используем не старое сальдо - т.к старое нельзя удалять
            need_DelSaldo := TRUE;

          if (cPodr_ = 0) AND (cMOL_ = 0) AND (cParty_ = 0) //если идем по общим сальдо
          //добавляем пустую запись для сальдо по разрезу -
          //для последующей корректировки и удаления нового сальдо по разрезу перед этим "старым"
            if GetEqualSaldoMC2(MS.order_SP, MS.order_MC, MS.order_Podr, MS.order_MOL, MS.order_Party, MS.SaldoMC.dSaldo) <>tsOk
              {
                FillNewSaldoMC2(MS.order_SP, MS.order_MC, MS.order_Podr, MS.order_MOL, MS.order_Party, 0, MS.SaldoMC.dSaldo);

                if (MS.insert current SaldoMC2 <> tsOk)
                  {
                    Message('Ошибка добавления записи в таблицу SaldoMC(3)');
                    Exit;
                  }
              }
        }
    }//MS._LOOP SaldoMC

  if (need_DelSaldo) AND
      (del_NRec <> 0) AND
       (NOT MS.useOldSaldo) //не старое сальдо
    if (MS.delete novisual SaldoMC where (( del_NRec == SaldoMC.NRec)) <> tsOk)
      Message('Ошибка удаления записи в таблице SaldoMC');

  StopVisual('', 0);
}

//******************************************************************************

Function AddSaldoMC(
                     SP_       : word;
                     cMC_      : comp;
                     cPodr_    : comp;
                     cMOL_     : comp;
                     cParty_   : comp;
                     kol_      : double;
                     price_    : double;
                     vPrice_   : double;
                     cVal_     : comp;
                     priceN_   : double;
                     vPriceN   : double;
                     Date_     : date;
                     minKol_   : double;
                     del_      : boolean;
                     wVidOrder : word;
                     wTipOrd   : word
                   ): boolean;
{
  AddSaldoMC := FALSE;
  MS.presision := minKol_;

  MS.multyVal := boGetTune('Oper.MultiCurrReg');

  MS.order_SP := SP_;
  MS.order_MC := cMC_;
  MS.order_Podr := cPodr_;
  MS.order_MOL := cMOL_;
  MS.order_Party := cParty_;

  date_ := Add_Day(date_, 1);

  //-----обновляем сальдо по предприятию-------
  UpdateSaldos(SP_, cMC_, 0, 0, 0 /*cPodr_ cMOL_ cParty_*/,
               kol_, price_, vPrice_, priceN_, cVal_, Date_, minKol_, del_, wVidOrder, wTipOrd); //общее

  //-----обновляем сальдо по разрезу-------
  UpdateSaldos(SP_, cMC_, cPodr_, cMOL_, cParty_,
               kol_, price_, vPrice_, priceN_, cVal_, Date_, minKol_, del_, wVidOrder, wTipOrd);

  //-----для УКС---------------
  if not f_CommonFlagCheck('recalcsp')   // ifNdef recalcsp_vip
#ifndef __MTR_TO_SPEC__
    if boGetTune('Oper.Purpose')
#end
      RunInterface('VipMtrCount', word(coSpOrder), MS.SpOrder.NRec, MS.SpOrder.VidOrder, del_);

  MS.useOldSaldo := FALSE;//для подстраховки
  AddSaldoMC := TRUE;
}

//******************************************************************************

var cMCold, cPodrOld, cMOLold, cPartyOld: comp;
var kolOld: double;

//******************************************************************************

Procedure SaveOld;
{
  cMCold     := MS.SpOrder.cMC;
  cPodrOld   := MS.SpOrder.ccPodr;
  cMOLold    := MS.SpOrder.ccMOL;
  cPartyOld  := MS.SpOrder.cParty;
  kolOld     := if (MS.SpOrder.VidOrder = 0, MS.SpOrder.kol, -MS.SpOrder.kol);
}

//******************************************************************************

Function NewRazrez: boolean;
{
  NewRazrez := (cMCold    <>  MS.SpOrder.cMC)
              OR
               (cPodrOld  <>  MS.SpOrder.ccPodr)
              OR
               (cMOLold   <>  MS.SpOrder.ccMOL)
              OR
               (cPartyOld <>  MS.SpOrder.cParty)
}

//******************************************************************************

Function NewKol: boolean;
{
  NewKol := kolOld <> MS.SpOrder.kol;
}

//******************************************************************************

Function AddSaldoMC_Upd(
                         cSpOrder_  : comp;
                         del_       : boolean;
                         upd_       : boolean
                       ): boolean;
var
  delPereo: boolean;
  minKol: double;
{
  AddSaldoMC_Upd := FALSE;

  if (MS.GetFirst SpOrder where ((cSpOrder_ == SpOrder.NRec)) <> tsOk)
    Exit;

  minKol := doGetTune('Oper.MinKolMC');
  minKol := if(minKol = 0, 0.0001, minKol);//presision

  if (upd_) AND (del_)
    SaveOld;            //только перед update   current SpOrder

  delPereo := (del_)
             AND
              (MS.SpOrder.VidOrder = 0)
             AND
              (
                ((MS.SpOrder.TipOrd >= 4) AND (MS.SpOrder.TipOrd <= 7))
                  OR
                ((MS.SpOrder.TipOrd = 15) AND (ABS(MS.SpOrder.kol) < minKol))
              );

  AddSaldoMC_Upd :=
    AddSaldoMC(MS.SpOrder.SP,
               MS.SpOrder.cMC,
               MS.SpOrder.ccPodr,
               MS.SpOrder.ccMOL,
               MS.SpOrder.cParty,
               if (del_, -MS.SpOrder.kol, MS.SpOrder.kol),
               if (delPereo, -MS.SpOrder.srPrice, MS.SpOrder.srPrice),
               if (delPereo, -MS.SpOrder.vPrice, MS.SpOrder.vPrice), MS.SpOrder.cVal,
               if (delPereo, -MS.SpOrder.priceN, MS.SpOrder.priceN),
               if (delPereo, -MS.SpOrder.vPriceN, MS.SpOrder.vPriceN),
               MS.SpOrder.dOrd,
               minKol,
               del_,
               MS.SpOrder.VidOrder,
               MS.SpOrder.TipOrd
              );

  if f_CommonFlagCheck('recalcsp')   // если идет пересчет цен - не надо модифицировать остатки
    Exit;

  //модификация текущих:
  if (MS.SpOrder.SP <> 0) //далее только для складских ордеров
    Exit;

  if (not upd_) //при Ins или Del ордера
    {
      if MS.SpOrder.VidOrder = 1
        MS.SpOrder.kol := -MS.SpOrder.kol;

      fTekRun.ModifyAllTek(MS.SpOrder.cMC, MS.SpOrder.ccPodr, MS.SpOrder.ccMOL, MS.SpOrder.cParty,
                           if(del_, -MS.SpOrder.kol, MS.SpOrder.kol), 0);
      Exit;
    }

  if upd_ AND (not del_) //только после update   current SpOrder
    if NewRazrez //f
      {
        if (MS.SpOrder.VidOrder = 1)
          MS.SpOrder.kol := -MS.SpOrder.kol;//kolOld уже инверт.

        fTekRun.ModifyAllTek(cMCold, cPodrOld, cMOLold, cPartyOld, -kolOld, 0);
        fTekRun.ModifyAllTek(MS.SpOrder.cMC, MS.SpOrder.ccPodr, MS.SpOrder.ccMOL, MS.SpOrder.cParty, MS.SpOrder.kol, 0);
      }
    else //not NewRazrez
      if newKol //f
        {
          if (MS.SpOrder.VidOrder = 1)
            MS.SpOrder.kol := -MS.SpOrder.kol;

          fTekRun.ModifyAllTek(MS.SpOrder.cMC, MS.SpOrder.ccPodr, MS.SpOrder.ccMOL, MS.SpOrder.cParty, MS.SpOrder.kol - kolOld, 0);
        }
}

//******************************************************************************
//******************************************************************************

HandleEvent

//------------------------------------------------------------------------------

cmOnVipLoad:
  {

  }

//------------------------------------------------------------------------------

cmOnVipUnload:
  {

  }

//------------------------------------------------------------------------------

end;
End.

//******************************************************************************
