cmAdd                =     12101;
cmAllIns             =     12102;
cmAllNar             =     12103;
cmAllSum             =     12104;
cmAllUnIns           =     12105;
cmALTF9              =     12106;
cmAttach             =     12107;
cmBrNar              =     12108;
cmByKassir           =     12109;
cmByList             =     12110;
cmChWin              =     12111;
cmConnect            =     12112;
cmConnection         =     12113;
cmCtrlT              =     12114;
cmDELKEY             =     12115;
cmDetach             =     12116;
cmDisconnect         =     12117;
cmDoBound            =     12118;
cmDoKlndr            =     12119;
cmDotable            =     12120;
cmDoTable1           =     12121;
cmDoTable2           =     12122;
cmdotable3           =     2006;
cmdotable4           =     2008;
cmdotable5           =     2000;
cmdotable6           =     2001;
cmdotable7           =     2004;
cmdotable8           =     2021;
cmdotable9           =     2022;
cmdotable10          =     2023;
cmdotable11          =     2024;
cmdotable12          =     2019;
cmdotable13          =     12272;
cmdotable14          =     2016;
cmdotable15          =     2017;
cmdotable16          =     2003;
cmdotable17          =     2020;
cmdotable18          =     2007;
cmdotable19          =     2002;
cmdotable20          =     2010;
cmdotable21          =     2011;
cmdotable22          =     12281;
cmdotable23          =     2009;
cmdotable24          =     2012;
cmdotable25          =     2013;
cmdotable26          =     2018;
cmdotable27          =     2014;
cmdotable28          =     2015;
cmdotable29          =     12288;
cmEditForm           =     12123;
cmF2KEY              =     12124;
cmF3keY              =     12125;
cmF4KEY              =     12126;
cmF6KEY              =     12127;
cmF7KEY              =     12128;
cmF9KEY              =     12129;
cmFillAndPrint       =     12130;
cmINar               =     12131;
cmINSKEY             =     12132;
cmINSKEY2            =     12133;
cmLoadPickMy         =     12134;
cmL_tabn             =     12135;
cmMessage            =     12136;
cmOptions            =     12137;
cmOt                 =     12138;
cmPrintBaseGround    =     12139;
cmPrint              =     12140;
cmPrintBase          =     12141;
cmCtrlP              =     12142;
cmCtrlF2             =     12143;
cmCtrlF3             =     12144;
cmPrintKlndr         =     12145;
cmRas                =     12146;
cmSetDefaultPrinter  =     12147;
cmShiftf1            =     12148;
cmShiftf5            =     12149;
cmSHIFTF6            =     12150;
cmSHIFTF7            =     12151;
cmSHIFTF9            =     12152;
cmTuneUp             =     12153;
cmAltB               =     12154;
cmSavePick           =     12155;
cmSavePickMy         =     12156;
cmLoadPick           =     12157;
cmCtrlC              =     12158;
// cmMarkRec            =     12159;
cmBrigadeDutyImportExport= 12160;
cmBrigadeDutyDistribution= 12161;
scEufam2             =     12162;
scEufam3             =     12163;

cmBrigadeDutyImport  =     12164;
cmControlForm        =     12165;
cmFinalForm          =     12166;
cmBrigadeDutyCalc    =     12167;

cmRoutingControlForm =     12168;
cmRoutingCalc        =     12169;
cmRoutingFinalForm   =     12170;

cmFormAdvance        =     12171;

cmDutyAddPayments    =     12172;
cmWorkAddPayments    =     12173;
cmDutyInformation    =     12174;
cmPrintNalFOT        =     12175;
cmPrintVidOpl        =     12176;
cmKillDistributed    =     12177;
cmGroupingCard       =     12178;

cmShowNodesWithData  =     12179;
cmViewFixedAdditionalPayments = 12180;

cmPrintWorkingTable  =     12181;

cmViewAdvance         =    12182;

cmAlt1              =    12183;
cmAlt2              =    12184;
cmAlt3              =    12185;
cmAlt4              =    12186;
cmAlt5              =    12187;
cmAlt6              =    12188;
cmAlt7              =    12189;
cmAlt8              =    12190;
cmAlt9              =    12191;

cmTableChanged      =    12192;
cmFixedRetentions   =    12193;
cmProcessAddPayments=    12194;

cmAlt0              =    12195;

cmvalue21           =    12201;
cmvalue22           =    12202;
cmvalue23           =    12203;
cmvalue24           =    12204;
cmvalue25           =    12205;
cmvalue26           =    12206;
cmvalue27           =    12207;
cmvalue28           =    12208;
cmvalue29           =    12209;
cmvalue30           =    12210;
cmvalue31           =    12211;
cmvalue32           =    12212;
cmvalue33           =    12213;
cmvalue34           =    12214;
cmCurrentDepartmentChanged = 12215;
cmCurrentAccountsChanged   = 12216;
cmDuplicate         =    12217;
cmvalue35           =    12218;
cmvalue36           =    12219;
cmvalue37           =    12220;
cmSet_Hide =             12221;
cmRefresh           =    12222;

cmEnteringSalaryModule = 12223;
cmReceptionIsOpen   =    12225;
cmFormarksChanged   =    12226;
cmvalue38           =    12224;

cmvalue39           =    12227;
cmvalue40           =    12228;
cmvalue41           =    12229;
cmvalue42           =    12230;
cmvalue43           =    12231;
cmvalue44           =    12232;
cmvalue45           =    12233;
cmvalue46           =    12234;
cmvalue47           =    12235;
cmvalue48           =    12236;
cmvalue49           =    12237;
cmvalue50           =    12238;
cmvalue51           =    12239;
cmvalue52           =    12240;
cmvalue53           =    12241;
cmvalue54           =    12242;
cmvalue55           =    12243;
cmvalue56           =    12244;
cmvalue57           =    12245;
cmvalue58           =    12246;
cmvalue59           =    12247;
cmvalue60           =    12248;
cmvalue61           =    12249;
cmEnteringZarpModule    = 12252;
cmRplToArch             = 12253;
cmRplToCurr             = 12254;
cmRplToFut              = 12255;
cmReScanNes             = 12256;//попытка пересканирования CurLSchet
cmChngOrderState         = 12257;
cmCngAccounts         = 12258;
cmValue62            =    12259;
cmValue63            =    12260;
cmChRSV              =    12261;
cmValue64            =    12262;
cmValue65            =    12263;
cmValue66            =    12264;
cmValue67            =    12265;
cmValue68            =    12266;
cmMnPlanChng         =    12267;

_cLSchet             =     0;
cBoln                =     1;
_cOtpusk             =     2;
cVOtpusk             =     3;
cBrig                =     4;
cKlOtpusk            =     5;
cChildPos            =     6;
cChildPosOne         =     7; //единовременные пособия
cOneTimeBenefitViceVersaPeriod = 8; //единовременные пособия другого периода (отчетного, если будущий и наоборот (сделано так для совместимости обхода по пометкам))
cUvolMarks           =     333;
cAddPayments         =     557;
cPrVidOpl            =     900;
cPrVidOpl1           =     901;
cPrVidOpl2           =     902;
cPrVidOpl3           =     903;
cReestr              =     904;
cBasket              =     905;
cPlatved             =     906;
cReestrFss           =     907;
cRKO                 =     1000;
cViplat              =     1001;
cSysMBF              =     1003;
cPlatMeg             =     1004;
cBrigadeMember       =     1005;
cSysUder             =     1006;
cSysDog              =     1007;
cEmployeeOnDuty      =     1008;
cEmployeeToMove      =     1009;
cByWorker            =     1010;
cRates               =     1011;
cDogViplat           =     1012;
cLSchet1             =     1100;
cOtpArx              =     2002;
cDepartment          =     2003;
cOtpFuture           =     2004;
cMegFuture           =     2005;
cArchiveSickLists    =     2006;
cWorkingTable        =     2007;
cFixedAddPayment     =     2008;
cFixedRetention      =     2009;
cPerexodTable        =     2010;
cAccountChange       =     2011;
cAllCexNmb           =     2012;
cAllTabnNmb          =     2013;
cPlanOtpusk          =     2014;
cFactOtpusk          =     2015;
cDetPlanOtpusk       =     2016;
cKadrySickLists      =     3001;
cKadryDisNotes       =     3002;
cNumberOfSelectedLschetCache = 3003; // Константа идентифицирующая переменную, хранящую количество лицевых счетов в FORMARKS, помеченных по choice = _cLschet
cReportFss           =     3004;
cKadryDopInfo        =     3005;
cSZVStajDocs         =     3006;
cGroupReestr         =     3007;

cRetentionsArchiveNotes = 0; // константа для примечаний архива удержаний
cAssessmentsArchiveNotes = 26; // просто потому что сегодня 26 число и такой константы примечаний вроде как еще нету
cPersonalAccountNotes = 30; // потому что сегодня число 30-е и такой константы тоже вроде нету


// бригадный наряд
cBrigadeJobSheet          =     2017;
// индивидуальный наряд
cIndividualJobSheet       =     2018;
// индивидуальный наряд с учетом КТУ
cIndividualJobSheetVsMPF  =     2019;
// дневная зарплата с учетом КТУ
cDailyWagesVsMPF          =     2020;

cDelta = 32767; // после данного разделителя не нужно ничего занимать, так как относительно него будут формироваться разделителя для хранения

//------------------------------------------------------------------------------
// идентификаторы (NOTES.CHOICE) пользовательских фильтров по подразделениям
//------------------------------------------------------------------------------
// для фильтра по текущим подразделениям
cUserCurrentDepartments =  4000;
// для фильтра по подразделениям отнесения затрат
cUserCostsDepartments   =  4001;
// для пометок ЛС
cUserCurrentMarks       =  4002;
// для пометок налогов на ФОТ
cTaxFOTMarks            =  4003;
// для списка льготных подразделений
cPodrBenefits           =  4004;

//------------------------------------------------------------------------------
// [j]ob [s]heet types
// типы нарядов (SYS_NAR.CHOICE)
//------------------------------------------------------------------------------
// бригадный наряд
jsBrigade                       = 1;
// индивидуальный наряд
jsIndividual                    = 2;
// индивидуальный наряд с учетом КТУ
jsIndividualVsMPF               = 3;
// дневная зарплата с учетом КТУ
jsDailyWages                    = 4;
// расчет сделки по объектам
jsAggregative                   = 5;

jsFuturePeriodDelta             = 100;
// бригадный наряд (будущий период)
jsFuturePeriodBrigade           = 101;
// индивидуальный наряд (будущий период)
jsFuturePeriodIndividual        = 102;
// индивидуальный наряд с учетом КТУ (будущий период)
jsFuturePeriodIndividualVsMPF   = 103;
// расчет сделки по объектам (будущий период)
jsFuturePeriodAggregative       = 105;

jsArchivePeriodDelta            = 200;
// бригадный наряд (архивный период)
jsArchivePeriodBrigade          = 201;
// индивидуальный наряд (архивный период)
jsArchivePeriodIndividual       = 202;
// индивидуальный наряд с учетом КТУ (архивный период)
jsArchivePeriodIndividualVsMPF  = 203;
// расчет сделки по объектам (архивный период)
jsArchivePeriodAggregative      = 205;
// хранение сумм овердрафта по людям(заказная доработка ТОП СОФТ)
jsOverDraft                     = 995;

cPostPer             =     1;
cParamTXO            =     2;
cStaffPsn            =     555;
cStaffStr            =     556;
cBrigadeDuty         =     1;

//------------------------------------------------------------------------------
//флаги интерфейсов просмотра и выбора объектов (лицевых счетов, работников
//бригад, нарядов и пр.)
//------------------------------------------------------------------------------
vfDistributed             = 1;
vfCalculated              = 2;
vfBrigadeDuty             = 4;
vfRouting                 = 8;

//возможен вызов интерфейса редактирования объектов
vfCanEditObjects          = 1;
//возможен вызов интерфейса редактирования групп
vfCanEditGroups           = 2;
//пометка возможна только в одной группе
vfSingleGroupSelection    = 8;
//пометить всё и свернуться
vfSilentlySelectAll       = 16;
//выбор дозволен
vfCanSelect               = 32;
//множественный выбор объектов
vfMultipleSelection       = 96; // 64 + vfCanSelect
vfKeepMarks               = 128;
//просматривать объекты в привязке к подразделениям
vfViewByDepartment        = 256;
//просматривать объекты в привязке к бригадам
vfViewByBrigade           = 512;
//просматривать объекты в привязке к группам работников
vfViewByGroup             = 1024;
//просматривать объекты в привязке к реестрам
vfViewByReest             = 2048;
//просматривать объекты в привязке к платежным ведомостям
vfViewByPlVed             = 4096;
//просматривать объекты в привязке к чему угодно (среди возможных вариантов)
vfViewByWhatever          = 1792; // vfViewByGroup + vfViewByBrigade + vfViewByDepartment
// Открытие окна просмотра реестра из окна выбора ссылки источника для удержаний
vfViewBySource            = 8192;   //0010 0000 0000 0000
vfSingleSelection         = 16384;  //0100 0000 0000 0000

//------------------------------------------------------------------------------
//типы доплат (на работу/персональная/на наряд)
//зарезервирован диапазон  0..999
//------------------------------------------------------------------------------
apSMNARYAD  = 0;
apPRNARYAD  = 1;
apSYS_NAR   = 2;
apBRWORK    = 3;

//------------------------------------------------------------------------------
// [u]p [f]actor type
// типы повышающих коэффициентов(на работу/на операцию)
// зарезервирован диапазон 1000..1999
//------------------------------------------------------------------------------
ufFACTOR_WORK  = 1000;
ufFACTOR_OPER  = 1001;

//------------------------------------------------------------------------------
// [s]ubordinate [a]dditional [p]ayments
// Виды доплат по подчиненности
// зарезервирован диапазон 2000..2999
//------------------------------------------------------------------------------
sapKLREJIM = 2000;

TimePrecision         = 3;

dfAccountingFromAccount = 0;
dfAccountingByPaymentKind = 1;
dfSetupAccounting = 2;
dfAccountingByWork = 3;
//
dfTakeFace = 31;
dfStandardTimeFromFace = 1;
dfTariffFromFace = 2;
dfQuantityFromFace = 4;
dfActualHoursFromFace = 8;
dfAccountingFromFace = 16;

// сдвиг для получения группы битов бригадных нарядов
dfTakeBrigadeShift = 5;
// выбирать процент премии и КТУ из справочника бригад
dfTakeBrigade = 3;
// выбирать КТУ из справочника бригад
dfKTUFromBrigade = 1;
// выбирать процент премии из справочника бригад
dfPremiumPercentFromBrigade = 2;

// сдвиг группы битов для источника сведений о подразделении отнесения затрат
dfCostAssignDeptSrcShift = dfTakeBrigadeShift + 4;
// маска всех установленных битов группы
dfCostAssignDeptSrc = 3;
// подразделение отнесения затрат из наряда (номер в списке)
dfCostAssignDeptFromDuty = 0;
// подразделение отнесения затрат из лицевого счета (номер в списке)
dfCostAssignDeptFromAccount = 1;
// подразделение отнесения затрат задается вручную (номер в списке)
dfSetupCostAssignDept = 2;
// подразделение отнесения затрат из справочника бригад (номер в списке)
dfCostAssignDeptFromBrigade = 3;

// флаг - учитывать переходы в межпериод
dfProcessChanges = 4096;
// флаг - учитывать лицевую сторону
dfProcessJobList = 8192;

// смещение группы битов для способа разноски доплат
dfAllocationPaysShift = dfCostAssignDeptSrcShift + 5;
// разносить доплаты по всем выплатам (номер в списке)
dfAllocationPays = 0;
// разносить доплаты по лицевым счетам (номер в списке)
dfAllocationPaysAccount = 1;

erUnsuccessful    = -1;
erInterrupted     = -2;

//------------------------------------------------------------------------------
// [s]chedule [t]ype
//------------------------------------------------------------------------------
// данные из маски ручной корректировки
stMask = -3;
// нормальный график (для расчета нормы времени при нормализации рабочих
// часов/дней или суммированном учете сверхурочных)
stStandard  = -2;
// балансный график
stBalanced  = -1;
// плановый график
stPlanned   = 0;
// фактический табель
stActual    = 1;

//------------------------------------------------------------------------------
// [h]ours [k]ind
//------------------------------------------------------------------------------
// рабочие часы
hkWorking                     = 1;
// часы работы вечером
hkEvening                     = 2;
// часы работы ночью
hkNight                       = 3;
// часы работы в праздничные дни (за оплату). Сумма hkWorkingHoliday и hkWeekendHoliday.
hkHoliday                     = 4;
// часы работы в выходные (за оплату)
hkWeekend                     = 5;
// сверхурочные
hkOverwork                    = 6;
// остаток сверхурочных
hkOverworkRest                = 7;
// рабочие часы с точки зрения расчета по среднему
hkWorkingForAvgEarnings       = 10;
// часы, за которые можно выплатить аванс
// (рабочие часы в день, считающийся по плану рабочим, плюс часы
// приходящегося на такой день оплачиваемого отклонения)
hkAdvanceable                 = 11;
// оплачиваемые часы
// (рабочие часы плюс часы приходящегося на день оплачиваемого отклонения)
hkPaid                        = 12;
// переработка за период
hkOverworkForPeriod           = 14;
// рабочие часы, переходящие на следующие сутки
hkCarry                       = 17;
// рабочие часы для расчета времени по больничному(учет входимости видов оплат)
hkTimeForSickListEnteringKind = 18;
// средняя продолжительность рабочего дня, часов
hkWorkDayAvgTime              = 20;
// все отработанные часы (без учета настроек "рабочие часы за вычетом...")
hkWholeWorking                = 21;
// часы работы в рабочий по плану праздник
hkWorkingHoliday              = 22;
// часы работы в нерабочий по плану праздник (за оплату)
hkWeekendHoliday              = 23;
// часы отсутствия по уважительной причине
hkAbsenceForValidReason       = 24;
// часы явки
hkAppearance                  = 25;
// часы уменьшающих норму неявок
hkDecreasingStandardTime      = 26;
// часы работы во вредных условиях
// [!] Устаревший вид часов. Опирается только на признак "вредные условия" в отклонениях
hkHarmfulConditions           = 27;
// часы работы в праздник сверх плана
hkOverPlannedHoliday          = 28;
// часы работы по приказу на работу в выходные
hkOrderedWeekendWork          = 29;
// оплачиваемые часы работы по приказу на работу в выходные
hkPaidOrderedWeekendWork      = 30;
// часы работы по приказу на работу в выходные/праздничные за отгул
// сумма hkHolidayForLeave и hkWeekendForLeave
hkOrderedWeekendWorkForLeave  = 13;
// часы работы по приказу на сверхурочную работу за отгул
hkOrderedOvertimeWorkForLeave = 15;
// часы работы по приказу на работу сверхурочно
hkOvertimeWorkOrder           = 31;
//----------- Виды часов с кодом, бОльшим 31. Использовать только в функциях с постфиксом Ex
// часы работы в нормальных условиях труда (с кодом вредности ICOrdinary), и приравнивающиеся к таковым
hkICOrdinary                  = 32;
// часы работы во вредных условиях труда (с кодом вредности ICHarmful), и приравнивающиеся к таковым
hkICHarmful                   = 33;
// часы работы в особо вредных условиях труда (с кодом вредности ICExtraHarmful), и приравнивающиеся к таковым
hkICExtraHarmful              = 34;
// часы работы, принимающие участие в расчетах начислений по доп. тарифам
// (сумма hkICOrdinary, hkICHarmful, hkICExtraHarmful)
hkWorkingForIslbrCalculations = 35;
// сверхурочные, рассчитанные по правилам поденного учета (служебный вид часов)
hkDailyOverhours              = 36;
// сверхурочные, рассчитанные по правилам суммированного учета
// (служебный вид часов, могут быть меньше нуля)
hkSummedOverhours             = 37;
// часы уменьшающих норму неявок, как они выглядят согласно настройкам. Запрашивать для графика stActual
hkActualDecreasingStandTime   = 38;
// часы работы в праздники (нерабочие по плану) за отгул
hkHolidayForLeave             = 39;
// часы работы в выходные за отгул
hkWeekendForLeave             = 40;
// часы работы в нерабочие по плану праздники (как за оплату, так и за отгул)
// сумма hkWeekendHoliday и hkHolidayForLeave
hkWholeWeekendHoliday         = 41;
// часы работы в праздники (и за оплату, и за отгул)
// сумма hkWorkingHoliday, hkWeekendHoliday и hkHolidayForLeave
hkWholeHoliday                = 42;
// часы работы в выходные (и за оплату, и за отгул)
// сумма hkWeekend и hkWeekendForLeave
hkWholeWeekend                = 43;
// граница, до которой - обычные сверхурочные, а после которой - остаток сверхурочных,
// по правилам суммированного учета. Можно считать за произвольный период и сравнивать
// с hkSummedOverhours за этот же период, таким образом остаток сверхурочных вычисляя.
hkSummedOverworkRestBorder    = 44;
// рабочие часы во время отпуска. Появляются только если часы отпуска в этот же день,
// то есть не все часы отпуска съедены рабочими.
hkWorkingWhileVacation        = 45;
// фактически отработанные + часы оплачиваемых командировок, которые в обычном режиме
// не входят в фактически отработанное время
hkWorkingWithBusinessTrips    = 46;
// вредные часы, идущие "в зачёт" для РБ. Равны hkICHarmful, если день по итогу вредный.
// В остальных случаях - ноль
hkCreditedHarmful             = 47;
// "обычные" часы для пары к hkCreditedHarmful. В сумме с hkCreditedHarmful дают hkWorkingForIslbrCalculations
hkCreditedOrdinary            = 48;

//------------------------------------------------------------------------------
// [d]ay [k]ind
//------------------------------------------------------------------------------
dkSpecial               = 1;
// день, считающийся рабочим по закону (зависит от настроек)
dkWorking               = 2;
// праздничный день
dkHoliday               = 3;
// выходной
dkWeekEnd               = 4;
// дни работы сверхурочно
dkOverWork              = 5;
dkOverworkRest          = 6;
// дни работы вечером
dkEvening               = 7;
// дни работы ночью
dkNight                 = 8;
// дни с точки зрения расчета по среднему
dkWorkingForAvgEarnings = 10;
// день, за который можно выплатить аванс
// (рабочий день по плану и либо рабочий день по факту, либо день,
// на который пришлось оплачиваемое отклонение)
dkAdvanceable           = 11;
// оплачиваемый день
// (рабочий день, либо день, на который пришлось оплачиваемое отклонение)
dkPaid                  = 12;
// работа в праздничный день (как в рабочий по плану, так и в нерабочий по плану)
dkWorkingHoliday        = 13;
// работа в выходной день (за оплату)
dkWorkingWeekend        = 14;
// все отработанные дни (без учета настроек "рабочие часы за вычетом...")
dkWholeWorking          = 15;
// дни явки
dkAppearance            = 16;
// нерабочий праздничный день
dkWeekendHoliday        = 17;
// не отброшенный фильтром день
dkEnabled               = 18;
// дни работы во вредных условиях
dkHarmfulConditions     = 19;
// календарные дни работы
dkCalendarWorking             = 20;
// дни работы по приказу на работу в выходные
dkOrderedWeekendWork          = 21;
// дни оплачиваемой работы по приказу на работу в выходные
dkPaidOrderedWeekendWork      = 22;
// дни работы по приказу на работу сверхурочно
dkOrderedOvertimeWork         = 23;
// календарные дни для расчета отпуска
dkCalendarVacation            = 24;
// дни для времени, входящего в расчет больничного
dkTimeForSickListEnteringKind = 25;
// дни работы в выходные/праздничные по приказу, за отгул
dkOrderedWeekendWorkForLeave  = 26;
// дни работы сверхурочно по приказу, за отгул
dkOrderedOvertimeWorkForLeave = 27;
// дни работы в рабочий по плану праздничный день
dkWorkingWorkingHoliday       = 28;
// дни работы в нерабочий по плану праздничный день (за оплату)
dkWorkingWeekendHoliday       = 29;
// дни, отработанные в нормальных условиях труда (с кодом вредности ICOrdinary), и приравнивающиеся к таковым
dkICOrdinary                  = 30;
// дни, отработанные во вредных условиях труда (с кодом вредности ICHarmful), и приравнивающиеся к таковым
dkICHarmful                   = 31;
//----------- Виды дней с кодом, бОльшим 31. Использовать только в функциях с постфиксом Ex
// дни, отработанные в особо вредных условиях труда (с кодом вредности ICExtraHarmful), и приравнивающиеся к таковым
dkICExtraHarmful              = 32;
// дни работы, принимающие участие в расчетах начислений по доп. тарифам
dkWorkingForIslbrCalculations = 33;
// дни, могущие связываться переходящими сменами
dkShiftable                   = 34;
// дни работы в нерабочие по плану праздники за отгул
dkWorkingHolidayForLeave      = 35;
// дни работы в выходные за отгул
dkWorkingWeekendForLeave      = 36;
// дни, считающиеся вредными с точки зрения отпусков за вредные условия труда
dkHarmfulForVacations         = 37;
// дни, в которые положительное кол-во суммированных сверхурочных часов (hkSummedOverhours)
dkWithSummedOverhours         = 38;
// дни, содержащие работу во время отпуска (одновременно рабочие часы и часы отпуска)
dkWorkingWhileVacation        = 39;
// дни, содержащие фактически отработанное время и/или время оплачиваемых командировок
dkWorkingWithBusinessTrips    = 40;
// наличие и больничного и отпуска в один день
dkSchrodingersDay             = 41;
// выходной во время работы во время отпуска
dkWeekendWhileVacation        = 42;

//------------------------------------------------------------------------------
// [c]ontrol [f]lags
//------------------------------------------------------------------------------
// без учета фильтров
cfDisregardFilters      = 128;
// без учета дат приема на работу/увольнения
cfDisregardPeriod       = 64;
cfAllFlags              = 224; // с учетом резервного флажка 32

coWorkingHoursMask    = 1;
coEveningHoursMask    = 2;
coNightHoursMask      = 4;
coDiscountHoliday     = 8;
coDiscountWeekEnd     = 16;
// не считать день работой сверхурочно
coDiscountOverwork    = 32;
// маска праздничных часов
coHolidayHoursMask    = 64;
// ручная корректировка переходящей рабочей смены
coShiftCorrectionMask = 128;
// считать введенные в маске "праздничные часы" рабочими по плану
coHolidayHoursAsWorkingHoliday = 256;
//------------------------------------------------------------------------------
// [a]bsence [t]ype
// типы неявок
//------------------------------------------------------------------------------
// системные
atSystem = 0;
// за месяц
atMonthly = 1;

//------------------------------------------------------------------------------
// [a]bsence [a]ttributes
// атрибуты неявки
//------------------------------------------------------------------------------
// условное обозначение неявки: string
aaMark          = 1;
// дата начала неявки: date;
aaBeginning     = 2;
// дата окончания неявки: date
aaEnding        = 3;
// кол-во дней неявки: byte
aaDays          = 4;
// кол-во часов неявки: double
aaHours         = 5;
// описание неявки: string
aaDescription   = 6;
// код вида оплаты: word
aaPaymentCode   = 7;
// nrec записи-источника: comp
aaSourceRecord  = 8;
// nrec условного обозначения: comp
aaNotation      = 9;
// вид неявки: word (см. akXXXX-константы)
aaKind          = 10;
// карта распределения часов неявки: longint (PContainer); устарело
aaHoursMap      = 11;
// карта распределения дней неявки: longint (PContainer); устарело
aaDayMap        = 12;
// неявка не отнимает, а добавляет часы: boolean
aaAdditive      = 13;
// в классификаторе условных обозначений стоит входимость в расчет рабочего
// времени при выборе ограничения пособия: boolean
aaWorkTime      = 14;
// код для обозначения дней месяца в стандартных формах Т-12, Т-13: string
aaStandardCode  = 15;
// код для вывода информации о неявках в печатных формах табеля: string
aaAbsenceCode   = 16;
// входит в расчет среднесписочной численности: boolean
aaPayrollAvgNum = 17;
// код вида пособия или вида отпуска
aaCode          = 18;
// код группы условного обозначения: longint
aaGroupCode     = 19;
// признак "явка": boolean
aaAppearance    = 20;
// переопределяет код вредности: boolean
aaOverridesInsalubrityCode          = 21;
// код вредности, на который переопределяет: word
aaInsalubrityCode                   = 22;
// считается отработанным временем с точки зрения доп. тарифов: boolean
aaWorkingForInsalubrityCalculations = 23;
// входит в состав рабочих часов: boolean
aaIncludedInWorkingHours            = 24;
// признак "уменьшает норму": boolean
aaDecreasesStandardTime             = 25;
// Претендует ли неявка на то, чтобы занять целый день: создана на основе
// больничного/отпуска/командировки, либо на основе уменьшения с нулевым кол-вом часов.
// Признак характеризует именно "целодневность по плану". Пока что это понятие совпадает с "целодневностью по факту".
// : boolean
aaWholeDay                          = 26;

//------------------------------------------------------------------------------
MaxVarianceCount = 10;  // устарело
// мифическая константа, максимальное значение количества времени,
// воспринимаемое в качестве отработанного - величИны, превышающие ее, имеют
// особый смысл
MaxWorkingHours  = 100;

//------------------------------------------------------------------------------
// [w]orking [t]able [a]ttribute
//------------------------------------------------------------------------------
wtaChange      = 1;
wtaDepartment  = 2;

ByCurrency   = 906;
UkrCurrency  = 980;
RuCurrency   = 810;

//------------------------------------------------------------------------------
//константы для табеля учета рабочего времени
//------------------------------------------------------------------------------
WeekEndMark                 = 'В';
DefaultSickMark             = 'Б';
DefaultVacationMark         = 'О';

// эти константы используются для пометки в табеле дней, занятых целодневными
// неявками
SickSpecialValue            = 255;
VacationSpecialValue        = 254;
FiredSpecialValue           = 253;
BusinessTripSpecialValue    = 252;
DayLongAbsenceSpecialValue  = 251;
//250 - внутренний код

//------------------------------------------------------------------------------
// Периоды суммированного учета сверхурочных
//[p]eriod [s]ummed [o]verwork
//------------------------------------------------------------------------------
psoMonth    = 0;
psoQuarter  = 1;
psoHalfYear = 2;
psoYear     = 3;

//------------------------------------------------------------------------------
// [r]esource [i]dentifiers
// идентификаторы хранящихся в ресурсе настроек и параметров
//------------------------------------------------------------------------------
//способ формирования планового аванса
riAdvanceFormingMethod =      'Avans_Z23';
riAdvancePercent =            'Avans_PrProc';
riAdvanceSum =                'Avans_PrSum';
riReformAdvancePercent =      'Расчет аванса: переформировывать процент';
riAdvanceAlternativeView =    'Аванс: альтернативный вид';
riAdvanceTreeView =           'Advance_TreeView';
riAdvanceDeptFilterOptions =  'Advance_DeptFilterOptions';
riGetPodAlnTreeView =         'GetPodAln_TreeView';
riGetPodalnCurOrder =         'GetPodAln_CurOrder';
riWorkingTableEnhancedTimeFormat = 'Табель: улучшенный формат времени';
riTimeTableEnhancedTimeFormat = 'График: улучшенный формат времени';
riTimeTableTemplateType =     'График: тип шаблона';
riTimeTableDefaultHours =     'График: часы по умолчанию_';
//------------------------------------------------------------------------------
// интерфейс PICK
riPickDepartmentHier = 'PICK: иерархия подразделений';
riDefaultPickCode = 'PICK: код по умолчанию';
riDefaultPickTab = 'PICK: закладка по умолчанию';
riDefaultPickGroup = 'PICK: група объектов по умолчанию';

//------------------------------------------------------------------------------
riLastCurrentDepartment = 'CurLSchet_OldCex';
riCurrentDepartmentList = 'CurrentDepartments';

//------------------------------------------------------------------------------
// управляющие флаги обхода дерева подразделений
// department [i]teration [f]lags
//------------------------------------------------------------------------------
// игнорировать значение настройки "Использовать разграничение прав доступа к
// подразделениям"
ifIgnoreUserRights    = 1;
// построить выгрузку для построения плоского списка подразделений
ifTreatAsPlainList    = 2;
// учитывать права доступа к подразделениям, вне зависомости от значения настройки
// "Использовать разграничение прав доступа к подразделениям"
ifForceUserRights     = 4;
// всегда показывать склады, вне зависимости от значения настройки "Показывать склады"
ifForceShowWarehouses = 8;

//------------------------------------------------------------------------------
// [i]gnore [f]lags
//------------------------------------------------------------------------------
//ifNone    = 0;
//ifFilter  = 1;
//ifChanges = 2;
//ifUseless = 4;

//------------------------------------------------------------------------------
// [c]heck [f]lags
//------------------------------------------------------------------------------
cfNone            = 0;
// учитывать содержимое фильтра
cfFilter          = 1;
cfChanges         = 2;
cfUselessDays     = 4;
// учитывать только изменения фильтра
cfFilterChange    = 9;
cfEverything      = cfFilter + cfChanges + cfUselessDays;
// учитывать периоды работы сотрудника
// актуально в тех случаях, когда несколько раз принимали на работу и увольняли,
// чтобы учитывать как бы разрывы между периодами работы что ли. Потому что самые крайние даты
// приёма/увольнения анализируются и без этого флага, и дни за их пределами
// сами выбрасываются из периодов.
// Не употреблять совместно с cfDisregardHired.
cfHired           = 16;
// изменения Особых условий/КПС
cfInsalubrityRef  = 32;
// изменения кода вредности для доп. тарифов
cfInsalubrityCode = 64;
// изменения Особых условий/КПС для стажей
cfPenStajInsalubrityRef = 128;
// совсем не учитывать даты приёма на работу/увольнения
// от простого отсутствия флага cfHired отличается тем, что по умолчанию
// все периоды грузятся всё-таки в пределах "крайних" дат приёма/увольнения (максимальных
// из лицевого счета / истории увольнений), а данный флажок делает так, чтобы
// даже эти даты не учитывались.
// Не употреблять совместно с cfHired.
cfDisregardHired  = 256;

//------------------------------------------------------------------------------
// [a]ttribute [p]refix
//------------------------------------------------------------------------------
apWorking              = 'Рабочие';
apEveningHours         = 'Вечерние';
apNightHours           = 'Ночные';
apHolidayHours         = 'Праздничные';
apWorkingHolidayHours  = 'Праздничные, рабочие по плану';
apWeekendHolidayHours  = 'Праздничные, не рабочие по плану';
apWeekendHours         = 'Выходные';
apOverworkHours        = 'Сверхурочные';
apOverworkHoursRest    = 'Сверхурочные (остаток)';
apICOrdinary           = 'Работа в обычных условиях';
apICHarmful            = 'Работа во вредных условиях';
apICExtraHarmful       = 'Работа в особо вредных условиях';
apHolidayHoursForLeave = 'Праздничные за отгул';
apWeekendHoursForLeave = 'Выходные за отгул';

//------------------------------------------------------------------------------
// [a]ttribute [s]uffix
//------------------------------------------------------------------------------
asPaymentKind =     'ВидОплаты';
asPercent =         'Процент';
asTotalHours =      'Итого часов за период';
asTotalDays  =      'Итого дней за период';

//------------------------------------------------------------------------------
// [e]xternal [a]ttribute
//------------------------------------------------------------------------------
eaTotalWorkingHours = apWorking + '.' + asTotalHours;
eaTotalWorkingDays  = apWorking + '.' + asTotalDays;

//------------------------------------------------------------------------------
// [v]ariance [k]ind
// вид отклонения
//------------------------------------------------------------------------------
// замена
vkChange       = 0;
// уменьшение
vkDecrease     = 1;
// увеличение
vkIncrease     = 2;
// нарушение режима
vkIrregularity = 3;
// уточнение (не влияет на количество отработанного времени)
vkRefinement   = 4;
// информация (не влияет на количество отработанного времени, при этом влияет на пометку дня)
vkInformation  = 5;

//------------------------------------------------------------------------------
// [a]bsence [k]ind
//------------------------------------------------------------------------------
akNone              = 0;
// ручная корректировка (маска или безусловное отклонение)
akHandCorrection    = 4;
// командировка
akBusinessTrip      = 32;
// отзыв из отпуска (системная неявка)
akVacationRecall    = 64;
// выполнение гособязанностей
akDuty              = 128;
// больничный (системная неявка)
akSickList          = 256;
// отпуск (системная неявка)
akVacation          = 512;
// выходной день (на самом деле - буква "В" в табеле, даже не настоящий выходной)
akWeekendMark       = 768;
// прочая неявка (получается из отклонений от табеля учета рабочего времени)
akTableAbsence      = 1024;
// нарушение режима
akIrregularity      = 2048;
// уточнение (не влияет на количество отработанного времени)
akRefinement        = 4096;
// приказ по кадрам на работу сверхурочно
akOvertimeWorkOrder = 8192;
// приказ по кадрам на работу в выходные
akWeekendWorkOrder  = 8193;
// приказ по кадрам на обучение
akTrainingOrder     = 8194;
// приказ по кадрам: перенос обучения
akTrainingTransferOrder = 8195;
// тип табельного отклонения: информация
akInformation       = 8196;
// приказ на почасовое отклонение
akHoursAbsenceOrder = 8197;

//------------------------------------------------------------------------------
// Флаги отладочного вывода внутренних структур табеля
// (WT Debug Output)
//------------------------------------------------------------------------------
// Часы всех типов по дням текущего месяца табеля
wtdoHours              = 1;
// Дни всех типов по дням текущего месяца табеля
wtdoDays               = 2;
// Содержимое рабочей коллекции переходов - устарело
wtdoChanges            = 4;
// Неявки
wtdoAbsences           = 8;
// Сдвигаемые отклонения
wtdoMovableVariances   = 16;
wtdoSystemVariances    = 16; // устаревш. конст.
// Месячные неявки
wtdoMonthlyAbsences    = 32;
// Системные неявки
wtdoSystemAbsences     = 64;
// Коллекция только постоянных переходов - устарело
wtdoPermanentChanges   = 128;
// Графики работ
wtdoSchedules          = 256;
// Внутренности текущего вычислителя реквизитов ЛС на дату, вместе с менеджером данных
wtdoPADetails          = 512;
// Внутренности вычислителя реквизитов ЛС с учетом только постоянных переходов, вместе с менеджером данных
wtdoPADetailsPermanent = 1024;
// Определитель плановой вредности на дату из ЛС и переходов
wtdoBaseIns            = 2048;
// Вывести ВСЁ (не учитывает устаревшие константы)
wtdoAll                = 3963; // менять значение при добавлении новых wtdo-констант

//------------------------------------------------------------------------------
//                                                                  ВХОДИМОСТИ
//------------------------------------------------------------------------------
// [e]ntering [g]roups (0..255)
// группы входимостей
//------------------------------------------------------------------------------
egCalculations = 0;       // группа "Входимость в расчеты"
egReports = 1;            // группа "Входимость в отчеты"
egbl = 2;                 // группа "Входимость по среднему"
egCustoms = 5;           // группа "Пользовательская входимость"

//------------------------------------------------------------------------------
// [p]ayment [e]nterings (1..255)
// входимости оплаты ("коды входимостей")
// полный номер входимости =
//   word(<группа входимостей>) shl 8 + <входимость оплаты>
//------------------------------------------------------------------------------
// расчеты
peOkladAndSumNaRuk      = 1;   // Оплата входит в формирование оклада и суммы на руки
peFormSeparate          = 2;   // Оплата формируется отдельной записью
peLgotGodSumRasESN      = 3;   // Льготируется годовая сумма при расчете ЕСН
peLgotGodSumRasTr       = 4;   // Льготируется годовая сумма при расчете взносов на травматизм
peTypeDefinition        = 5;   // Уточнение к типу оплаты
// больничные (10..25)
// будут считываться в память при расчете зарплаты 10-50
peAvgCalculationsFirst  = 9;  // фиктивная входимость для обозначения начала диапазона входимостей в расчеты по среднему
peListNet1              = 10; // Месяц берется в расчет при учете годовых премий
peListNet2              = 11; // При расчете больничного доплата пересчитывается по часам
peListNet3              = 12; // Месяц берется в расчет при выборе ограничения
peListNet4              = 13; // Добавляется к плановому времени для пересчета премий в отпусках
peListNet5              = 14; // Добавляется к плановому времени для пересчета премий в больничных
peOtpusk1               = 15; // меняет фактическое время для пересчета премий в отпусках
peListNet6              = 16; // меняет фактическое время для пересчета премий в больничных
peOtpusk2               = 17; // период (количество месяцев), за который выплачена премия
peListNet7              = 18; // влияет на перерасчет разовых выплат
peListNet8              = 19; // нерабочий период
peOtpusk4               = 20; // нерабочий период для отпусков
peOtpusk3               = 21; // нерабочие внутрисменные часы для отпусков
peOtpusk5               = 22; // выплаты за выполненную работу или отработанное время
peDenSodGosSl           = 25; // денежное содержание госслужащих РФ
peAvgCalculationsLast   = 26; // фиктивная входимость для обозначения конца диапазона входимостей в расчеты по среднему
peAvansRaschPar         = 28; // входимость в аванс полностью

//предварительная разноска (29..35)
peZeroKoldn             = 29; // Вставлять оплату с нулевым кол.часов
peUchrab                = 30; // Перерасчет за прошлый месяц
peUchrabb               = 31; //Учитывается при сторнировании больничного
peUchrabo               = 32; //Учитывается при сторнировании отпуска
peUchrabTarif           = 33; //При автомат.пересчете оклад(тариф)
peUchrabz               = 34; //При отнесении суммы не учитывать временные переходы
peArchPer               = 35; //учитывать изменение параметров при добавлении перехода в прошлом периоде
peUchocr                = 36; //Cводить по округлениям
pematp                  = 37; //Формировать необлагаемую часть матпомощи отдельной записью
peAlim                  = 90; //Входит в расчет алиментов
pePushDays              = 43; // Проставлять календарные дни при отсутствии рабочих дней в табеле
pe49                    = 44; //Формирует время для автоматического расчета выслуги лет
pe42_45                 = 45; //Количество дней для алгоритмов 42_45 формировать из входящих оплат
pe46                    = 46; //Входимость в 46-алгоритм
//...
peVxodMonFZ             = 47; //Входит в ФОТ для ФЗ и ФСС с противоположным значением настройки учета месяца
peReshS                 = 48; //В расчет алиментов и исполнительных листов - по решению суда
peTimeForN              = 49; // Не проставлять часы из межпериода
peActualTimeForPayment  = 51; // При корректировке выплаты в межпериод брать время по табелю
peShareCosts            = 52; // Разбивать по затратным счетам

pePpsFully              = 59; //Взносы на ППС формировать полностью, вне зависимости от отработанного времени
peLongServiceHoursForPS = 60; //Входит в расчет часов по выслуге лет для пенсионного стажа

peFixAfterProbation     = 70; //Назначается по истечении испытательного срока
peInsWelfareCalc        = 71; //Входит в расчет материальной помощи
peRecalcSDZ             = 72; //Пересчет СДЗ с учетом мат. помощи
peUnhelthComp           = 73; //Компенсация за вредность
peUnCondition           = 74; // Не участвует в ограничении 50% НДФЛ
peAsconaBonus           = 75; //Бонус для Асконы
peNotTaxFree            = 76; // Скидка НЕ участвует в расчете НДФЛ в межпериод

//налог на доходы (80..89)
pendfl1  = 80; //Входит в расчет НДФЛ при наличии зарубежного представительства

// отчеты
peFormT13       = 1;  // Входит в графы 7-12 формы Т-13
peFormF201Kaz   = 2;  // В форме для казахстана в графе Доходы, не подлежащие налогообложению
peNalReg        = 3;  // Входит в регистр расходов по оплате труда и в ФОТ для расчета налога на прибыль
peFormZUM       = 4;  // Входит в базу для расчета премии для отчета Расчет премии по стимулированию
peFormF60001Kaz = 5;  // В форме 600.01
peFormF60002Kaz = 6;  // В форме 600.02
peFormF60003Kaz = 7;  // В форме 600.03
peFormF10018Kaz = 8;  // В форме 100.18
peFormFSS4      = 9;  // В форме FSS-4
peNalReg1       = 10; // Входит в регистр расходов по оплате труда в котором начислено, за который начислено
peFormFSS4_8    = 11; // В форме FSS-4 таблица 8
peFormFSS4_11   = 12; // В форме FSS-4 таблица 11
peFormFSS4_9    = 13; // В форме FSS-4 таблица 9
peBankSpr       = 14; // В справке для предоставления кредита
peFormFSS4a     = 15;  // В форме FSS-4а
peFormESN       = 16;  // Для строк 7хх РАП и Декл. ЕСН
peDoxdivident   = 17;  // Для дивидендов
peMatVigoda     = 18;  // Для матвыгоды на приобретение жилья
//константы 19-22 зарезервированы для отчетов по ЕСН
//pe...         = 19;  //Отчеты по ЕСН
//pe...         = 20;  //Отчеты по ЕСН
//pe...         = 21;  //Отчеты по ЕСН
pePF_RFRep       = 22; //Учет отрицательных начислений в отчетах ПФ Россия
peFormN57T_Tarif = 23; //Тарифные для статистической формы N57-T Россия
peFormN57T_Rai   = 24; //Районные для статистической формы N57-T Россия
peFormN57T_WTime = 25; //Отработанное время формы N57-T Россия
// для Приложения 7 (РБ) с 26 по 33
peBonusUv = 26;        //Премия уволенным работникам, облагаемая по ставке 20% (для Приложения 7)
peSocV    = 27;        //Социальные налоговые вычеты (РБ, Приложение 7)
peImuV    = 28;        //Имущественные налоговые вычеты (РБ, Приложение 7)
// = 29;  зарезервированы
// = 30;  зарезервированы
peReturnBuildContribution = 31; //доходы в виде возврата взносов на строительство
peReturnInsuranceContribution = 32; //доходы в виде возврата страховых взносов
// = 33;  зарезервированы
peStorn2_NDFL = 34;    //Налоговая отчетность РФ, учет сумм сторнирования по месяцу начисления
peDoh_Spr       = 35;    //Входит в совокупный доход для справок
peP4_notRabTime = 36;    //Не учитывается в графе "Количество отработанных человеко-часов" в П-4
// = 37;  зарезервированы
peDatV_6NDFL = 38;         //отражать доход по дате выплаты в налоговой отчетности
peP4_DopCheckWt = 39;    //Дополнительная проверка табеля для попадания суммы в П-4
peDoh_NDFL = 40;         //Является доходом для налоговой отчетности РФ
peTaxDeductionKaz = 41; //Вычеты для налоговой отчетности (Казахстан)

//
//--------------------------------------------------------------------------------
//                                                            ВЫПЛАТЫ МЕЖПЕРИОДА
//--------------------------------------------------------------------------------
// [p]ayment [c]odes
// текущий период - < 80
// будущий период - >= 80

// выплаты текущего периода и проч.
pcCharge              = 0;  // выплаты текущего периода
pcDeduction           = 1;  // удержания
pcAgreement           = 2;  // договоры подряда
pcPremium             = 4;  // премия с учетом КТУ
pcSalary              = 5;  // зарплата с учетом КТУ
pcWayBill             = 6;  // путевые листы
pcSumPaidOutReturn    = 7;  // возврат подотчетных сумм
pcCurrentVacation     = 8;  // матпомощь к текущему отпуску
pcWelfare             = 9;  // матпомощь в межпериод
pcImported            = 10; // импортированные суммы
pcArchiveVacation     = 11; // матпомощь к архивному отпуску
pcILAlim              = 12; // Детализация алиментов для выплат в межпериод
pcILAlimOtpusk        = 13; // Детализация алиментов для отпусков в суммах по месяцам
pcILAlimAvans         = 14; // Детализация алиментов для аванса
pcInverceSalary       = 17; // зарплата от обратного
pcCostSharing         = 18; // распределение затрат
pcOverDraft           = 19; // превышение норм командировочных расходов

// Диапазон значений для региональных доработок (промежуточные значения не занимать!)
pcPartnersRangeLow    = 51; // нижнее допустимое значение для партнеров
pcPartnersRangeHigh   = 59; // верхнее допустимое значение для партнеров

RasPlatCol            = 61;

pcFuturePeriodDelimiter = 80; // разделитель для определения выплат текущего и будущего периодов

// выплаты будущего периода и проч.
pcSys_Dog_Future        = 88; // договора подряда будущего периода
pcSys_Uder_Future       = 89; // удержания будущего периода
pcOveralls              = 90; // спецодежда
pcIncomeTaxAdvance      = 96; // авансовые платежи по НДФЛ
pcIncomeTax             = 97; // подоходный налог с прошлого места работы
pcPastYearIncome        = 98; // доход, перенесенный с прошлого года
pcFuturePeriodCharge    = 99; // выплаты будущего периода
pcFutureVacation        = 112;  // матпомощь к будущему отпуску

pcCostsAssignmentCodes  = 200; // коды отнесения затрат
pcAccountingAlternation = 201; // настройки замены ШПЗ
pcCostsSharingTemplates = 202; // шаблоны настроек распределения затрат

pcArchCharge            = 300;  // выплаты архивного периода
pcArchDeduction         = 301;  // удержания архивного периода
pcArchAgreement         = 302;  // договоры подряда архивного периода
pcArchPremium           = 304;  // премия с учетом КТУ архивного периода

// Диапазон "архивных" значений для региональных доработок (промежуточные значения не занимать!)
pcArchPartnersRangeLow  = 351; // нижнее допустимое значение для партнеров
pcArchPartnersRangeHigh = 359; // верхнее допустимое значение для партнеров

//------------------------------------------------------------------------------
// [m]essage [f]lags
//------------------------------------------------------------------------------
mfText = 16;
mfNote = 17;
mfTextWithIndent = 18;

//------------------------------------------------------------------------------
// [a]ccounting [s]ource
//------------------------------------------------------------------------------
asPersonalAccount = 0;
asPayKindClassifier = 1;
//------------------------------------------------------------------------------
// Константы аналогичные паскалевским  : количество удержаний, начислений
//  и т.д. .....
//------------------------------------------------------------------------------
  zKolOplat     =  320; // количество видов оплат
  zKolUd        =  230; // количество видов удержаний

//------------------------------------------------------------------------------
// [p]eriod [f]lags
//------------------------------------------------------------------------------
pfInWhichCalculated   = 0; // в котором начислено
pfForWhichCalculated  = 1; // за который начислено
pfInWhichPaidOut      = 2; // в котором выплачено
//------------------------------------------------------------------------------
// признак источника сведений для предварительной разноски
// [p]redistribution [s]ource
//------------------------------------------------------------------------------
// основной вид оплаты
psBasicPayment                = 1;
// постоянная доплата
psPermanentAdditionalPayment  = 2;
// больничный лист
psSickList                    = 3;
// отпуск
psVacation                    = 4;
// отклонение
psVariance                    = 5;
// часы из табеля (вечерние, ночные и т.д.)
psWorkingTableHours           = 6;
// пособие на детей ежемесячное (табл. CHILD)
psChildAllowance              = 7;
// сторнирование отпуска
psVacation_S_O                = 8;
// пособие на детей разовое (табл. CHILDONE)
psChildOneAllowance           = 9;
// ПС
ps_P_S                        = 10;
// перенос сумм при пересечении больничного с отпуском
psVacation_B_O                = 11;
// начисления и выплаты текущего периода
psCharge                      = 12;
//------------------------------------------------------------------------------
// Константы для работы с объектом ObjAddressFunc AdrFunc.vih
//------------------------------------------------------------------------------

cgAddrFld_Name       = 0;
cgAddrFld_Code       = 1;
cgAddrFld_Full_Code  = 2;

cgAddrElement_Index      = 0; // Индекс
cgAddrElement_Country    = 1; // Страна
cgAddrElement_Region     = 2; // Регион
cgAddrElement_Rayon      = 3; // Район
cgAddrElement_City       = 4; // Город
cgAddrElement_Settlement = 5; // Населенный пункт
cgAddrElement_Street     = 6; // Улица
cgAddrElement_House      = 7; // Дом
cgAddrElement_Corps      = 8; // Корпус
cgAddrElement_Flat       = 9; // Квартира

cgAtdNRec                = 0; // NRec АТД
cgAtdName                = 1; // Название АТД
cgAtdCode                = 2; // Код АТД
cgAtdSocrTypeName        = 3; // Сокращенное название типа элемента АТД
cgAtdFullTypeName        = 4; // Полное название типа элемента АТД
cgAtdGniCode             = 5; // Код ГНИ для АТД
cgAtdNameUpCase          = 6; // Название АТД в верхнем регистре
cgAtdCodeUpCase          = 7; // Код АТД в верхнем регистре
cgAtdSocrTypeNameUpCase  = 8; // Сокращенное название типа элемента АТД в верхнем регистре
cgAtdFullTypeNameUpCase  = 9; // Полное название типа элемента АТД в верхнем регистре

//------------------------------------------------------------------------------
//[h]oliday [t]ype constants
//------------------------------------------------------------------------------
htNone            = 0;
htHoliday         = 1; // праздник
htMovedSaturday   = 2; // перенесенная суббота (для календарных отпусков по 5-дневке)
htWorking         = 3; // рабочий день (воскресенье или суббота) (для календарных отпусков)
htMovedSunday     = 4; // перенесенное воскресенье (для календарных отпусков по 5- и 6-дневке)

//----------------------------------------------------------------------------
//  [c]atalogs [e]lements
//----------------------------------------------------------------------------
ceGeneralServ      = 61; // общий трудовой стаж
ceSpecialityServ   = 63; // стаж работы по специальности
ceNorthernService  = 64; // северный стаж

//------------------------------------------------------------------------------
// Choose для сложного корректирующего коэффициента
//------------------------------------------------------------------------------
// штатное расписание
skkSts         = 0;
// история штатного расписания
skkHistSts     = 1;
// приказы
skkPrik        = 2;
// картотека
skkKart        = 3;
// рабочая корзина
skkBasket      = 4;
// лицевой счет
skkLchet       = 5;
skkLschet      = 5;
// переходы в межпериод
skkPerexod     = 6;
// назначение
skkApp         = 7;
// история назначений
skkAppHist     = 8;
// история увольнений
skkDismissHist = 9;
// табель
skkLstab       = 10;
// РПД1 районные и северные коэффициенты
skkPrikRPD1    = 11;
// табельные номера для РПД-5 с раздельной отчетностью
skkRPD5TabN    = 12;
// РПД1 Вид работы
skkRPD1VidRab  = 13;
// Основание для выслуги лет
skkOsnVisl     = 14;
// Подкласс условий труда
skkKlassPost   = 15;
//для связи доплат и количества отработанных дней и часов в РПД13
skkRPD13RaiseHoursAndDays = 17;
// Расширение таблицы PsnForSend для хранения количества дней смещения для поиска событий системы в настройке и рассылке
skkShiftEventTune = 18;
// Расширение таблицы PsnForSend для хранения количества дней смещения для поиска событий системы в отчете о событиях
skkShiftEventUser = 19;
// для связи данных из РПД - 92 и количества часов
skkRPD92 = 20;
// для связи данных из РПД - 5 и районного коэффициента
skkRCRPD5 = 21;

//------------------------------------------------------------------------------
// Статусы родственников
//------------------------------------------------------------------------------
// Иждивенец
psnLinksIjd        = 1;
// Студент
psnLinksStady      = 2;
// Инвалид
psnLinksInv        = 4;
// Ребенок одинокого опекуна
psnLinksOneCurator = 8;
// Второй родитель отказался от вычета
psnLinksOneDepend  = 16;

//------------------------------------------------------------------------------
// Типы документов родственников
//------------------------------------------------------------------------------
// Свидетельство о рождении
psnLinksDocBornSvid    = 0;
// Справка о рождении
psnLinksDocBornSpr     = 1;
// Документ об усыновлении
psnLinksDocAdopt       = 2;
// Документ об опеке
psnLinksDocGuard       = 3;
// Договор о передаче в приемную семью
psnLinksDocToFamily    = 4;
// Справка от другого родителя о неполучении пособия
psnLinksDocOtherParent = 5;
// Документ о инвалидности
psnLinksDocInv         = 6;
// Справка с места учебы
psnLinksDocStudent     = 7;
// Справка о смерти
psnLinksDocDeath       = 8;
// Документ уполномоченного представителя
psnLinksDocOther       = 9;
// Документ для выплаты единовременного пособия при рождении
psnLinksDocPosBorn     = 10;
// Отметка о лишении материнства
psnLinksDepriv         = 11;
// Справка от другого родителя о неполучении единовременного пособия
psnLinksSpravka12      = 12;
// Справка о неполучении пособия по другим местам работы
psnLinksSpravka13      = 13;
// Паспорт
psnLinksPassport       = 14;
// Иной документ
psnLinksOther          = 15;


//------------------------------------------------------------------------------
// Параметры документа
//------------------------------------------------------------------------------
// Название
psnLinksDocName        = 0;
// Дата начала действия документа
psnLinksDocDateBeg     = 1;
// Дата окончания действия документа
psnLinksDocDateEnd     = 2;
// Номер документа
psnLinksDocNum         = 3;
// Дата выдачи документа
psnLinksDocGivenDate   = 4;
// Кем выдан документ
psnLinksDocGivenBy     = 5;
// Полное название
psnLinksDocFullName    = 6;
// Серия документа
psnLinksDocSer         = 7;
// Код документа
psnLinksDocCode        = 8;

//------------------------------------------------------------------------------
// Параметры документа сотрудника
//------------------------------------------------------------------------------
// Название
psnDocName        = 0;
// Дата начала действия документа
psnDocDateBeg     = 1;
// Дата окончания действия документа
psnDocDateEnd     = 2;
// Серия документа
psnDocSer         = 3;
// Номер документа
psnDocNum         = 4;
// Дата выдачи документа
psnDocGivenDate   = 5;
// Кем выдан документ
psnDocGivenBy     = 6;
// Код документа
psnDocCode        = 7;

//------------------------------------------------------------------------------
// Типы контактных данных сотрудника
//------------------------------------------------------------------------------
// тел.дом.
psnLinksPhoneHome     = 0;
// тел.раб.
psnLinksPhoneWork     = 1;
// e-mail
psnLinksEmail         = 2;
// тел.сот.
psnLinksPhoneMobile   = 3;

//------------------------------------------------------------------------------
// Назначение E-mail
//------------------------------------------------------------------------------
// Общий Email
EmailCommon           = 0;
// Email для рассылки расчетных листков
EmailRList            = 1;

//------------------------------------------------------------------------------
// Вид образования сотрудников [E]ducation [L]evel
//------------------------------------------------------------------------------
// Не имеет начального
educLevelNone      = 1;
// Дошкольное
educLevelPreSchool = 2;
// Начальное общее (Общее базавое)
educLevelBegCom    = 3;
// Основное общее
educLevelCom       = 4;
// Среднее (полное) общее (Общее среднее)
educLevelMidCom    = 5;
// Начальное профессиональное (Профессионально-техническое)
educLevelBegProf   = 6;
// Среднее профессиональное (Среднее специальное)
educLevelMidProf   = 7;
// Неполное высшее
educLevelPreHeight = 8;
// Высшее профессиональное (Высшее)
educLevelHeight    = 9;
// Степень кандидата наук
educLevelScCand    = 10;
// Степень доктора наук
educLevelScDoc     = 11;

//------------------------------------------------------------------------------
// Flags for [P]erexod [Ch]anging
//------------------------------------------------------------------------------

pchBrigade       = 4; // бригада
pchCategory      = 8; // категория
pchRejim         = 16; // режим
pchPosition      = 32; // должность
pchSysPay        = 64; // Система оплаты
pchCorrectCoeff  = 128; // Корректирующий коэффициент для тарифа
pchTarif         = 256; // Тарифная ставка или оклад
pchCurrency      = 512; // Валюта
pchTarStav       = 1024; // Код и наименование тарифной сетки
pchRazr          = 2048; // Разряд
pchKTY           = 4096; // Коэффициент трудового участия
pchOsnOpl        = 8192; // Автоматическое форм. Основного Вида Оплаты при предварит.разноске
pchRegionPercent = 16384; // Процент районной надбавки
pchNorthCategory = 32768; // Код и наименование категории для выплаты северных надбавок
pchSHPZ          = 65536;  // ШПЗ
pchTXO           = 131072; // Хозяйственная операция
pchParameter     = 262144; // Параметр выбора
pchExtrAnalitik  = 524288;  // Дополнительные аналитики
pchTerrUsl       = 1048576; // Территориальные условия (устаревший параметр)
pchPodr          = 2097152; // подразделение (2^21)
pchIF            = 4194304; // Разбивка по источникам финансирования
pchKPS           = 8388608; // Связка Особые условия - КПС - Территориальные условия
pchStavka        = 16777216;// Количество ставок
// битовая маска, описывающая все возможные изменения в переходе
pchAllChanges    = 33554428; // (2^25 - 4)

// если переходы были некорректно конвертированы
pchError         = 1610612736;//(2^30 + 2^29)
// признак "полупрозрачного перехода"
pchTranslucent   = 1073741824; // 2^30

//----------------------------------------------------------------------------
//  [xr]eference [t]ype !!!!!ВНИМАНИЕ! 10..21, 55, 80..83, 15013 ЗАНЯТО!!!!!
//----------------------------------------------------------------------------
// перекрестные ссылки лицевых счетов
xrtPersonalAccounts = 0;
// связи "пользователь - текущие подразделения"
xrtCurrentDepartments = 1;
// подстановки систем оплат
xrtWageSystemSynonyms = 2;
// связи для фильтра из перечня приказов "пользователь - выбранные подразделения"
xrtPrikaz_DepartFilter = 3;
// связь "доплата - переход" для доплат, привязанных к переходу
xrtDoplata_Perexod = 5;
// связь "табель - Условия труда на рабочем месте" (LsTab - Advises)
xrtWorkingTable_Insalubrity = 6;
// связи "пользователь - флаг необходимости пересканирования списка лицевых счетов"
xrtUzer_ReskanNeccessary = 7;
// текущие ЛС
xrtCurLoad = 8;
// ЛС для отчетов
xrtRepLoad = 9;
// не пересканировать ЛС
xrtNotLoad = 55;
// связь "режим работы - условное обозначение выходного"
xrtOperatingMode_Weekend = 80;
// связь "классификатор больничных - условное обозначение больничного"
xrtKlVidPos_UOWrkTabel = 81;
// связь "классификатор отпусков - условное обозначение отпуска"
xrtKlOtpusk_UOWrkTabel = 82;
// связь "табель - территориальные условия"
xrtWorkingTable_TerritoryCon = 83;
// история КПП обособленных подразделений
xrtHistoryKppPodr = 100;
// история ОКТМО обособленных подразделений
xrtHistoryOktmoPodr = 101;
// связь "основной - дополнительный" получатель и банк (для перечисления банковского сбора)
xrtKatBankAddition = 110;
// связь "доплата - замещаемый сотрудник"
xrtDoplata_ChangePerson = 15013; // = coDOPLATA;

//------------------------------------------------------------------------------
// виды отчетов, где используется таблица в памяти stCurLSchetRep
//------------------------------------------------------------------------------
//отчет "Детальная ведомость распределения"
xrtVedRaspr = 10;
//отчет "Общая ведомость распределения"
xrtObVedtim = 11;
//отчет "Вспомогательные ведомости"
xrtVedSvod = 12;
//отчет "Аналитический отчет в разрезе начислений"
xrtRasZNach = 13;
//отчет "Расчетно - платежная ведомость"
xrtRpParams = 14;
//отчет расчетно-платежной ведомости с группировками
xrtRpParamsGr = 15;
//отчет о заработной плате
xrtDepOtch = 16;
//отчет Доходы, не подлежащие налогообложению в установленных пределах заработной плате
xrtMatHelp = 17;
//отчет Ведомость исчисления налога на доходы
xrtVedPr4 = 18;
//отчет Расчетная ведомость
xrtVedT51 = 19;
//отчет НДФЛ
xrtNdfl = 20;
//отчет Сведения о зарплате работников по должностям
xrtStatForm_N57 = 21;

// [m]essa[g]e[t]ype
mgtStandart = 0;
mgtCheck = 1;
MessNeedRescan = 'ПРОВЕРЬТЕ ВЫБОР';

//------------------------------------------------------------------------------
// [c]hange [t]ype
// тип перехода в межпериод
//------------------------------------------------------------------------------
ctPermanent         = 0; // постоянный
ctTemporary         = 1; // временный
ctArchivePermanent  = 3; // архивный постоянный
ctArchiveTemporary  = 4; // архивный временный

//----------------------------------------------------------------------------
//  [f]lags [m]odify basket
//----------------------------------------------------------------------------
// константы для флагов модификации рабочей корзины
fmbLschDepartmentMod = 0;
fmbLschTabNmbMod     = 1;
fmbLschcAppointMod   = 2;
fmbLschAppDateMod    = 3;
fmbLschSisOplMod     = 4;
fmbLschCodTarMod     = 5;
fmbLschRazrMod       = 6;
fmbLschRejimMod      = 7;
fmbLschKategMod      = 8;
fmbLschTarifMod      = 9;
fmbLschAppDateMod2   = 10;
fmbLschValMod        = 11;
fmbLschDATUVMod      = 12;
fmbLschKolIjdMod     = 13;
//Persons
fmbLschSovmMod       = 14;
fmbLschDATPOSMod     = 15;
fmbLschPROFSMod      = 16;

fmbLschDATN13Mod     = 17;
fmbLschDATNPSMod     = 18;
fmbLschDATNVISMod    = 19;
fmbSSPayCurrencyMod  = 20;


//------------------------------------------------------------------------------
// коды элементов аминистративно-территориального деления
// [a]dminidtrative and [t]erritorial [d]ivision [e]lements
//------------------------------------------------------------------------------
atdeUnknown    = 0; // неизвестный
atdeCountry    = 1; // страна
atdeOblast     = 2; // область
atdeRayon      = 3; // район
atdeCity       = 4; // город
atdeSettlement = 5; //населенный пункт
atdeDistrict   = 6; // район в городе
atdeStreet     = 7; // улица
atdeVilCouncil = 8; // сельсовет
atdeDopTer     = 9; // доп. территория
atdeStreetDop  = 10; // улица на доп. территории
atdeHouse      = 11; // дом
atdeRegion     = 20; // регион
atdeDopAddrObj = 65; // дополнительный адресный объект
//------------------------------------------------------------------------------
// Название внешнего атрибута, для таблицы PREREXOD, в котором хранится
// корректирующий коэффициент
//------------------------------------------------------------------------------
ChangeCorrectiveFactorExtAttrName = 'PEREXOD_CorRectiveFactor';
EmailCh = 'EMAIL_CH';

//------------------------------------------------------------------------------
// Типы данных в таблице: спецификация бригад (поле: BRWORK.PRIZ)
// [b]rigade [d]ata [c]hoices
//------------------------------------------------------------------------------
bdcBrigadiersHistory = 0; // Архив бригадиров
//------------------------------------------------------------------------------
// Константы налогов на ФОТ (для ЕСН)
//      [n]ame [t]axes
//------------------------------------------------------------------------------
ntFB = 1; //Федеральный бюджет
ntFSS= 2; //ФСС
ntFFOMS= 3;
ntTFOMS= 4;
//------------------------------------------------------------------------------
// Константы ученых степеней
//      [a]cademic [d]egree
//------------------------------------------------------------------------------
adCandidate = 2;
adDoctor    = 10;
//------------------------------------------------------------------------------
// Константы типа склоняемого слова
//      [y]ears [m]onths [d]ays
//------------------------------------------------------------------------------
ymdYears    = 1;
ymdMonths   = 2;
ymdDays     = 3;
//------------------------------------------------------------------------------
// Порядок группировки реестра
//      [p]ayroll [g]roup
//------------------------------------------------------------------------------
pgbank = 1;
pgorg  = 2;
// Тип реестра  (SBBAN.PRIZDEL; SPPLBAN.PRIZDEL) по виду перечисления
// [r]e[g]ister [t]ype
//------------------------------------------------------------------------------
// просмотр всех перечислений (флаг неустановленности фильтра)
rgtTransferred        = 0;
// оплата
rgtOutPay             = 1;
// материальная помощь
rgtWelFare            = 2;
// подоходный налог
rgtSurTax             = 3;
// профвзносы
rgtProfDue            = 4;

//------------------------------------------------------------------------------
// Вид реестра
//      [p]ayroll [k]ind
//------------------------------------------------------------------------------
pkSoc = 12;
//------------------------------------------------------------------------------
// Типы паспортов
//      [p]assport [t]ype
//------------------------------------------------------------------------------
ptSIK = 501;
pt_NN = 505;

//------------------------------------------------------------------------------
// Тип листка нетрудоспособности
// [s]ick [l]ist [t]ype
//------------------------------------------------------------------------------
// больничные текущего периода
sltCurrentPeriod  = 0;
// больничные прошлых периодов (архивные)
sltPastPeriod     = 3;
// больнычные будущего периода (не участвующие в расчетах)
sltFuturePeriod   = 5;

//------------------------------------------------------------------------------
// Особенности заболеваний (для листка нетрудоспособности)
// [s]ick [l]ist [p]roperty
//------------------------------------------------------------------------------
// уволен (истек срок оплаты)
slpDismiss = 1;

//------------------------------------------------------------------------------
// Тип отпуска (vacation, otpusk, factotpusk)
// [v]acation [l]ist [t]ype
//------------------------------------------------------------------------------
// отпуска отчетного периода
vltCurrentPeriod        = 0;
// Вынужденный отпуск
vltForced               = 1;
// отпуска прошлых периодов (архивные)
vltPastPeriod           = 3;
// отпуска будущего периода
vltFuturePeriod         = 4;
// отпуска для восстановления
vltRecovery             = 5;

// Неявки отчетного периода
vltCurrentPeriodAbsence = 1;
// Неявки прошлых периодов (архивные)
vltPastPeriodAbsence    = 3;
// Неявки (factotpusk)
vltAbsenceFactOtpusk    = 2;

// Типы аттестация
attCommon        = 0;
attProfInspect   = 1;

//------------------------------------------------------------------------------
// Дополнительные аттрибуты отпуска
// [v]acation [a]dditional [a]ttributes
//------------------------------------------------------------------------------
// отпуск помечен как удаленный
vaaCancelled  = 1;
// отпуск помечен как удаленный
vaaRecovery = 2;

//------------------------------------------------------------------------------
// Настройки файла экспорта для реестров
//  [t]unes [f]ormat [f]ile
//------------------------------------------------------------------------------
// настройки для модуля Зарплата
tffMoney  = 7804;

//------------------------------------------------------------------------------
// Нумерация платёжных документов
// [p]ayment [d]ocuments [n]umbering
//------------------------------------------------------------------------------
// традиционный способ (от заданного пользователем, с уникальным префиксом "$" или "$R")
pdnDefault = 0;
// по настройкам Бухконтура
pdnSystem = 1;


//------------------------------------------------------------------------------
// имена внешних атрибутов постоянных доплат
// [a]dditional [p]ayment [e]xternal [a]ttribute
//------------------------------------------------------------------------------
apeaPercentDeduction = 'Вычет из процента доплаты';

//------------------------------------------------------------------------------
// имена внешних атрибутов выплат/доплат
// [p]ayment [e]xternal [a]ttribute
//------------------------------------------------------------------------------
peaNachislPeriodBeg = 'Период начисления: начало';
peaNachislPeriodEnd = 'Период начисления: окончание';

//------------------------------------------------------------------------------
// имена внешних атрибутов Классификатора видов удержаний
// [p]ayment [e]xternal [a]ttribute
//------------------------------------------------------------------------------
peaSalaryPayOffCur = 'Вид удержания для уволенных (перечисление в текущем месяце)';
peaSalaryPayOffFut = 'Вид удержания для уволенных (перечисление в будущем месяце)';

//------------------------------------------------------------------------------
// имена внешних атрибутов Лицевого счета
// [l]schet [e]xternal [a]ttribute
//------------------------------------------------------------------------------
leaControlDays = 'Количество дней в статусе нерезидент';
leaPlanPayDate = 'Плановая дата выплаты заработной платы уволенному';

//------------------------------------------------------------------------------
// способ расчета сверхурочных часов
// [o]verwork [c]alculation [m]ethod
//------------------------------------------------------------------------------
// по настройке
ocmDefault  = 0;
// подневный учет
ocmDaily    = 1;
// суммированный учет (период = месяц)
ocmSummed   = 2;
// смешанный
ocmMixed    = 3;

//------------------------------------------------------------------------------
// SalaryDepartmentsSelector:
// options:
//------------------------------------------------------------------------------
// тип входного параметра - longint
// представление: первый байт - по значению три остальные - битовые флаги
// {11111111} [11111111 11111111 11111111]
// емкость: 3*8 = 24 независимые опции (3 байта с битовыми флагами)
//          2^8=  256 режимов
// [s]alary [d]epartments [s]elector [o]ption
//------------------------------------------------------------------------------
// обычный режим пересканирования лицевых счетов
sdsoCommon = 0;
// включение фильтра по цеху отнесения затрат
sdsoOZFilterOn = 1;
// отображение лицевых счетов за прошлый период
sdsoLastPeriod = 2;

//------------------------------------------------------------------------------
// Pafilter:
//------------------------------------------------------------------------------
//----------------------------------------
// [p]ersonal [a]ccount [f]ilter [o]ption настройки всяких фильтров и иже
//----------------------------------------
// обычный инит
pafoCommon = 1;
// пересканирование за прошлый период
pafoLastPeriod = 2;
// с фильтром по цеху отнесения затрат
pafoCexozFilter = 3;

//------------------------------------------------------------------------------
// [m]arkers [i]n [d]esk
//------------------------------------------------------------------------------
// Маркер c должностями
midCatalogsMarker = 1;

//------------------------------------------------------------------------------
// атрибуты детальной ведомости распределения (vedraspr.vip)
// [d]istribution [l]ist [a]ttributes
//
// [l]ist [g]roup [a]ttributes (атрибуты VedGroup)
//------------------------------------------------------------------------------
// по категориям:
lgaWorkerCategory = 0;
// по должностям:
lgaAppointment = 1;
// по наименованиям тарифа (тарифная сетка):
lgaRateSchedule = 2;
// по КАУ:
lgaKAU = 3;
// по ТХО:
lgaTXO = 4;
// по полу:
lgaSex = 5;
// доп. категрии по должностям в Штатном Расписании (Personnel Arrangement)
lgaCategoryInPersArrangments = 6;
// без группировки:
lgaNoGrouping = 7;
// по аналитике:
lgaAnalytics = 8;
// по ТХО и параметру:
lgaTXOParam = 9;
// по виду работы:
lgaVidRab = 10;
//------------------------------------------------------------------------------
// [g]roups of [c]harge (GroupNach - группы начислений)
//------------------------------------------------------------------------------
// по видам оплат, входящим в свод:
gcPaymentKindPartOfCollection = 1;
// по видам оплат, не входящим в свод:
gcPaymentKindNotInCollection = 2;
// по всем видам оплат:
gcAllPaymentKind = 3;

//------------------------------------------------------------------------------
// [v]ed[r]azrez [a]ttribute - атрибуты разреза ведомости
//------------------------------------------------------------------------------
vraNachislenija = 0;  // Начисления
vraUderzanija   = 1;  // Удержания
vraNalogiFOT    = 2;  // Налоги на ФОТ
vraNenachisleno = 4;  // Неначисленные суммы (для расчетного интерфейса, для унификации
                      // на самом деле эта позиция считается вместе с vraNachislenija -
                      // Начислениями

//------------------------------------------------------------------------------
// [f]ilter [t]ype - тип фильтра
//------------------------------------------------------------------------------
ftKlVidOpl = 1;  // По видам оплат
ftKlVidUd  = 2;  // По видам удержаний
ftPerech   = 3;  // По налогам на ФОТ
ftKlKatego = 4;  // По категориям
ftKlVidPos = 5;  // По видам пособий
ftKlOtpusk = 6;  // По видам отпусков
ftKlRejim  = 7;  // По режиму работы
ftKatState = 8;  // По странам командировки
ftKatCity  = 9;  // По городам командировки
ftKatOrg   = 10; // По организациям командировки
ftKlSovm   = 11; // Классификатор совместителей
ftKlSisOpl = 12; // Классификатор систем оплат
ftKlVal    = 13; // Классификатор валют
//------------------------------------------------------------------------------
// [s]pecial [o]ptions [d]etailed [l]ist of [d]istribution - специальные опции
// ведомости распределения
//------------------------------------------------------------------------------
sodlNoSpecOptions = 0;                  // сброс специальных опций
sodldExptIntByWorker = 1;               // исключать внутреннего совместителя
                                        // (системный код вида работы = 3)

//------------------------------------------------------------------------------
// имена зарегистрированных прикладных контекстов
// [a]pplication [c]ontext [n]ames
//------------------------------------------------------------------------------
acnOperatingModes           = 'OperatingModes';
acnWorkingTable             = 'WorkingTable';
acnIntInit                  = 'IntInit';
acnInterperiodCalculations  = 'InterperiodCalculations';
acnPersonalAccountInfo      = 'PaInfo';
acnAdjacentPersonalAccounts = 'AdjacentPA';
acnPADetailsUtils           = 'PADetailsUtils';
acnTableProtectionChecker   = 'TableProtectionChecker';
acnKlVidPosCache            = 'KlVidPosCache';
acnKlOtpuskCache            = 'KlOtpuskCache';
acnBaseIns                  = 'BaseIns';
acnHolidays                 = 'Holidays';
acnInitStavSv               = 'InitStavSv';

// -----------------------------------------------------------------------------
// константы для приказов: номера приказов
// [s]taff [o]rders
// -----------------------------------------------------------------------------
soOvertimeWork     = 72; // приказ на работу сверхурочно
soWeekendWork      = 90; // приказ на работу в выходные
soTraining         = 35; // приказ на обучение
soTrainingTransfer = 36; // приказ о переносе обучения
soHoursAbsence     = 91; // приказ на часовое отклонение
soWorkWhileVac     = 92; // нарабо-ту во время отпуска по уходу за ребёнком
soCancelHoursAbsence = 93; // приказ на отмену часового отклонения
// -----------------------------------------------------------------------------
// константы для таблицы ZarOper: данные по суммам сальдо, перечислениям, выплатам
// в разрезе аналитик
// [s]ourse [r]ecords
// -----------------------------------------------------------------------------
srOrgDebt         = 1;   // долг за предприятием на начало периода
srPrivatDebt      = 2;   // долг за работником на начало периода
srPaymentList     = 3;   // выплаты по платежным ведомостям
srPaymentRegister = 4;   // выплаты по реестрам
srRemainder       = 5;   // остаток за месяц(фактически к выплате)

//------------------------------------------------------------------------------
// Код вида работы KLSOVM.SOVM
// [k]ind of [w]ork [c]ode
//------------------------------------------------------------------------------
kwcFirst = 0;
kwcMainJob        = 0;   // Основное место работы
kwcExternalJob    = 1;   // Внешнее совместительство
kwcContractJob    = 2;   // Договоры подряда
kwcSecondJob      = 3;   // Внутреннее совместительство
kwcFreeLance      = 4;   // Несписочный состав
kwcLast = 4;

//------------------------------------------------------------------------------
// константы для таблицы Podnal6.choice
// [pnl6]
//------------------------------------------------------------------------------
pnl6Relief         = 0;   // Вычет на ребенка
pnl6FSS            = 1;   // Процент в фонд социального страхования
pnl6LifeMin        = 2;   // Прожиточный минимум
pnl6SickList       = 3;   // Ограничения для больничных по уходу
pnl6FZ             = 4;   // Процент в фонд занятости
pnl6EVzar          = 5;   // Процент единого взноса на зарплату
pnl6EVdog          = 6;   // Процент единого взноса на дог/подряда
pnl6EVpos          = 7;   // Процент единого взноса на пособия
pnl6EVzarG         = 8;   // Процент единого взноса на зарплату(госслужащих)
//------------------------------------------------------------------------------
// константы для таблицы NASTRREP.choice
//------------------------------------------------------------------------------
PickDocsChoice     = 2;
//------------------------------------------------------------------------------
// константы для типа источника поле second(UderR^.LastTime)
//------------------------------------------------------------------------------
tuShtraf   = 0;//из таблицы Shtraf
tuPrVidOpl = 1; //из таблицы PrVidOpl
tuSpplBan  = 3; //из таблицы SpplBan
tuSpplVed  = 4; //из таблицы SpplVed
tuChild    = 5; //из таблицы Child
tuChildOne = 6; //из таблицы ChildOne
tuSPVEDDEP = 7; //из таблицы SPVEDDEP
tuLschet   = 8; //из таблицы Lschet для удержания аванса AvFakt
tuOtpusk   = 9; //из таблицы Otpusk
tublisnet  = 10;//из таблицы blisnet
tuRasOrd   = 11;// расчетно-кассовый ордер
tuDummy    = 59;// заглушка

//------------------------------------------------------------------------------
// константы для обработки рабочей корзины
//------------------------------------------------------------------------------
RK_TaxRate        = 1;     // 0000000000000001b; //оклад
RK_PayModel       = 2;     // 0000000000000010b; //система оплаты
RK_Category       = 4;     // 0000000000000100b; //разряд
RK_PayCurrency    = 8;     // 0000000000001000b; //вид валюты
RK_Tariff         = 16;    // 0000000000010000b; //тариф
RK_WorkRegime     = 32;    // 0000000000100000b; //режим работы
RK_EmpCategory    = 64;    // 0000000001000000b; //категория
RK_Delete         = 128;   // 0000000010000000b; //признак удаления
RK_IF             = 256;   // 0000000100000000b; //источники финансирования
RK_Advises        = 512;   // 0000001000000000b; //условия труда на рабочем месте
RK_Rate           = 1024;  // 0000010000000000b; //количество ставок
RK_CorrCoef       = 2048;  // 0000100000000000b; //корректирующий коэффициент
RK_Department     = 4096;  // 0001000000000000b; //подразделение
RK_Post           = 8192;  // 0010000000000000b; //должность
RK_WithoutConsent = 16384; // 0100000000000000b; //без согласия
RK_RegionalCoef   = 32768; // 1000000000000000b; //районный коэфициент

// константа для спец. события щакрытия интерфейса просмотра лицевых счетов из вне (для notify)
cmCloseLschet = 1010;

//------------------------------------------------------------------------------
// константы Видов пособий для реестров в ФСС
//------------------------------------------------------------------------------
cn_vpNetrud     = 1; // Нетрудоспособность
cn_vpBerem      = 2; // Беременность и роды
cn_vpRanBerem   = 3; // Ранние сроки беременности
cn_vpBornChild  = 4; // Рождение ребенка
cn_vpYhodChild  = 5; // Уход за ребенком
cn_vpTravma     = 6; // Проф. травма, болезнь
cn_vpPogreb     = 7; // Погребение
cn_vpDopDay     = 8; // Оплата доп. 4 дней
cn_vpOtpusk     = 9; // Отпуск

//------------------------------------------------------------------------------
// Дополнительные флажки для классификатора видов пособий
//------------------------------------------------------------------------------
kvp_FlagsValid        = 1;  // Действительность остальных дополнительных флажков
kvp_ProlongsVacations = 2;  // Продлевает продлеваемые отпуска
kvp_IsForCare         = 4;  // Является пособием по уходу
kvp_IsForMaternity    = 8;  // Для декретного отпуска
kvp_WorkInjury        = 16; // Производственная травма

//------------------------------------------------------------------------------
// Флажки и сдвиги для KlOtpusk.FilialNo
//------------------------------------------------------------------------------
ko_Welfare           = 1073741824; // Назначать мат. помощь
ko_NoPaid            = 536870912;  // Без оплаты
ko_SplitMonths       = 268435456;  // Разносить оплату компенсации по месяцам
ko_ProlongsVacations = 134217728;  // Продлевает продлеваемые отпуска
ko_Prolongable       = 67108864;   // Является продлеваемым отпуском
ko_Folding           = 33554432;   // Компенсация при разноске "сворачивается" в один день
ko_SplitPays         = 16777216;   // Выплачивать отпуск частями по месяцам
// На сколько разрядов подвинуть единицу, чтобы получить соотв. флажок
koshift_Welfare           = 30;
koshift_NoPaid            = 29;
koshift_SplitMonths       = 28;
koshift_ProlongsVacations = 27;
koshift_Prolongable       = 26;
koshift_Folding           = 25;
koshift_SplitPays         = 24;

//------------------------------------------------------------------------------
// Дополнительные флажки выбора КАУ для классификатора видов удержаний
//------------------------------------------------------------------------------
kvu_Is_SH             = 1;  //из постоянного удержания
kvu_Is_SH_KVU         = 2;  //из КВУ или постоянного удержания (при наличии)
kvu_Is_D_SH           = 3;  //ДТ:из постоянного удержания
kvu_Is_D_SH_KVU       = 4;  //ДТ:из КВУ или постоянного удержания (при наличии)
kvu_Is_K_SH           = 5;  //КТ:из постоянного удержания
kvu_Is_K_SH_KVU       = 6;  //КТ:из КВУ или постоянного удержания (при наличии)

//------------------------------------------------------------------------------
// Константы кодов вредных условий труда ([i]nsalubrity [c]ode)
//------------------------------------------------------------------------------
icOrdinary            = 0; // Обычные условия труда
icExtraHarmful        = 1; // Особо вредные условия труда по Списку 1
icHarmful             = 2; // Вредные условия труда       по Списку 2
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Причины, по которым указана та или иная вредность (Insalubrity Code Reason)
//------------------------------------------------------------------------------
// Причины, связанные с определением вредности согласно Условиям труда из ЛС с учётом переходов
icrClassifierFail      = 1;  // не привязаны условия труда на рабочем месте
//-------------------------
icrListCodeSpecialCon  = 2;  // согласно номеру списка, к которому относится запись "особых условий"
icrUnharmfulSpecialCon = 4;  // особые условия не относятся ко вредным
icrSubStrKPS           = 8;  // согласно первому символу КПС
icrPPSPercent          = 16; // согласно значению процента ППС на дату
icrSpecialConRefFilled = 32; // заполнена ссылка на особые условия
icrSpecialConRefEmpty  = 64; // не заполнена ссылка на особые условия
// 128 - резерв на случай появления ещё вариантов на данном уровне. Если появятся, вписать.
icrWouldBeHarmful      = 256; // условия вредные согласно причинам 2..32
icrWouldBeExtraHarmful = 512; // условия особо вредные согласно причинам 2..32
//--------------------------
icrSexFail             = 1024; // не совпадает пол из условий труда с полом физического лица
// 2048, 4096 - резерв для AdvFunc
icrRetirementAge       = 8192; // достигнут пенсионный возраст
icr30Days              = 16384; // не прошло 30 дней с момента временного перевода на невредную должность
// 32768, 65536 - резерв на другие законодательные маразмы
icrFinalResultHarmful      = 131072; // окончательный результат на данном этапе: вредные условия
icrFinalResultExtraHarmful = 262144; // окончательный результат на данном этапе: особо вредные условия

// Причины, связанные с определением вредности по факту, с учётом отклонений
icr2_BaseInsalubrity   = 1; // согласно условиям труда на дату с учётом переходов
icr2_HoursMoreHarmful  = 2; // обнаружены отработанные с точки зрения доп. тарифов часы с данной вредностью
icr2_HoursLessHarmful  = 4; // отработанное с точки зрения доп. тарифов время целиком в менее вредных условиях, чем по плану
icr2_AbsencesHours     = 8; // обнаружены часы неявок, меняющих вредность на данную
icr2_Absence           = 16; // обнаружена неявка, меняющая вредность на данную
icr2_SickListDayBefore = 32; // вредность больничного принята равной вредности последнего дня перед началом больничного
icr2_VacationDayBefore = 64; // вредность отпуска принята равной вредности последнего дня перед началом отпуска
icr2_FullDay           = 128; // отработал с точки зрения доп. тарифов полный день
icr2_NotFullDay        = 256; // отработал с точки зрения доп. тарифов неполный день
icr2_NotWorking        = 512; // не работал в рабочий по плану день
icr2_80Percent         = 1024; // полным днём считается 80% планового времени (иначе - 100%)
icr2_AbsencesAtWeekend = 2048; // обнаружены неявки в выходной по плану день
icr2_HarmfulAbsence    = 4096; // обнаружена неявка с признаком "вредные условия"
icr2_NearestDayBefore  = 8192; // согласно вредности ближайшего предшествующего рабочего по плану дня
icr2_HoursMajority     = 16384; // благодаря тому, что бОльшая часть времени отработана именно в таких условиях
// 32768, 65536, 131072, 262144 - резерв
icr2_FinalResultHarmful      = 524288; // окончательный результат на данном этапе: вредные условия
icr2_FinalResultExtraHarmful = 1048576; // окончательный результат на данном этапе: особо вредные условия

//------------------------------------------------------------------------------
// Режимы преобразования причины вредности в строку
//------------------------------------------------------------------------------
ir2strDefault    = 0; // официальный(тм) формат
ir2strProOnly    = 1; // только аргументы в пользу принятого решения
ir2strContraOnly = 2; // только аргументы, которые были рассмотрены, но противоречат решению

//------------------------------------------------------------------------------
// Константы кодов специальных условий труда
//------------------------------------------------------------------------------
suTerrUsl             = 1; // Территориальные условия
suOcobUsl             = 2; // Особые условия
suStajUsl             = 4; // Основания для трудового стажа
suVyslUsl             = 8; // Основания для выслуги лет
suKPS_Usl             = 16; // КПС
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Константа минимальной суммы
//------------------------------------------------------------------------------
cn_ContrMinSum = 0.00001;


//------------------------------------------------------------------------------
// Точки входа в справочники АТД
//------------------------------------------------------------------------------
cgTerr:  integer = 9999; // во все справочники
cgATD:   integer = 2200; // во все справочники АТД
cgKLADR: integer =  -10; // в каталог административно-территориального деления
cgHouse: integer = 2202; // в справочник номеров домов АТД
cgOKATO: integer = 2201; // в справочник ОКАТО
cgOKTMO: integer = 2203; // в справочник ОКТМО

//------------------------------------------------------------------------------
// Наименования справочников АТД
cgNameTerr  = 'Корневой';
cgNameATD   = 'Административно-территориальное деление';
cgNameKLADR = 'Каталог административно-территориального деления';
cgNameHouse = 'Номера домов объектов АТД';
cgNameOKATO = 'Справочник ОКАТО';
cgNameOKTMO = 'Справочник ОКТМО';
//------------------------------------------------------------------------------
// Суммы в разделах формы РСВ-1
cn_SummaV_Tar       = 1;
cn_SummaNeobl_Tar   = 2;
cn_SummaRas_Tar     = 3;
cn_SummaPrev_Tar    = 4;
cn_SumBazY_Tar      = 5;
cn_SumBaz1_Tar      = 6;
cn_SumBaz2_Tar      = 7;
cn_SumBaz3_Tar      = 8;
cn_VznNoPrev_Tar    = 9;
cn_VznPrev_Tar      = 10;
cn_KolFZ_Tar        = 11;
cn_KolFZIn_Tar      = 12;
cn_SumVFoms_Tar     = 13;
cn_SumNeoblFoms_Tar = 14;
cn_SumRasxFoms_Tar  = 15;
cn_SumPrevFoms_Tar  = 16;
cn_SumBazFomsy_Tar  = 17;
cn_SumBazFoms1_Tar  = 18;
cn_SumBazFoms2_Tar  = 19;
cn_SumBazFoms3_Tar  = 20;
cn_SumVZNFoms_Tar   = 21;
cn_KolFZY_Tar       = 22;
cn_KolFZInY_Tar     = 23;
cn_VznSolNoPrev     = 24;
cn_VznStrah_Tar     = 25;
cn_KolFZFOMSY_Tar   = 26;
cn_KolFZFOMS_Tar    = 27;
//------------------------------------------------------------------------------
// choice для РСВ-1 (таблица Dols)
cgRSV1_SumLS         = 0;    // основные суммы по сотруднику
cgRSV1_SumLSPk       = 1;    // суммы по подклассам
cgRSV1_SumRazd1      = 3;    // суммы для Раздела 1
cgRSV1_SumTar        = 7;    // суммы по тарифам РСВ-1
cgRSV1_Pack          = 8;    // информация по пачкам в РСВ-1
cgRSV1_SumNeg        = 16;   // отрицательные суммы Раздела 6
cgRSV1_RepSumNegPk1  = 17;   // отрицательные суммы Раздела 6 по подклассам
cgRSV1_RepSumNegPk   = 18;   // продолжение - отрицательные суммы Раздела 6 по подклассам
cgRSV1_SumLSPkKorr   = 11;   // суммы по подклассам (корректирующие сведения)
cgRSV1_SumLSDonach   = 12;   // суммы доначисленных взносов
cgRSV1_SumLSKorr     = 20;   // основные суммы по сотруднику (корректирующие сведения)
cgRSV1_SumDop        = 30;   // дополнительно суммы по сотруднику
cgRSV1_SumDopPk      = 31;   // дополнительно суммы по сотруднику по подклассам
//------------------------------------------------------------------------------
// choice по типам выплат для вредных условий труда (для РСВ-1, индивидуальной карточки)
cn_Sp1           = 1000;
cn_Sp2           = 2000;
cnPkl4_Sp1       = 4001;
cnPkl34_Sp1      = 3401;
cnPkl33_Sp1      = 3301;
cnPkl32_Sp1      = 3201;
cnPkl31_Sp1      = 3101;
cnPkl4_Sp2       = 4002;
cnPkl34_Sp2      = 3402;
cnPkl33_Sp2      = 3302;
cnPkl32_Sp2      = 3202;
cnPkl31_Sp2      = 3102;
cnUglOrLet       = 5000; //для угольщиков и летчиков
//------------------------------------------------------------------------------
// разделитель типов записей таблицы [s]ums[c]alc[p]eriod
scpBlisnet  = 50; //максимальное число периодов в больничном
scpAbsences = 1990;
scpAskona   = 15000;

//------------------------------------------------------------------------------
// разделитель типов записей таблицы [f]ond[o]tp
foBlisnet     = 1000;
foChild       = 1100;
foOneChild    = 1101;
foBlisnetDoc1 = 1201;
foBlisnetDoc2 = 1202;
foBlisnetDoc3 = 1203;
foBlisnetPre1 = 1204;
foBlisnetPre2 = 1205;
foBlisnetPre3 = 1206;

// записи для штрих-кода [2000..3000]
foBarChild = 2000;
// целодневные неявки
foAbsence = 100;

//------------------------------------------------------------------------------
// [c]alculation [p]eriod
cpReport = 0;
cpFuture = 1;
//------------------------------------------------------------------------------
// Типы связанности суток рабочими сменами (Linked Day Kinds)
//------------------------------------------------------------------------------
ldkNone      = 0; // отсутствуют смены, переходящие на соседние сутки
ldkFirstDay  = 1; // Первый день смены: смена начинается в этот день, заканчивается в следующем
ldkLastDay   = 2; // Второй день смены: смена началась за день до этого дня, закончилась в этот день
ldkTwoShifts = 3; // Две смены в течение одних суток: одна пришла с прошлых суток, другая перейдёт на следующие
//------------------------------------------------------------------------------
// Режимы печати справок по детским пособиям [p]rint [m]ode
//------------------------------------------------------------------------------
pmCurrent = 0;
pmAfterCalcAll = 1;
pmArchive = 2;
pmArchiveBar = 3;
//------------------------------------------------------------------------------
// Режимы работы интерфейса печати справок о среднем заработке
//------------------------------------------------------------------------------
szResStore = 0;             // 0 0 00 00 0
                            // │ │  │  │ └── сохраняем в базе,
                            // │ │  │  └──── печать справки о среднем заработке по общесистемной настройке,
                            // │ │  └─────── печать детального протокола по общесистемной настройке,
                            // │ └────────── режим буфера отключен
                            // └──────────── не формируем штрих-код
szBufferWithNRec = 57;      // 0 1 11 00 1
                            // │ │  │  │ └── не сохраняем в базе,
                            // │ │  │  └──── печать справки о среднем заработке по общесистемной настройке,
                            // │ │  └─────── запрет печати детального протокола
                            // │ └────────── режим буфера
                            // └──────────── не формируем штрих-код
szBufferWithNRecPrint = 59; // 0 1 11 01 1
                            // │ │  │  │ └── не сохраняем в базе,
                            // │ │  │  └──── печать справки о среднем заработке
                            // │ │  └─────── запрет печати детального протокола
                            // │ └────────── режим буфера
                            // └──────────── не формируем штрих-код
szBuffer = 65;              // 1 0 00 00 1
                            // │ │  │  │ └── не сохраняем в базе,
                            // │ │  │  └──── печать справки о среднем заработке по общесистемной настройке,
                            // │ │  └─────── печать детального протокола по общесистемной настройке,
                            // │ └────────── режим буфера отключен
                            // └──────────── формируем штрих-код
szOnlyDetailPrint = 71;     // 1 0 00 11 1
                            // │ │  │  │ └── не сохраняем в базе,
                            // │ │  │  └──── запрет печати справки о среднем заработке,
                            // │ │  └─────── печать детального протокола по общесистемной настройке,
                            // │ └────────── режим буфера отключен
                            // └──────────── формируем штрих-код
//------------------------------------------------------------------------------
// Параметр вызова интерфейса PChild
//------------------------------------------------------------------------------
ipChildBar = -5;
//------------------------------------------------------------------------------
// Параметр вызова интерфейса VOtpusk
//------------------------------------------------------------------------------
ipAbsenceBar = 555;
//------------------------------------------------------------------------------
// логика фильтра по ЛС при отборе по цехам отнесения затрат
//------------------------------------------------------------------------------
flQueryByPodr = 0;
flQueryByLschet = 1;
//------------------------------------------------------------------------------
// идентификаторы шаблона РСВ-1
//------------------------------------------------------------------------------
PFREP_PAT_2014 = 'PAT_Form_2014';
RepID = 'Z_PFREP\' + PFREP_PAT_2014;

FSS_PAT_2016 = 'FSS_PAT_2016';
FSSID = 'Z_REPORT\' + FSS_PAT_2016;
//------------------------------------------------------------------------------
// режим работы интерфейса пометки ЛС
//------------------------------------------------------------------------------
moCommon = 100;
moAlternate = 0;

// пересканировать ЛС
pafmReScan = 1;

// идентификатор полей для импорта из xls
idfStrTabN = 1;
idfTabN = 2;
idfFIO = 3;
idfSumma = 4;
idfProc = 5;
idfCountDays = 6;
idfCountHours = 7;
idfLschet = 8;
idfCAppoint = 9;
idfInsuranceNum = 10;

// тип файла
ftUnKnow = 0;
ftXls = 1;
ftDbf = 2;

ctfStrTabN = 'Строковый табельный номер';
ctfTabN = 'Табельный номер';
ctfFIO = 'ФИО';
ctfSumma = 'Сумма';
ctfProc = 'Процент';
ctfCountDays = 'Количество дней ';
ctfCountHours = 'Количество часов';
ctfLschet = 'Лицевой счет';
ctfCAppoint = 'Должность';
ctfInsuranceNum = 'Страховой номер';

cbChecked = 1;
cbUnChecked = 0;

//------------------------------------------------------------------------------
// LS[T]AB.[F]ILIALNO, флажки для поля FILIALNO табеля
//------------------------------------------------------------------------------
// Коэффициент среднесписочной введен вручную
tfAvgFactorManualEntry = 1;
// В лстабе хранится районный коэффициент
tfRegionalFactorStored = 2;
// Выходные дни хранятся в битовой маске в поле LSTAB.VIDOPL[3]
tfWeekendsStored = 4;
// ЛСТаб защищён от переноса реквизитов ЛС
tfPermanentLsData = 8;
// Табель имеет территориальные условия, независимые от ADVISES
tfIndependentTerritoryCon = 16;
// В лстабе хранятся кол-во ставок, условия труда на рабочем месте и территориальные условия
tfWageRateInsalubrityTerritorialStored = 32;
// В лстабе хранятся итоги по праздничным
tfHolidayStored = 64;
// В лстабе хранятся итоги за отгул
tfForLeaveStored = 128;

//------------------------------------------------------------------------------
// [s]tatus [f]lag
//------------------------------------------------------------------------------
// пустая
sfUnKnown = 0;
// иностранец постоянное проживание
sfPermanentResident = 1;
// иностранец временное проживание
sfTemporaryResident = 2;
//иностранец временное пребывание (6 месяцев и более)
sfTemporaryArriving_More6m = 3;
//иностранец временное пребывание (менее 6 месяцев)
sfTemporaryArriving_Less6m = 4;
//иностранец постоянное проживание (высококвалифицированный)
sfPermanentResidentHighQual = 5;
//иностранец временное проживание (высококвалифицированный)
sfTemporaryResidentHighQual = 6;
// иностранец временно пребывающий (высококвалифицированный)
sfTemporaryArrivingHighQualified = 7;
// Сотрудники, освобожденные от страховых взносов
sfDutyFree = 255;

// [t]ax [d]eduction [f]lag
// Пусто
tdfEmpty = '';
// Перегнали при переходе на новый период
tdfNewPeriod = '1';
// Заполнили в будущем периоде руками
tdfManualFuture = '2';
// Заполнили при помощи функции в будущем периоде
//(может это все в один флаг свести???)
tdfFunction = '4';
// Заполнили при обычном просмотре
tdfSimpleView = '8';

tdfMaskTaxDeduction = 3;
tdfMaskTaxDeductionAlt = 12;
tdfMaskTaxDeductionDependent = 48;
tdfMaskTaxDeductionExtra = 192;

tdfChangedTaxDeduction = tdfMaskTaxDeduction;
tdfChangedTaxDeductionAlt = tdfMaskTaxDeductionAlt;
tdfChangedTaxDeductionDependent = 223;
tdfChangedTaxDeductionExtra = 64;

// [t]ax [d]eduction calc [m]ode
// Виртуальный режим
tdmVirtual = 0;
// Реальный режим
tdmStore = 1;

//
cnRounding = True;
cnSimple = False;

// Градация индексации
giEmptyCategCode = 65535;

// Режим запуска сервисных функций
// Ручной
ssManual = 0;
// Автоматический
ssAuto = 1;

// Флаг отработки сервисной функции (настройка UP.ZAR.INDEKSSERVICE)
// Индексация
fsfIndeks = 1;
// Баг после выполнения функции контроля пересечения больничного с отпуском
fsfCross = 2;
// Нехватка значимых цифр для значений градации индексации
fsfIndeksPrec = 4;
// После добавления индекса можно в поле EndInt хранить реальное значение
fsfIndeksSimpleField = 8;


// Множитель для двойного назначения поля таблицы Indeks
ccShtValueOld = 1000000000;
ccShtValue = 1000000;

// Причина создания записи по отпуску
rvmCrossWithBlisnet = 1;
rvmMadeReserv = 2;

// Режимы запуска функции восстановления отпусков
// Из отпуска
rvfVacation = 1;
// Непосредственно сервисная функция
rvfServiceFunction = 2;

// Вызов детального протокола из ...
dpIllness = 0;
dpSprSrZar = 1;

// Режим распределенного расчета
cgDistr_None      = 0; // обычный расчет,
cgDistr_Manager   = 1; // работа в роли диспетчера (распределение списка ЛС между серверами),
cgDistr_Server_SP = 2; // расчет одного заданного ЛС (взаимодействие через atm.dll)
cgDistr_Server_WS = 3; // расчет ЛС из очереди заданий (взаимодействие через WinSocket)

// Параметры расчета
cgPayroll_Raznoska  =     1; // 0000 0000 0000 0000 0000 0000 0000 0001 - предварительная разноска                  SaveMyDsk(word(1),'Tab_Tabel');
cgPayroll_Nach      =     2; // 0000 0000 0000 0000 0000 0000 0000 0010 - расчет начислений                         boGetTune('UP.Zar.Accounts.Nach')
cgPayroll_Cost      =     4; // 0000 0000 0000 0000 0000 0000 0000 0100 - распределение затрат                      boGetTune('UP.Zar.Accounts.ShareCosts')
cgPayroll_Uder      =     8; // 0000 0000 0000 0000 0000 0000 0000 1000 - расчет удержаний                          boGetTune('UP.Zar.Accounts.Ud')
cgPayroll_FOT       =    16; // 0000 0000 0000 0000 0000 0000 0001 0000 - расчет налогов на ФОТ                     boGetTune('UP.Zar.Accounts.FOT')
cgPayroll_Undo      =    32; // 0000 0000 0000 0000 0000 0000 0010 0000 - отмена расчета зарплаты                   ReadMyDsk(Udzarnet, 'Ud_Udzarnet')
cgPayroll_Dolg      =    64; // 0000 0000 0000 0000 0000 0000 0100 0000 - относить долги уволенных на основной ЛС   word(boGetTune('UP.ZAR.DOLG.DT'))    ReadMyDsk(DebtTransfer, 'Zarnetr_DT')
cgPayroll_Final     =   128; // 0000 0000 0000 0000 0000 0000 1000 0000 - окончательный расчет                      word(boGetTune('UP.ZAR.DOLG.FC'))    ReadMyDSK(FinalCalc, 'Zarnetr_FinalCalc')
cgPayroll_Sovm      =   256; // 0000 0000 0000 0000 0000 0001 0000 0000 - с учетом смежных лицевых счетов           wGetTune('UP.ZAR.ACCOUNTS.VidRab')= 1
cgRaznoska_Period   =   512; // 0000 0000 0000 0000 0000 0010 0000 0000 - Предварительная разноска за период
cgRaznoska_Avans    =  1024; // 0000 0000 0000 0000 0000 0100 0000 0000 - Предварительная разноска - Расчет аванса
cgRaznoska_TabRuch  =  2048; // 0000 0000 0000 0000 0000 1000 0000 0000 - Предварительная разноска - Оставить записи, созданные вручную
cgRaznoska_KorrRuch =  4096; // 0000 0000 0000 0000 0001 0000 0000 0000 - Предварительная разноска - Оставить записи, откорректированные вручную
cgPayroll_Saldo     =  8192; // 0000 0000 0000 0000 0010 0000 0000 0000 - Расчет сальдо
cgPayroll_RList     = 16384; // 0000 0000 0000 0000 0100 0000 0000 0000 - Расчет сальдо
cgPayroll_Fired     = 32768; // 0000 0000 0000 0000 1000 0000 0000      - Расчет заработной платы уволенным с целью перечисления суммы в межпериод
                             // 0000 0000 0000 00DD 0000 0000 0000 0000 - (1) режимы разбиения видов оплат в предварительной разноске
                             // 0000 0000 WWWW 0000 0000 0000 0000 0000 - (2) откуда вызвали
                             // 0000 PPPP 0000 0000 0000 0000 0000 0000 - (3) режимы протоколирования                SaveMyDsk(OtlFOT, 'Zarnetr_OtlFOT');, SaveMyDsk(DebugInfo, 'Zarnetr_DebugInfo');

// (1) Режимы разбиения видов оплат в предварительной разноске (shl 16)
cgDivide_Yes     = 0; // 00 Разбивать
cgDivide_No      = 1; // 01 Не разбивать
cgDivide_Perehod = 2; // 10 Только по переходам


// (2) Откуда вызвали (shl 20)
cgWhence_Unknown:    longint = 0; // 0000 Не известно
cgWhence_RabUch:     longint = 1; // 0001 Предварительная разноска (RabUch)
cgWhence_Payroll:    longint = 2; // 0010 Расчет зарплаты (ZarNetR)
cgWhence_Otpusk:     longint = 3; // 0011 Расчет отпуска (RasOtp)          ReadMyDsk(IsOtpusk, 'Zar_IzOtpusk');
cgWhence_Blisnet:    longint = 4; // 0100 Расчет больничного (BLisNet1)
cgWhence_ExpOtpusk:  longint = 5; // 0101 Экспорт отпускных сумм в НИОКР (ExportOtpusk)
cgWhence_ExpBlisnet: longint = 6; // 0110 Экспорт больничных сумм в НИОКР (ExportBlisnet)    SaveMyDsk(word(1), 'ExportBlisnetNIOKR');

// Начальный год для сохранения данных при расчете детских пособий
chYearS = 2000;

// Режим работы функции контроля пересечения больничного с отпуском
// ... просмотр
ivcmPreView = 1;
// ... выполнение
ivcmRun = 0;

//Удержанный налог не является возвратом
coNotRepayment = 1410;
coRepayment = 1514;
coEmptyPayment = -1000;

//период выставлен пользователем вручную
coUserDefinedPeriod = 99;

//режимы отображения результатов расчета
coDefaultView = 0;

// Номер индекса в структуре NAKCEX по умолчанию
nciDefault = -1;

// [r]eport [m]ode
// rmStart... - в интерфейсе настройки формы-4 ФСС (Fss4)

// Пустышка
rmDummy = 0;

// Форма - 4а ФСС РФ
rmStartFSSa2010 = 1;

// Форма - 4 ФСС РФ (от 12.03.2012) Excel
rmStartFss2012 = 2;
rmFss2012 = 4;

// Форма - 4 ФСС РФ (от 28.02.2011) Excel
rmStartFss2011 = 4;
rmFss2011 = 3;

// Форма - 4 ФСС РФ (2012г. Проект за 9 мес.)
rmFss2012_9 = 5;
rmStartFss2012_9 = rmFss2012_9;

// Форма - 4 ФСС РФ (2012г. Пилотный проект)
rmFss2012_Pilot = 6;
rmStartFss2012_Pilot = rmFss2012_Pilot;

// Форма - 4 ФСС РФ (Проект новой формы 2013г.)
rmFss2013 = 7;
rmStartFss2013 = rmFss2013;

// Форма - 4 ФСС РФ (2014г.) Excel
rmFss2014 = 8;
rmStartFss2014 = rmFss2014;

// Форма - 4 ФСС РФ (2015г.) Excel
rmFss2015 = 9;
rmStartFss2015 = rmFss2015;

// Форма - 4 ФСС РФ (2016г.) Excel
rmFss2016 = 10;
rmStartFss2016 = rmFss2016;

// Форма - 4 ФСС РФ (2017г.) Excel
rmFss2017 = 11;

// Поле Entering объекта TAccumulation
casEntering_1 = 1;
casEntering_2 = 2;
casEntering_3 = 3;
casEntering_4 = 4;
casEntering_5 = 5;
casEntering_6 = 6;
casEntering_7 = 7;
casEntering_Serve_8 = 8;
casEntering_North_9 = 9;
casEntering_Prof_10 = 10;
casEntering_Alim_11 = 11;
casEntering_12 = 12;
casEntering_13 = 13;
casEntering_14 = 14;
casEntering_15 = 15;
casEntering_16 = 16;
casEntering_17 = 17;
casEntering_18 = 18;
casEntering_19 = 19;
casEntering_20 = 20;
casEntering_23 = 23;
casEntering_RK_24 = 24;
casEntering_33 = 33;
casEntering_47 = 47;
casEntering_48 = 48;
casEntering_55 = 55;
casEntering_66 = 66;
casEntering_83 = 83;
casEntering_88 = 88;
casEntering_100 = 100;
casEntering_101 = 101;

// Тип записи удержания налога
nwtDummy = 0;
nwtTaxMain = 1;
nwtTaxExtra = 2;
nwtShtraf = 3;

//статус участия в расчете у постоянных доплат и удержаний
coActiveRP = '+';
coInactiveRP = '-';
coArchivedRP = 'AR';
coFuturePeriodRP = '3';
coReportPeriodRP = '2';

// Флаги для управления записью в постоянных удержаниях (минуты в поле LASTTIME)
sltMatVigodaStorn = 1; // 0000 0001 - пересчет подоходного налога с материальной выгоды
sltReserv1        = 2; // 0000 0010 - резерв
sltReserv2        = 4; // 0000 0100 - резерв
sltReserv3        = 8; // 0000 1000 - резерв
sltReserv4       = 16; // 0001 0000 - резерв
// ... и больше нельзя, так как храним в минутах временнОго поля

// Флаги для управления записью в удержаниях (минуты в поле LASTTIME)
ultSummaCondition = 1; // 0000 0001 - ограничение суммы подоходного налога 50 процентами от начисления в денежной форме
ultReserv1        = 2; // 0000 0010 - резерв
ultReserv2        = 4; // 0000 0100 - резерв
ultReserv3        = 8; // 0000 1000 - резерв
ultReserv4       = 16; // 0001 0000 - резерв
// ... и больше нельзя, так как храним в минутах временнОго поля

// Флаги для управления записью в спецификации реестров (минуты в поле LASTTIME)
zltActualTaxD     = 1; // 0000 0001 - запись с актуальными данными по вычетам
zltReserv1        = 2; // 0000 0010 - резерв
zltReserv2        = 4; // 0000 0100 - резерв
zltReserv3        = 8; // 0000 1000 - резерв
zltReserv4       = 16; // 0001 0000 - резерв
// ... и больше нельзя, так как храним в минутах временнОго поля

//статусы в нарядах: расчитывался ли наряд или была ли разноска
coJSYes = '√'; //да, была разноска/расчет
coJSNo = ''; //нет, не было

//константы вкладок в интерфейсе лицевого счета
coLSMain = 0; //основная вкладка
coLSexpenses = 1; //отнесение затрат
coLSPersonnelInfo = 2; //кадровая информация
coLSFireHistory = 3; //история увольнений
coLSIncomeTax = 4; //налог на доходы
coLSDuesAndWageFundTaxes = 5; //Взносы, налоги на ФОТ
coLSExperienceAndBonuses = 6; //стажи, надбавки
coLSBank = 7; //Банк

// Флаги для записей пособия по уходу за ребенком
chfAvgNewField = 1;

// [m]eg[r]as[p]odoh
// По архивным отпускам
mrpPastVacation = 3;
// По отпускам текущего периода
mrpCurrentVacation = 1;
// По отпускам будущего периода
mrpFutureVacation = cOtpFuture;
// ----
// По больничным
mrpSickList = 2;
// По больничным будущего периода
mrpFutureSickList = cKadrySickLists;

// Флаги для управления передачей данных в другой филиал
tdfFullBase         = 1;      // 0000 0000 0000 0001 - поиск во всей базе
tdfPrintReport      = 2;      // 0000 0000 0000 0010 - вывод отчета для каждого лицевого счета
tdfFullBaseMessage  = 32768;  // 1000 0000 0000 0000 - вывод сообщения и необходимости поиска во всей базе

// Режим работа с интерфейсом больничных
blmInternal = 0;
blmExternal = 1;

//------------------------------------------------------------------------------
// [o]tpusk [t]ype
// типы отпусков (KlOtpusk.TypeOtp)
//------------------------------------------------------------------------------
otMain       = 0; // основной
otAdditional = 1; // дополнительный
otOther      = 2; // прочий
otCompens    = 3; // компенсация
otAbsence    = 4; // целодневная неявка
otBIR        = 5; // БИР

// Флаги таблицы KlChild
klcfDirectFSS = 1;

// Управление расчетом подоходного налога [t]ax[c]ontrol[f]lags
tcfInverse          = 1;      // 0000 0000 0000 0001 - расчет от обратного
tcfWithOutTaxFree   = 2;      // 0000 0000 0000 0010 - расчет БЕЗ учета скидок
tcfWithOut73        = 4;      // 0000 0000 0000 0100 - расчет БЕЗ учета скидок c 73 дополнительной входимостью
tcfWithOutStandVych = 8;      // 0000 0000 0000 1000 - расчет БЕЗ учета стандартных вычетов
tcfTolkoSum         = 16;     // 0000 0000 0001 0000 - расчет только от указанной суммы
tcfNotNDFLSumFSS    = 32;     // 0000 0000 0010 0000 - НЕ рассчитывать НДФЛ с суммы ФСС
tcfWithOutMatHelp   = 64;     // 0000 0000 0100 0000 - расчет БЕЗ учета льготы по материальной помощи
tcfSpecificationSet = 32768;  // 1000 0000 0000 0000 - установлены значения флагов

// [v]acation[c]alc[u]der[f]lags
vcufManual          = 1;      // 0000 0000 0000 0001 - ручной режим установки настроек расчета удержаний

// параметр вызова интерфейса[c]alc[u]der[s]et
cusBlisnet  = 0;
cusPrVidOpl = 1;
cusOtpusk   = 2;

// режим работы фильтра по лицевым счетам интерфейса [p]rint[s]redn[p]ersonal[f]ilter
pspfCommon = 0; // обычная загрузка
pspfLschet = 1; // загрузка с предустановленными лицевыми счетами

// режим работы фильтра по периоду интерфейса [p]rint[s]redn[d]ates[f]ilter
psdfDSK = 0;          // данные брать из DSK
psdfPreSetPeriod = 1;  // загрузка с предустановленным периодом
